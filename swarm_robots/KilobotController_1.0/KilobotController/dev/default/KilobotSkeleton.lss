
KilobotSkeleton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001de  00800100  000029ae  00002a42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b2  008002de  008002de  00002c20  2**0
                  ALLOC
  3 .debug_aranges 000001c8  00000000  00000000  00002c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000593  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003101  00000000  00000000  0000337b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001654  00000000  00000000  0000647c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002798  00000000  00000000  00007ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  0000a268  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000719  00000000  00000000  0000a568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001169  00000000  00000000  0000ac81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  0000bdea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_6>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__vector_11>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__vector_14>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      5c:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__vector_23>
      60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <wdt_init>:

//for reset, makes sure wdt doesnt continously reset
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
      74:	14 be       	out	0x34, r1	; 52
    MCUSR = 0;
    wdt_disable();
      76:	88 e1       	ldi	r24, 0x18	; 24
      78:	0f b6       	in	r0, 0x3f	; 63
      7a:	f8 94       	cli
      7c:	80 93 60 00 	sts	0x0060, r24
      80:	10 92 60 00 	sts	0x0060, r1
      84:	0f be       	out	0x3f, r0	; 63

00000086 <__do_copy_data>:
      86:	12 e0       	ldi	r17, 0x02	; 2
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	ee ea       	ldi	r30, 0xAE	; 174
      8e:	f9 e2       	ldi	r31, 0x29	; 41
      90:	02 c0       	rjmp	.+4      	; 0x96 <.do_copy_data_start>

00000092 <.do_copy_data_loop>:
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0

00000096 <.do_copy_data_start>:
      96:	ae 3d       	cpi	r26, 0xDE	; 222
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <.do_copy_data_loop>

0000009c <__do_clear_bss>:
      9c:	13 e0       	ldi	r17, 0x03	; 3
      9e:	ae ed       	ldi	r26, 0xDE	; 222
      a0:	b2 e0       	ldi	r27, 0x02	; 2
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a0 39       	cpi	r26, 0x90	; 144
      a8:	b1 07       	cpc	r27, r17
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
      b0:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <main>:
{
  // no instruction should be placed before init_robot();
	// because nothing is already initialised  !!
	
	// initialise the robot
	init_robot(); 
      b8:	0e 94 4a 0a 	call	0x1494	; 0x1494 <init_robot>

 
  // loop and run each time the user program
	main_program_loop(user_program); 
      bc:	85 e6       	ldi	r24, 0x65	; 101
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 02 09 	call	0x1204	; 0x1204 <main_program_loop>

	
}
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	08 95       	ret

000000ca <user_program>:
static int TestLED=0;


// user program function
void user_program(void)
{
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
	//  Otherwise,they are displaying they distance to each other with the rgb led.
	//  
	////////////////////////////////////////////////////////////////////////////////////

	// if the first time the loop is called, initialise the robot id
	if (init)
      d2:	80 91 36 01 	lds	r24, 0x0136
      d6:	90 91 37 01 	lds	r25, 0x0137
      da:	89 2b       	or	r24, r25
      dc:	d1 f0       	breq	.+52     	; 0x112 <user_program+0x48>
      de:	00 e0       	ldi	r16, 0x00	; 0
      e0:	10 e0       	ldi	r17, 0x00	; 0
      e2:	c0 e0       	ldi	r28, 0x00	; 0
      e4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		int randseed=0;
		// generate random seed (must be placed AFTER init_robot()
		
		for(int i=0;i<30;i++)
			randseed+=get_ambient_light( );//generate some random sensor data
      e6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <get_ambient_light>
      ea:	08 0f       	add	r16, r24
      ec:	19 1f       	adc	r17, r25
	if (init)
	{
		int randseed=0;
		// generate random seed (must be placed AFTER init_robot()
		
		for(int i=0;i<30;i++)
      ee:	21 96       	adiw	r28, 0x01	; 1
      f0:	ce 31       	cpi	r28, 0x1E	; 30
      f2:	d1 05       	cpc	r29, r1
      f4:	c1 f7       	brne	.-16     	; 0xe6 <user_program+0x1c>
			randseed+=get_ambient_light( );//generate some random sensor data

		srand(randseed);//seed random variable with some sensor data
      f6:	c8 01       	movw	r24, r16
      f8:	0e 94 35 14 	call	0x286a	; 0x286a <srand>

		// generate robot id
		robot_id = rand() & 255;
      fc:	0e 94 30 14 	call	0x2860	; 0x2860 <rand>
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	90 93 df 02 	sts	0x02DF, r25
     106:	80 93 de 02 	sts	0x02DE, r24

		init=0;
     10a:	10 92 37 01 	sts	0x0137, r1
     10e:	10 92 36 01 	sts	0x0136, r1
	}
	

  // Print the ambient light on the debug port

	kprints("ambient l:");
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
	kprinti(get_ambient_light());
     11a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <get_ambient_light>
     11e:	0e 94 07 0a 	call	0x140e	; 0x140e <kprinti>

	kprints("          ");
     122:	8b e0       	ldi	r24, 0x0B	; 11
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
	
	// Print robot id
	kprints("own id:   ");
     12a:	86 e1       	ldi	r24, 0x16	; 22
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
	kprinti(robot_id);
     132:	80 91 de 02 	lds	r24, 0x02DE
     136:	90 91 df 02 	lds	r25, 0x02DF
     13a:	0e 94 07 0a 	call	0x140e	; 0x140e <kprinti>
	kprints("          ");
     13e:	8b e0       	ldi	r24, 0x0B	; 11
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>

	message_out(robot_id,255,0);//set message to be sent over IR
     146:	80 91 de 02 	lds	r24, 0x02DE
     14a:	6f ef       	ldi	r22, 0xFF	; 255
     14c:	40 e0       	ldi	r20, 0x00	; 0
     14e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <message_out>

	enable_tx=1;//enable transmission of message every .2 seconds
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	80 93 d0 01 	sts	0x01D0, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     158:	80 e2       	ldi	r24, 0x20	; 32
     15a:	9e e4       	ldi	r25, 0x4E	; 78
     15c:	01 97       	sbiw	r24, 0x01	; 1
     15e:	f1 f7       	brne	.-4      	; 0x15c <user_program+0x92>

	//check for message

	_delay_ms(10);//wait 10 ms

	get_message();
     160:	0e 94 de 01 	call	0x3bc	; 0x3bc <get_message>

	if(message_rx[5]==1)//new message has been received
     164:	80 91 82 03 	lds	r24, 0x0382
     168:	90 91 83 03 	lds	r25, 0x0383
     16c:	01 97       	sbiw	r24, 0x01	; 1
     16e:	09 f0       	breq	.+2      	; 0x172 <user_program+0xa8>
     170:	79 c0       	rjmp	.+242    	; 0x264 <user_program+0x19a>

	{

		set_motor(0,0);
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	0e 94 dd 07 	call	0xfba	; 0xfba <set_motor>

		if(message_rx[3] == 33)
     17a:	80 91 7e 03 	lds	r24, 0x037E
     17e:	90 91 7f 03 	lds	r25, 0x037F
     182:	81 97       	sbiw	r24, 0x21	; 33
     184:	19 f4       	brne	.+6      	; 0x18c <user_program+0xc2>
			set_color(3,3,3);//turn RGB LED White
     186:	83 e0       	ldi	r24, 0x03	; 3
     188:	63 e0       	ldi	r22, 0x03	; 3
     18a:	38 c0       	rjmp	.+112    	; 0x1fc <user_program+0x132>

		else if(message_rx[3] < 40)
     18c:	80 91 7e 03 	lds	r24, 0x037E
     190:	90 91 7f 03 	lds	r25, 0x037F
     194:	88 97       	sbiw	r24, 0x28	; 40
     196:	1c f4       	brge	.+6      	; 0x19e <user_program+0xd4>
	    set_color(3,0,0);//turn RGB LED Red
     198:	83 e0       	ldi	r24, 0x03	; 3
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	10 c0       	rjmp	.+32     	; 0x1be <user_program+0xf4>

		else if(message_rx[3] < 50)
     19e:	80 91 7e 03 	lds	r24, 0x037E
     1a2:	90 91 7f 03 	lds	r25, 0x037F
     1a6:	c2 97       	sbiw	r24, 0x32	; 50
     1a8:	14 f4       	brge	.+4      	; 0x1ae <user_program+0xe4>
		  set_color(3,3,0);//turn RGB LED Orange
     1aa:	83 e0       	ldi	r24, 0x03	; 3
     1ac:	07 c0       	rjmp	.+14     	; 0x1bc <user_program+0xf2>

		else if(message_rx[3] < 60)
     1ae:	80 91 7e 03 	lds	r24, 0x037E
     1b2:	90 91 7f 03 	lds	r25, 0x037F
     1b6:	cc 97       	sbiw	r24, 0x3c	; 60
     1b8:	24 f4       	brge	.+8      	; 0x1c2 <user_program+0xf8>
		  set_color(0,3,0);//turn RGB LED Green
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	63 e0       	ldi	r22, 0x03	; 3
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	1e c0       	rjmp	.+60     	; 0x1fe <user_program+0x134>

		else if(message_rx[3] < 70)			
     1c2:	80 91 7e 03 	lds	r24, 0x037E
     1c6:	90 91 7f 03 	lds	r25, 0x037F
     1ca:	86 34       	cpi	r24, 0x46	; 70
     1cc:	91 05       	cpc	r25, r1
     1ce:	24 f4       	brge	.+8      	; 0x1d8 <user_program+0x10e>
		  set_color(0,3,1);//turn RGB LED Turquoise
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	63 e0       	ldi	r22, 0x03	; 3
     1d4:	41 e0       	ldi	r20, 0x01	; 1
     1d6:	13 c0       	rjmp	.+38     	; 0x1fe <user_program+0x134>

		else if(message_rx[3] < 80)
     1d8:	80 91 7e 03 	lds	r24, 0x037E
     1dc:	90 91 7f 03 	lds	r25, 0x037F
     1e0:	80 35       	cpi	r24, 0x50	; 80
     1e2:	91 05       	cpc	r25, r1
     1e4:	14 f4       	brge	.+4      	; 0x1ea <user_program+0x120>
			set_color(0,0,3);//turn RGB LED Blue
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	08 c0       	rjmp	.+16     	; 0x1fa <user_program+0x130>

		else if(message_rx[3] < 90)
     1ea:	80 91 7e 03 	lds	r24, 0x037E
     1ee:	90 91 7f 03 	lds	r25, 0x037F
     1f2:	8a 35       	cpi	r24, 0x5A	; 90
     1f4:	91 05       	cpc	r25, r1
     1f6:	2c f4       	brge	.+10     	; 0x202 <user_program+0x138>
			set_color(3,0,3);//turn RGB LED Violet
     1f8:	83 e0       	ldi	r24, 0x03	; 3
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	43 e0       	ldi	r20, 0x03	; 3
     1fe:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>

		kprints("received:");
     202:	81 e2       	ldi	r24, 0x21	; 33
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
		kprints("id mes dis");
     20a:	8b e2       	ldi	r24, 0x2B	; 43
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
		kprinti(message_rx[0]);//send first byte of received message over serial debug cable
     212:	80 91 78 03 	lds	r24, 0x0378
     216:	90 91 79 03 	lds	r25, 0x0379
     21a:	0e 94 07 0a 	call	0x140e	; 0x140e <kprinti>
		kprinti(message_rx[1]);//send second byte of received message over serial debug cable
     21e:	80 91 7a 03 	lds	r24, 0x037A
     222:	90 91 7b 03 	lds	r25, 0x037B
     226:	0e 94 07 0a 	call	0x140e	; 0x140e <kprinti>
		kprinti(message_rx[3]);//send measured distance from transmitting robot over serial debug cable
     22a:	80 91 7e 03 	lds	r24, 0x037E
     22e:	90 91 7f 03 	lds	r25, 0x037F
     232:	0e 94 07 0a 	call	0x140e	; 0x140e <kprinti>

		kprints("          ");
     236:	8b e0       	ldi	r24, 0x0B	; 11
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
		kprints("          ");
     23e:	8b e0       	ldi	r24, 0x0B	; 11
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
     246:	88 e8       	ldi	r24, 0x88	; 136
     248:	93 e1       	ldi	r25, 0x13	; 19
     24a:	28 ec       	ldi	r18, 0xC8	; 200
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	f9 01       	movw	r30, r18
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <user_program+0x186>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     256:	d9 f7       	brne	.-10     	; 0x24e <user_program+0x184>

		_delay_ms(500);//wait 10 ms

		set_color(0,0,0);//turn RGB LED off
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>
     262:	9b c0       	rjmp	.+310    	; 0x39a <user_program+0x2d0>

	else

	{

	   if(++TestLED > 39)
     264:	80 91 e0 02 	lds	r24, 0x02E0
     268:	90 91 e1 02 	lds	r25, 0x02E1
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	90 93 e1 02 	sts	0x02E1, r25
     272:	80 93 e0 02 	sts	0x02E0, r24
     276:	88 32       	cpi	r24, 0x28	; 40
     278:	91 05       	cpc	r25, r1
     27a:	44 f0       	brlt	.+16     	; 0x28c <user_program+0x1c2>

	   {

	    TestLED = 3;
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	90 93 e1 02 	sts	0x02E1, r25
     284:	80 93 e0 02 	sts	0x02E0, r24

	    set_motor(0,0);
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	52 c0       	rjmp	.+164    	; 0x330 <user_program+0x266>

	    }

	   else if(TestLED <= 15)
     28c:	80 31       	cpi	r24, 0x10	; 16
     28e:	91 05       	cpc	r25, r1
     290:	04 f5       	brge	.+64     	; 0x2d2 <user_program+0x208>

	   {

	     set_color(TestLED>>2,0,0);
     292:	95 95       	asr	r25
     294:	87 95       	ror	r24
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>

	     if(TestLED == 4)
     2a2:	80 91 e0 02 	lds	r24, 0x02E0
     2a6:	90 91 e1 02 	lds	r25, 0x02E1
     2aa:	04 97       	sbiw	r24, 0x04	; 4
     2ac:	69 f4       	brne	.+26     	; 0x2c8 <user_program+0x1fe>

	     {

	       set_motor(0xA0,0xA0);
     2ae:	80 ea       	ldi	r24, 0xA0	; 160
     2b0:	60 ea       	ldi	r22, 0xA0	; 160
     2b2:	0e 94 dd 07 	call	0xfba	; 0xfba <set_motor>
     2b6:	88 ee       	ldi	r24, 0xE8	; 232
     2b8:	93 e0       	ldi	r25, 0x03	; 3
     2ba:	28 ec       	ldi	r18, 0xC8	; 200
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	f9 01       	movw	r30, r18
     2c0:	31 97       	sbiw	r30, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <user_program+0x1f6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2c6:	d9 f7       	brne	.-10     	; 0x2be <user_program+0x1f4>

	       _delay_ms(100);

	     }

	     set_motor(cw_in_straight,ccw_in_straight);
     2c8:	80 91 fc 02 	lds	r24, 0x02FC
     2cc:	60 91 04 03 	lds	r22, 0x0304
     2d0:	59 c0       	rjmp	.+178    	; 0x384 <user_program+0x2ba>
     2d2:	ac 01       	movw	r20, r24
     2d4:	55 95       	asr	r21
     2d6:	47 95       	ror	r20
     2d8:	55 95       	asr	r21
     2da:	47 95       	ror	r20



	   }

	   else if(TestLED <= 27)
     2dc:	4c 97       	sbiw	r24, 0x1c	; 28
     2de:	54 f5       	brge	.+84     	; 0x334 <user_program+0x26a>

	   {

	     set_color(0, (TestLED>>2)-3,0);
     2e0:	64 2f       	mov	r22, r20
     2e2:	63 50       	subi	r22, 0x03	; 3
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>

	     if(TestLED == 16)
     2ec:	80 91 e0 02 	lds	r24, 0x02E0
     2f0:	90 91 e1 02 	lds	r25, 0x02E1
     2f4:	40 97       	sbiw	r24, 0x10	; 16
     2f6:	d1 f4       	brne	.+52     	; 0x32c <user_program+0x262>

	     {

	       set_motor(0,0);
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	0e 94 dd 07 	call	0xfba	; 0xfba <set_motor>
     300:	84 ef       	ldi	r24, 0xF4	; 244
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	28 ec       	ldi	r18, 0xC8	; 200
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	31 97       	sbiw	r30, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <user_program+0x240>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     30e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     310:	d9 f7       	brne	.-10     	; 0x308 <user_program+0x23e>

	       _delay_ms(50);

	       set_motor(0xA0,0);
     312:	80 ea       	ldi	r24, 0xA0	; 160
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	0e 94 dd 07 	call	0xfba	; 0xfba <set_motor>
     31a:	88 ee       	ldi	r24, 0xE8	; 232
     31c:	93 e0       	ldi	r25, 0x03	; 3
     31e:	28 ec       	ldi	r18, 0xC8	; 200
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	f9 01       	movw	r30, r18
     324:	31 97       	sbiw	r30, 0x01	; 1
     326:	f1 f7       	brne	.-4      	; 0x324 <user_program+0x25a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     328:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     32a:	d9 f7       	brne	.-10     	; 0x322 <user_program+0x258>

	       _delay_ms(100);

	     }

	     set_motor(cw_in_place,0);
     32c:	80 91 8d 03 	lds	r24, 0x038D
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	28 c0       	rjmp	.+80     	; 0x384 <user_program+0x2ba>

	   else if(TestLED <= 39)

	   {

	     set_color(0,0,(TestLED>>2)-6);
     334:	46 50       	subi	r20, 0x06	; 6
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>

	     if(TestLED == 28)
     33e:	80 91 e0 02 	lds	r24, 0x02E0
     342:	90 91 e1 02 	lds	r25, 0x02E1
     346:	4c 97       	sbiw	r24, 0x1c	; 28
     348:	d1 f4       	brne	.+52     	; 0x37e <user_program+0x2b4>

	     {

	       set_motor(0,0);
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	0e 94 dd 07 	call	0xfba	; 0xfba <set_motor>
     352:	84 ef       	ldi	r24, 0xF4	; 244
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	28 ec       	ldi	r18, 0xC8	; 200
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	f9 01       	movw	r30, r18
     35c:	31 97       	sbiw	r30, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <user_program+0x292>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     360:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     362:	d9 f7       	brne	.-10     	; 0x35a <user_program+0x290>

	       _delay_ms(50);

	       set_motor(0,0xA0);
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	60 ea       	ldi	r22, 0xA0	; 160
     368:	0e 94 dd 07 	call	0xfba	; 0xfba <set_motor>
     36c:	88 ee       	ldi	r24, 0xE8	; 232
     36e:	93 e0       	ldi	r25, 0x03	; 3
     370:	28 ec       	ldi	r18, 0xC8	; 200
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	f9 01       	movw	r30, r18
     376:	31 97       	sbiw	r30, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <user_program+0x2ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     37a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     37c:	d9 f7       	brne	.-10     	; 0x374 <user_program+0x2aa>

	       _delay_ms(100);

	     }

	     set_motor(0,ccw_in_place);
     37e:	60 91 03 03 	lds	r22, 0x0303
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	0e 94 dd 07 	call	0xfba	; 0xfba <set_motor>
     388:	88 e8       	ldi	r24, 0x88	; 136
     38a:	93 e1       	ldi	r25, 0x13	; 19
     38c:	28 ec       	ldi	r18, 0xC8	; 200
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	f9 01       	movw	r30, r18
     392:	31 97       	sbiw	r30, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <user_program+0x2c8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     396:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     398:	d9 f7       	brne	.-10     	; 0x390 <user_program+0x2c6>

	}                       


	
}
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	08 95       	ret

000003a4 <message_out>:

//function for updating the next message to be transmitted (note: does not actually transmit message)
// the last char must be even, because its lsb is used internally
void message_out(char tx0,char tx1,char tx2)
{ 
	message_tx0=tx0;
     3a4:	80 93 c9 01 	sts	0x01C9, r24
	message_tx1=tx1;
     3a8:	60 93 ca 01 	sts	0x01CA, r22
	message_tx2=tx2;
     3ac:	40 93 cb 01 	sts	0x01CB, r20
	message_tx2 &= 0xfe ;
     3b0:	80 91 cb 01 	lds	r24, 0x01CB
     3b4:	8e 7f       	andi	r24, 0xFE	; 254
     3b6:	80 93 cb 01 	sts	0x01CB, r24
}		
     3ba:	08 95       	ret

000003bc <get_message>:

//function for checking the received message buffer
void get_message(void)											\
     3bc:	a0 91 86 03 	lds	r26, 0x0386
     3c0:	b0 91 87 03 	lds	r27, 0x0387
{																\
	int count_pointer=0;										\
	int count_pointer_a=txvalue_buffer_pointer;					\
	message_rx[5]=0;											\
     3c4:	10 92 83 03 	sts	0x0383, r1
     3c8:	10 92 82 03 	sts	0x0382, r1
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
	while(count_pointer<4)										\
	{															\
		if(count_pointer_a==0)									\
     3d0:	10 97       	sbiw	r26, 0x00	; 0
     3d2:	19 f4       	brne	.+6      	; 0x3da <get_message+0x1e>
     3d4:	a3 e0       	ldi	r26, 0x03	; 3
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <get_message+0x20>
			count_pointer_a=3;									\
		else													\
			count_pointer_a--;									\
     3da:	11 97       	sbiw	r26, 0x01	; 1
																\
		if(txvalue_buffer[5][count_pointer_a]==1)				\
     3dc:	fd 01       	movw	r30, r26
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	e8 59       	subi	r30, 0x98	; 152
     3e4:	fc 4f       	sbci	r31, 0xFC	; 252
     3e6:	80 81       	ld	r24, Z
     3e8:	91 81       	ldd	r25, Z+1	; 0x01
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	09 f0       	breq	.+2      	; 0x3f0 <get_message+0x34>
     3ee:	50 c0       	rjmp	.+160    	; 0x490 <get_message+0xd4>
		{														\
			cli();												\
     3f0:	f8 94       	cli
			message_rx[0]=txvalue_buffer[0][count_pointer_a];	\
     3f2:	fd 01       	movw	r30, r26
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	e0 5c       	subi	r30, 0xC0	; 192
     3fa:	fc 4f       	sbci	r31, 0xFC	; 252
     3fc:	80 81       	ld	r24, Z
     3fe:	91 81       	ldd	r25, Z+1	; 0x01
     400:	90 93 79 03 	sts	0x0379, r25
     404:	80 93 78 03 	sts	0x0378, r24
			message_rx[1]=txvalue_buffer[1][count_pointer_a];	\
     408:	fd 01       	movw	r30, r26
     40a:	ee 0f       	add	r30, r30
     40c:	ff 1f       	adc	r31, r31
     40e:	e8 5b       	subi	r30, 0xB8	; 184
     410:	fc 4f       	sbci	r31, 0xFC	; 252
     412:	80 81       	ld	r24, Z
     414:	91 81       	ldd	r25, Z+1	; 0x01
     416:	90 93 7b 03 	sts	0x037B, r25
     41a:	80 93 7a 03 	sts	0x037A, r24
			message_rx[2]=txvalue_buffer[2][count_pointer_a];	\
     41e:	fd 01       	movw	r30, r26
     420:	ee 0f       	add	r30, r30
     422:	ff 1f       	adc	r31, r31
     424:	e0 5b       	subi	r30, 0xB0	; 176
     426:	fc 4f       	sbci	r31, 0xFC	; 252
     428:	80 81       	ld	r24, Z
     42a:	91 81       	ldd	r25, Z+1	; 0x01
     42c:	90 93 7d 03 	sts	0x037D, r25
     430:	80 93 7c 03 	sts	0x037C, r24
			message_rx[3]=txvalue_buffer[3][count_pointer_a];	\
     434:	fd 01       	movw	r30, r26
     436:	ee 0f       	add	r30, r30
     438:	ff 1f       	adc	r31, r31
     43a:	e8 5a       	subi	r30, 0xA8	; 168
     43c:	fc 4f       	sbci	r31, 0xFC	; 252
     43e:	80 81       	ld	r24, Z
     440:	91 81       	ldd	r25, Z+1	; 0x01
     442:	90 93 7f 03 	sts	0x037F, r25
     446:	80 93 7e 03 	sts	0x037E, r24
			message_rx[4]=txvalue_buffer[4][count_pointer_a];	\
     44a:	fd 01       	movw	r30, r26
     44c:	ee 0f       	add	r30, r30
     44e:	ff 1f       	adc	r31, r31
     450:	e0 5a       	subi	r30, 0xA0	; 160
     452:	fc 4f       	sbci	r31, 0xFC	; 252
     454:	80 81       	ld	r24, Z
     456:	91 81       	ldd	r25, Z+1	; 0x01
     458:	90 93 81 03 	sts	0x0381, r25
     45c:	80 93 80 03 	sts	0x0380, r24
			message_rx[6]=txvalue_buffer[6][count_pointer_a];	\
     460:	aa 0f       	add	r26, r26
     462:	bb 1f       	adc	r27, r27
     464:	fd 01       	movw	r30, r26
     466:	e0 59       	subi	r30, 0x90	; 144
     468:	fc 4f       	sbci	r31, 0xFC	; 252
     46a:	80 81       	ld	r24, Z
     46c:	91 81       	ldd	r25, Z+1	; 0x01
     46e:	90 93 85 03 	sts	0x0385, r25
     472:	80 93 84 03 	sts	0x0384, r24
			sei();												\
     476:	78 94       	sei
			message_rx[5]=1;									\
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	90 93 83 03 	sts	0x0383, r25
     480:	80 93 82 03 	sts	0x0382, r24
			txvalue_buffer[5][count_pointer_a]=0;				\
     484:	a8 59       	subi	r26, 0x98	; 152
     486:	bc 4f       	sbci	r27, 0xFC	; 252
     488:	11 96       	adiw	r26, 0x01	; 1
     48a:	1c 92       	st	X, r1
     48c:	1e 92       	st	-X, r1
     48e:	08 95       	ret
																\
																\
																\
		}														\
																\
		count_pointer++;										\
     490:	2f 5f       	subi	r18, 0xFF	; 255
     492:	3f 4f       	sbci	r19, 0xFF	; 255
void get_message(void)											\
{																\
	int count_pointer=0;										\
	int count_pointer_a=txvalue_buffer_pointer;					\
	message_rx[5]=0;											\
	while(count_pointer<4)										\
     494:	24 30       	cpi	r18, 0x04	; 4
     496:	31 05       	cpc	r19, r1
     498:	09 f0       	breq	.+2      	; 0x49c <get_message+0xe0>
     49a:	9a cf       	rjmp	.-204    	; 0x3d0 <get_message+0x14>
     49c:	08 95       	ret

0000049e <send_message>:



//this function does the actual transmission of IR messages
int send_message(int a,int b,int c)
{
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	2c 97       	sbiw	r28, 0x0c	; 12
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	28 2f       	mov	r18, r24
	sei();	
     4c0:	78 94       	sei
	//any messages already being received
	if(message_incoming==1)
     4c2:	80 91 e4 02 	lds	r24, 0x02E4
     4c6:	90 91 e5 02 	lds	r25, 0x02E5
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	19 f4       	brne	.+6      	; 0x4d4 <send_message+0x36>
     4ce:	22 e0       	ldi	r18, 0x02	; 2
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	ec c0       	rjmp	.+472    	; 0x6ac <send_message+0x20e>

	}


	uint16_t data_out[4];
	uint8_t data_to_send[4]={a,b,c,255};
     4d4:	29 83       	std	Y+1, r18	; 0x01
     4d6:	6a 83       	std	Y+2, r22	; 0x02
     4d8:	4b 83       	std	Y+3, r20	; 0x03

	

	//prepare data checksum to send
	data_to_send[3]=data_to_send[2]+data_to_send[1]+data_to_send[0]+128;
     4da:	20 58       	subi	r18, 0x80	; 128
     4dc:	26 0f       	add	r18, r22
     4de:	24 0f       	add	r18, r20
     4e0:	2c 83       	std	Y+4, r18	; 0x04
     4e2:	6e 01       	movw	r12, r28
     4e4:	08 94       	sec
     4e6:	c1 1c       	adc	r12, r1
     4e8:	d1 1c       	adc	r13, r1
     4ea:	de 01       	movw	r26, r28
     4ec:	15 96       	adiw	r26, 0x05	; 5
     4ee:	8d 01       	movw	r16, r26

	//prepare data to send
	for(int i=0;i<4;i++)
     4f0:	7d 01       	movw	r14, r26
	{
		data_out[i]=(data_to_send[i] & (1<<0))*128 + 
     4f2:	f6 01       	movw	r30, r12
     4f4:	61 91       	ld	r22, Z+
     4f6:	6f 01       	movw	r12, r30
     4f8:	70 e0       	ldi	r23, 0x00	; 0
				(data_to_send[i] & (1<<5))/8 + 
				(data_to_send[i] & (1<<6))/32 + 
				(data_to_send[i] & (1<<7))/128;

		data_out[i]=data_out[i]<<1;
		data_out[i]++;
     4fa:	9b 01       	movw	r18, r22
     4fc:	20 72       	andi	r18, 0x20	; 32
     4fe:	30 70       	andi	r19, 0x00	; 0
     500:	f3 e0       	ldi	r31, 0x03	; 3
     502:	35 95       	asr	r19
     504:	27 95       	ror	r18
     506:	fa 95       	dec	r31
     508:	e1 f7       	brne	.-8      	; 0x502 <send_message+0x64>
     50a:	cb 01       	movw	r24, r22
     50c:	80 71       	andi	r24, 0x10	; 16
     50e:	90 70       	andi	r25, 0x00	; 0
     510:	95 95       	asr	r25
     512:	87 95       	ror	r24
     514:	28 0f       	add	r18, r24
     516:	39 1f       	adc	r19, r25
     518:	cb 01       	movw	r24, r22
     51a:	80 74       	andi	r24, 0x40	; 64
     51c:	90 70       	andi	r25, 0x00	; 0
     51e:	55 e0       	ldi	r21, 0x05	; 5
     520:	95 95       	asr	r25
     522:	87 95       	ror	r24
     524:	5a 95       	dec	r21
     526:	e1 f7       	brne	.-8      	; 0x520 <send_message+0x82>
     528:	28 0f       	add	r18, r24
     52a:	39 1f       	adc	r19, r25
     52c:	cb 01       	movw	r24, r22
     52e:	88 0f       	add	r24, r24
     530:	89 2f       	mov	r24, r25
     532:	88 1f       	adc	r24, r24
     534:	99 0b       	sbc	r25, r25
     536:	91 95       	neg	r25
     538:	28 0f       	add	r18, r24
     53a:	39 1f       	adc	r19, r25
     53c:	cb 01       	movw	r24, r22
     53e:	81 70       	andi	r24, 0x01	; 1
     540:	90 70       	andi	r25, 0x00	; 0
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	88 0f       	add	r24, r24
     548:	99 1f       	adc	r25, r25
     54a:	ab 01       	movw	r20, r22
     54c:	42 70       	andi	r20, 0x02	; 2
     54e:	50 70       	andi	r21, 0x00	; 0
     550:	84 0f       	add	r24, r20
     552:	95 1f       	adc	r25, r21
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	ab 01       	movw	r20, r22
     55e:	44 70       	andi	r20, 0x04	; 4
     560:	50 70       	andi	r21, 0x00	; 0
     562:	84 0f       	add	r24, r20
     564:	95 1f       	adc	r25, r21
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	68 70       	andi	r22, 0x08	; 8
     570:	70 70       	andi	r23, 0x00	; 0
     572:	86 0f       	add	r24, r22
     574:	97 1f       	adc	r25, r23
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	28 0f       	add	r18, r24
     57c:	39 1f       	adc	r19, r25
     57e:	22 0f       	add	r18, r18
     580:	33 1f       	adc	r19, r19
     582:	2f 5f       	subi	r18, 0xFF	; 255
     584:	3f 4f       	sbci	r19, 0xFF	; 255
     586:	f8 01       	movw	r30, r16
     588:	21 93       	st	Z+, r18
     58a:	31 93       	st	Z+, r19
     58c:	8f 01       	movw	r16, r30

	//prepare data checksum to send
	data_to_send[3]=data_to_send[2]+data_to_send[1]+data_to_send[0]+128;

	//prepare data to send
	for(int i=0;i<4;i++)
     58e:	ce 14       	cp	r12, r14
     590:	df 04       	cpc	r13, r15
     592:	09 f0       	breq	.+2      	; 0x596 <send_message+0xf8>
     594:	ae cf       	rjmp	.-164    	; 0x4f2 <send_message+0x54>
		data_out[i]=data_out[i]<<1;
		data_out[i]++;
	}

	uint8_t collision_detected=0;
	cli();//start critical
     596:	f8 94       	cli

	if(message_incoming==0)//no incoming message detected
     598:	80 91 e4 02 	lds	r24, 0x02E4
     59c:	90 91 e5 02 	lds	r25, 0x02E5
     5a0:	30 91 f9 02 	lds	r19, 0x02F9
     5a4:	89 2b       	or	r24, r25
     5a6:	09 f0       	breq	.+2      	; 0x5aa <send_message+0x10c>
     5a8:	62 c0       	rjmp	.+196    	; 0x66e <send_message+0x1d0>
	{
		//send start pulse
		DDRB |= tx_mask;
     5aa:	84 b1       	in	r24, 0x04	; 4
     5ac:	83 2b       	or	r24, r19
     5ae:	84 b9       	out	0x04, r24	; 4
		PORTB |= tx_mask;
     5b0:	85 b1       	in	r24, 0x05	; 5
     5b2:	83 2b       	or	r24, r19
     5b4:	85 b9       	out	0x05, r24	; 5
		asm volatile("nop\n\t");
     5b6:	00 00       	nop
		asm volatile("nop\n\t");
     5b8:	00 00       	nop
		PORTB&= ~tx_mask;
     5ba:	85 b1       	in	r24, 0x05	; 5
     5bc:	23 2f       	mov	r18, r19
     5be:	20 95       	com	r18
     5c0:	82 23       	and	r24, r18
     5c2:	85 b9       	out	0x05, r24	; 5
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0

		//wait for own signal to die down
		for(int k=0;k<53;k++)
			asm volatile("nop\n\t");
     5c8:	00 00       	nop
		asm volatile("nop\n\t");
		asm volatile("nop\n\t");
		PORTB&= ~tx_mask;

		//wait for own signal to die down
		for(int k=0;k<53;k++)
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	85 33       	cpi	r24, 0x35	; 53
     5ce:	91 05       	cpc	r25, r1
     5d0:	d9 f7       	brne	.-10     	; 0x5c8 <send_message+0x12a>
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0


		//check for collision
		for(int k=0;k<193;k++)
		{
			if((ACSR & (1<<ACO))>0)
     5d6:	00 b6       	in	r0, 0x30	; 48
     5d8:	05 fe       	sbrs	r0, 5
     5da:	0a c0       	rjmp	.+20     	; 0x5f0 <send_message+0x152>
			{
	
				collision_detected=1;
				//ensure led is off
				PORTB &= ~tx_mask;
     5dc:	85 b1       	in	r24, 0x05	; 5
     5de:	82 23       	and	r24, r18
     5e0:	85 b9       	out	0x05, r24	; 5
				DDRB &= ~tx_mask;
     5e2:	84 b1       	in	r24, 0x04	; 4
     5e4:	28 23       	and	r18, r24
     5e6:	24 b9       	out	0x04, r18	; 4
				sei();//end critical
     5e8:	78 94       	sei
     5ea:	23 e0       	ldi	r18, 0x03	; 3
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	5e c0       	rjmp	.+188    	; 0x6ac <send_message+0x20e>
				return(3);

			}
			if((ACSR & (1<<ACO))>0)
     5f0:	00 b6       	in	r0, 0x30	; 48
     5f2:	05 fe       	sbrs	r0, 5
     5f4:	0a c0       	rjmp	.+20     	; 0x60a <send_message+0x16c>
			{
	
				collision_detected=1;
				//ensure led is off
				PORTB &= ~tx_mask;
     5f6:	85 b1       	in	r24, 0x05	; 5
     5f8:	82 23       	and	r24, r18
     5fa:	85 b9       	out	0x05, r24	; 5
				DDRB &= ~tx_mask;
     5fc:	84 b1       	in	r24, 0x04	; 4
     5fe:	28 23       	and	r18, r24
     600:	24 b9       	out	0x04, r18	; 4
				sei();//end critical
     602:	78 94       	sei
     604:	24 e0       	ldi	r18, 0x04	; 4
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	51 c0       	rjmp	.+162    	; 0x6ac <send_message+0x20e>
		for(int k=0;k<53;k++)
			asm volatile("nop\n\t");


		//check for collision
		for(int k=0;k<193;k++)
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	81 3c       	cpi	r24, 0xC1	; 193
     60e:	91 05       	cpc	r25, r1
     610:	11 f7       	brne	.-60     	; 0x5d6 <send_message+0x138>
     612:	25 c0       	rjmp	.+74     	; 0x65e <send_message+0x1c0>
			{
				int i=8;
				while(i>=0)
				{

					if(data_out[byte_sending] & 1)
     614:	40 ff       	sbrs	r20, 0
     616:	06 c0       	rjmp	.+12     	; 0x624 <send_message+0x186>
					{
					
						PORTB |= tx_mask;
     618:	85 b1       	in	r24, 0x05	; 5
     61a:	83 2b       	or	r24, r19
     61c:	85 b9       	out	0x05, r24	; 5
						asm volatile("nop\n\t");
     61e:	00 00       	nop
						asm volatile("nop\n\t");
     620:	00 00       	nop
     622:	05 c0       	rjmp	.+10     	; 0x62e <send_message+0x190>
		
					}
					else
					{
						PORTB &= ~tx_mask;
     624:	85 b1       	in	r24, 0x05	; 5
     626:	82 23       	and	r24, r18
     628:	85 b9       	out	0x05, r24	; 5
						asm volatile("nop\n\t");
     62a:	00 00       	nop
						asm volatile("nop\n\t");
     62c:	00 00       	nop
	
					}

						PORTB &= ~tx_mask;
     62e:	85 b1       	in	r24, 0x05	; 5
     630:	82 23       	and	r24, r18
     632:	85 b9       	out	0x05, r24	; 5
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
						for(int k=0;k<35;k++)
						{
							asm volatile("nop\n\t");
     638:	00 00       	nop
						asm volatile("nop\n\t");
	
					}

						PORTB &= ~tx_mask;
						for(int k=0;k<35;k++)
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	83 32       	cpi	r24, 0x23	; 35
     63e:	91 05       	cpc	r25, r1
     640:	d9 f7       	brne	.-10     	; 0x638 <send_message+0x19a>
						{
							asm volatile("nop\n\t");
						}

						data_out[byte_sending]=data_out[byte_sending]>>1;
     642:	56 95       	lsr	r21
     644:	47 95       	ror	r20
						i--;
     646:	61 50       	subi	r22, 0x01	; 1
     648:	70 40       	sbci	r23, 0x00	; 0

		if(collision_detected==0)
			for(int byte_sending=0;byte_sending<4;byte_sending++)
			{
				int i=8;
				while(i>=0)
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	6f 3f       	cpi	r22, 0xFF	; 255
     64e:	78 07       	cpc	r23, r24
     650:	09 f7       	brne	.-62     	; 0x614 <send_message+0x176>
     652:	4d 93       	st	X+, r20
     654:	5d 93       	st	X+, r21
				
	
		}	

		if(collision_detected==0)
			for(int byte_sending=0;byte_sending<4;byte_sending++)
     656:	ae 17       	cp	r26, r30
     658:	bf 07       	cpc	r27, r31
     65a:	19 f4       	brne	.+6      	; 0x662 <send_message+0x1c4>
     65c:	14 c0       	rjmp	.+40     	; 0x686 <send_message+0x1e8>
     65e:	fe 01       	movw	r30, r28
     660:	3d 96       	adiw	r30, 0x0d	; 13
     662:	4d 91       	ld	r20, X+
     664:	5c 91       	ld	r21, X
     666:	11 97       	sbiw	r26, 0x01	; 1
     668:	68 e0       	ldi	r22, 0x08	; 8
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	d3 cf       	rjmp	.-90     	; 0x614 <send_message+0x176>
			}
	}
	else//channel was in use before starting
	{
		//ensure led is off
		PORTB &= ~tx_mask;
     66e:	85 b1       	in	r24, 0x05	; 5
     670:	93 2f       	mov	r25, r19
     672:	90 95       	com	r25
     674:	89 23       	and	r24, r25
     676:	85 b9       	out	0x05, r24	; 5
		DDRB &= ~tx_mask;
     678:	84 b1       	in	r24, 0x04	; 4
     67a:	98 23       	and	r25, r24
     67c:	94 b9       	out	0x04, r25	; 4
	
		sei();//end critical
     67e:	78 94       	sei
     680:	25 e0       	ldi	r18, 0x05	; 5
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	13 c0       	rjmp	.+38     	; 0x6ac <send_message+0x20e>
		return(5);
	}
	//ensure led is off
	PORTB &= ~tx_mask;
     686:	85 b1       	in	r24, 0x05	; 5
     688:	82 23       	and	r24, r18
     68a:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~tx_mask;
     68c:	84 b1       	in	r24, 0x04	; 4
     68e:	28 23       	and	r18, r24
     690:	24 b9       	out	0x04, r18	; 4
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
	if(collision_detected==0)
	{
		//wait for own signal to die down
		for(int k=0;k<50;k++)
			asm volatile("nop\n\t");
     696:	00 00       	nop
	PORTB &= ~tx_mask;
	DDRB &= ~tx_mask;
	if(collision_detected==0)
	{
		//wait for own signal to die down
		for(int k=0;k<50;k++)
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	82 33       	cpi	r24, 0x32	; 50
     69c:	91 05       	cpc	r25, r1
     69e:	d9 f7       	brne	.-10     	; 0x696 <send_message+0x1f8>
			asm volatile("nop\n\t");

			ACSR |= (1<<ACI);
     6a0:	80 b7       	in	r24, 0x30	; 48
     6a2:	80 61       	ori	r24, 0x10	; 16
     6a4:	80 bf       	out	0x30, r24	; 48

		sei();//end critical
     6a6:	78 94       	sei
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	30 e0       	ldi	r19, 0x00	; 0
	{
	
		sei();//end critical
		return(0);
	}	
}
     6ac:	c9 01       	movw	r24, r18
     6ae:	2c 96       	adiw	r28, 0x0c	; 12
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	cf 91       	pop	r28
     6bc:	df 91       	pop	r29
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	08 95       	ret

000006cc <__vector_11>:



//isr for timer 1, this is used for receiving data over infra red
ISR(TIMER1_COMPA_vect)//triggers at the end of each byte (actually 1 flow bit, 8 data bits) received
{
     6cc:	1f 92       	push	r1
     6ce:	0f 92       	push	r0
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	0f 92       	push	r0
     6d4:	11 24       	eor	r1, r1
     6d6:	3f 92       	push	r3
     6d8:	4f 92       	push	r4
     6da:	5f 92       	push	r5
     6dc:	6f 92       	push	r6
     6de:	7f 92       	push	r7
     6e0:	8f 92       	push	r8
     6e2:	9f 92       	push	r9
     6e4:	af 92       	push	r10
     6e6:	bf 92       	push	r11
     6e8:	cf 92       	push	r12
     6ea:	df 92       	push	r13
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	2f 93       	push	r18
     6f6:	3f 93       	push	r19
     6f8:	4f 93       	push	r20
     6fa:	5f 93       	push	r21
     6fc:	6f 93       	push	r22
     6fe:	7f 93       	push	r23
     700:	8f 93       	push	r24
     702:	9f 93       	push	r25
     704:	af 93       	push	r26
     706:	bf 93       	push	r27
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	ef 93       	push	r30
     70e:	ff 93       	push	r31
	leading_bit=1;	
     710:	21 e0       	ldi	r18, 0x01	; 1
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	30 93 c8 01 	sts	0x01C8, r19
     718:	20 93 c7 01 	sts	0x01C7, r18
		
	if(incoming_byte==0)
     71c:	80 91 e2 02 	lds	r24, 0x02E2
     720:	90 91 e3 02 	lds	r25, 0x02E3
     724:	89 2b       	or	r24, r25
     726:	09 f0       	breq	.+2      	; 0x72a <__vector_11+0x5e>
     728:	47 c0       	rjmp	.+142    	; 0x7b8 <__vector_11+0xec>
	{
		
		//store adc value
		adc_low_gain=ADCW;
     72a:	80 91 78 00 	lds	r24, 0x0078
     72e:	90 91 79 00 	lds	r25, 0x0079
     732:	90 93 3f 03 	sts	0x033F, r25
     736:	80 93 3e 03 	sts	0x033E, r24
		
		//set adc to trigger converstion on next compairitor interrupt
		ADMUX=0;
     73a:	10 92 7c 00 	sts	0x007C, r1
		ADCSRA = (1<<ADEN)  | (1<<ADATE) | (1<<ADIF) |  (1<<ADPS1)|  (1<<ADPS0);//| (1<<ADIE);// | (1<<ADPS0); //enable a/d, have it trigger converstion start on a compairitor interrrupt.Note: turn off for power saving
     73e:	43 eb       	ldi	r20, 0xB3	; 179
     740:	40 93 7a 00 	sts	0x007A, r20
		ADCSRB = (1<<ADTS0);//set compairitor to be trigger source
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	90 93 7b 00 	sts	0x007B, r25


		incoming_message[0]=incoming_byte_value;
     74a:	80 91 05 03 	lds	r24, 0x0305
     74e:	80 93 88 03 	sts	0x0388, r24
		incoming_byte=1;
     752:	30 93 e3 02 	sts	0x02E3, r19
     756:	20 93 e2 02 	sts	0x02E2, r18
		if(incoming_byte_value!=0)
     75a:	80 91 05 03 	lds	r24, 0x0305
     75e:	88 23       	and	r24, r24
     760:	09 f4       	brne	.+2      	; 0x764 <__vector_11+0x98>
     762:	42 c0       	rjmp	.+132    	; 0x7e8 <__vector_11+0x11c>
		{	
			
			incoming_message[0]=0;
     764:	10 92 88 03 	sts	0x0388, r1
			incoming_message[1]=0;
     768:	10 92 89 03 	sts	0x0389, r1
			incoming_message[2]=0;
     76c:	10 92 8a 03 	sts	0x038A, r1
			incoming_message[3]=0;
     770:	10 92 8b 03 	sts	0x038B, r1
			incoming_message[4]=0;
     774:	10 92 8c 03 	sts	0x038C, r1
			ADMUX=1;
     778:	90 93 7c 00 	sts	0x007C, r25
			ADCSRA = (1<<ADEN)  | (1<<ADATE) |  (1<<ADIF) |  (1<<ADPS1)|  (1<<ADPS0) ;// |(1<<ADIE);//| (1<<ADPS0); //enable a/d, have it trigger converstion start on a compairitor interrrupt.Note: turn off for power saving
     77c:	40 93 7a 00 	sts	0x007A, r20
			ADCSRB = (1<<ADTS0);//set compairitor to be trigger source
     780:	90 93 7b 00 	sts	0x007B, r25


			TCCR1B=0;//turn counter1 off
     784:	10 92 81 00 	sts	0x0081, r1
			TCNT1H=0;//reset counter value to 0
     788:	10 92 85 00 	sts	0x0085, r1
			TCNT1L=0;//reset counter value to 0
     78c:	10 92 84 00 	sts	0x0084, r1
			incoming_byte=0;
     790:	10 92 e3 02 	sts	0x02E3, r1
     794:	10 92 e2 02 	sts	0x02E2, r1
			message_incoming=0;//no longer receiving a message
     798:	10 92 e5 02 	sts	0x02E5, r1
     79c:	10 92 e4 02 	sts	0x02E4, r1
			time_since_last+=3;//take into account time that timer0 was paused
     7a0:	80 91 ec 02 	lds	r24, 0x02EC
     7a4:	90 91 ed 02 	lds	r25, 0x02ED
     7a8:	03 96       	adiw	r24, 0x03	; 3
     7aa:	90 93 ed 02 	sts	0x02ED, r25
     7ae:	80 93 ec 02 	sts	0x02EC, r24
			TCCR0B=0x05;//turn timer0 back on
     7b2:	85 e0       	ldi	r24, 0x05	; 5
     7b4:	85 bd       	out	0x25, r24	; 37
     7b6:	18 c0       	rjmp	.+48     	; 0x7e8 <__vector_11+0x11c>

		
		}
		randseed+=ADCW;
	}
	else if(incoming_byte==1)
     7b8:	80 91 e2 02 	lds	r24, 0x02E2
     7bc:	90 91 e3 02 	lds	r25, 0x02E3
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	09 f5       	brne	.+66     	; 0x806 <__vector_11+0x13a>
	{
		adc_high_gain=ADCW;
     7c4:	80 91 78 00 	lds	r24, 0x0078
     7c8:	90 91 79 00 	lds	r25, 0x0079
     7cc:	90 93 8f 03 	sts	0x038F, r25
     7d0:	80 93 8e 03 	sts	0x038E, r24
		incoming_message[1]=incoming_byte_value;
     7d4:	80 91 05 03 	lds	r24, 0x0305
     7d8:	80 93 89 03 	sts	0x0389, r24
		
		incoming_byte=2;
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	90 93 e3 02 	sts	0x02E3, r25
     7e4:	80 93 e2 02 	sts	0x02E2, r24
		randseed+=ADCW;
     7e8:	80 91 f7 02 	lds	r24, 0x02F7
     7ec:	90 91 f8 02 	lds	r25, 0x02F8
     7f0:	20 91 78 00 	lds	r18, 0x0078
     7f4:	30 91 79 00 	lds	r19, 0x0079
     7f8:	82 0f       	add	r24, r18
     7fa:	93 1f       	adc	r25, r19
     7fc:	90 93 f8 02 	sts	0x02F8, r25
     800:	80 93 f7 02 	sts	0x02F7, r24
     804:	14 c3       	rjmp	.+1576   	; 0xe2e <__stack+0x52f>
	}
	else if(incoming_byte==2)
     806:	80 91 e2 02 	lds	r24, 0x02E2
     80a:	90 91 e3 02 	lds	r25, 0x02E3
     80e:	02 97       	sbiw	r24, 0x02	; 2
     810:	39 f4       	brne	.+14     	; 0x820 <__vector_11+0x154>
	{
		incoming_message[2]=incoming_byte_value;
     812:	80 91 05 03 	lds	r24, 0x0305
     816:	80 93 8a 03 	sts	0x038A, r24
		incoming_byte=3;
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0c c0       	rjmp	.+24     	; 0x838 <__vector_11+0x16c>
	}	
	else if(incoming_byte==3)
     820:	80 91 e2 02 	lds	r24, 0x02E2
     824:	90 91 e3 02 	lds	r25, 0x02E3
     828:	03 97       	sbiw	r24, 0x03	; 3
     82a:	59 f4       	brne	.+22     	; 0x842 <__vector_11+0x176>
	{
		incoming_message[3]=incoming_byte_value;
     82c:	80 91 05 03 	lds	r24, 0x0305
     830:	80 93 8b 03 	sts	0x038B, r24
		incoming_byte=4;
     834:	84 e0       	ldi	r24, 0x04	; 4
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	90 93 e3 02 	sts	0x02E3, r25
     83c:	80 93 e2 02 	sts	0x02E2, r24
     840:	f6 c2       	rjmp	.+1516   	; 0xe2e <__stack+0x52f>
	}	
	else if(incoming_byte==4)
     842:	80 91 e2 02 	lds	r24, 0x02E2
     846:	90 91 e3 02 	lds	r25, 0x02E3
     84a:	04 97       	sbiw	r24, 0x04	; 4
     84c:	09 f0       	breq	.+2      	; 0x850 <__vector_11+0x184>
     84e:	ef c2       	rjmp	.+1502   	; 0xe2e <__stack+0x52f>
	{	
		incoming_message[4]=incoming_byte_value;
     850:	80 91 05 03 	lds	r24, 0x0305
     854:	80 93 8c 03 	sts	0x038C, r24
		incoming_byte=0;
     858:	10 92 e3 02 	sts	0x02E3, r1
     85c:	10 92 e2 02 	sts	0x02E2, r1

	

		//store data in buffer
		uint8_t check=incoming_message[1]+incoming_message[2]+incoming_message[3]+128;
     860:	80 91 89 03 	lds	r24, 0x0389
     864:	90 91 8a 03 	lds	r25, 0x038A
     868:	20 91 8b 03 	lds	r18, 0x038B
		int checksum_good=0;
		//set_color(0,1,0);
		
		if((check==(incoming_message[4]))&&(incoming_message[0]==0))
     86c:	30 91 8c 03 	lds	r19, 0x038C
     870:	89 0f       	add	r24, r25
     872:	80 58       	subi	r24, 0x80	; 128
     874:	82 0f       	add	r24, r18
     876:	83 17       	cp	r24, r19
     878:	09 f0       	breq	.+2      	; 0x87c <__vector_11+0x1b0>
     87a:	b2 c2       	rjmp	.+1380   	; 0xde0 <__stack+0x4e1>
     87c:	80 91 88 03 	lds	r24, 0x0388
     880:	88 23       	and	r24, r24
     882:	09 f0       	breq	.+2      	; 0x886 <__vector_11+0x1ba>
     884:	ad c2       	rjmp	.+1370   	; 0xde0 <__stack+0x4e1>
			int index_high=-1;
			uint8_t distance_mm_high=255;
			uint8_t distance;

			//compute distance for high gain and low gain when required (use low gain when high gain >900, both if between 900 and 700, high if less than 700)
			if(adc_high_gain<900)//use high gain
     886:	80 91 8e 03 	lds	r24, 0x038E
     88a:	90 91 8f 03 	lds	r25, 0x038F
     88e:	84 58       	subi	r24, 0x84	; 132
     890:	93 40       	sbci	r25, 0x03	; 3
     892:	1c f0       	brlt	.+6      	; 0x89a <__vector_11+0x1ce>
     894:	33 24       	eor	r3, r3
     896:	3a 94       	dec	r3
     898:	99 c0       	rjmp	.+306    	; 0x9cc <__stack+0xcd>
			{
				if(adc_high_gain>sensor_cal_data_high[0])
     89a:	20 91 8e 03 	lds	r18, 0x038E
     89e:	30 91 8f 03 	lds	r19, 0x038F
     8a2:	80 91 06 03 	lds	r24, 0x0306
     8a6:	90 91 07 03 	lds	r25, 0x0307
     8aa:	82 17       	cp	r24, r18
     8ac:	93 07       	cpc	r25, r19
     8ae:	14 f4       	brge	.+4      	; 0x8b4 <__vector_11+0x1e8>
     8b0:	33 24       	eor	r3, r3
     8b2:	8c c0       	rjmp	.+280    	; 0x9cc <__stack+0xcd>
     8b4:	21 e0       	ldi	r18, 0x01	; 1
     8b6:	42 2e       	mov	r4, r18
     8b8:	51 2c       	mov	r5, r1
				{


					for(int a=1;a<14;a++)
					{
						if(adc_high_gain>sensor_cal_data_high[a])
     8ba:	20 91 8e 03 	lds	r18, 0x038E
     8be:	30 91 8f 03 	lds	r19, 0x038F
     8c2:	e2 01       	movw	r28, r4
     8c4:	cc 0f       	add	r28, r28
     8c6:	dd 1f       	adc	r29, r29
     8c8:	ca 5f       	subi	r28, 0xFA	; 250
     8ca:	dc 4f       	sbci	r29, 0xFC	; 252
     8cc:	88 81       	ld	r24, Y
     8ce:	99 81       	ldd	r25, Y+1	; 0x01
     8d0:	82 17       	cp	r24, r18
     8d2:	93 07       	cpc	r25, r19
     8d4:	54 f0       	brlt	.+20     	; 0x8ea <__vector_11+0x21e>
				}
				else
				{


					for(int a=1;a<14;a++)
     8d6:	08 94       	sec
     8d8:	41 1c       	adc	r4, r1
     8da:	51 1c       	adc	r5, r1
     8dc:	8e e0       	ldi	r24, 0x0E	; 14
     8de:	48 16       	cp	r4, r24
     8e0:	51 04       	cpc	r5, r1
     8e2:	59 f7       	brne	.-42     	; 0x8ba <__vector_11+0x1ee>
     8e4:	8a e5       	ldi	r24, 0x5A	; 90
     8e6:	38 2e       	mov	r3, r24
     8e8:	71 c0       	rjmp	.+226    	; 0x9cc <__stack+0xcd>
			
					}
					else
					{
								
						double slope=(sensor_cal_data_high[index_high]-sensor_cal_data_high[index_high-1])/0.5;
     8ea:	68 81       	ld	r22, Y
     8ec:	79 81       	ldd	r23, Y+1	; 0x01
     8ee:	f2 01       	movw	r30, r4
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	ec 5f       	subi	r30, 0xFC	; 252
     8f6:	fc 4f       	sbci	r31, 0xFC	; 252
     8f8:	20 81       	ld	r18, Z
     8fa:	31 81       	ldd	r19, Z+1	; 0x01
     8fc:	62 1b       	sub	r22, r18
     8fe:	73 0b       	sbc	r23, r19
     900:	88 27       	eor	r24, r24
     902:	77 fd       	sbrc	r23, 7
     904:	80 95       	com	r24
     906:	98 2f       	mov	r25, r24
     908:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__floatsisf>
     90c:	9b 01       	movw	r18, r22
     90e:	ac 01       	movw	r20, r24
     910:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__addsf3>
     914:	3b 01       	movw	r6, r22
     916:	4c 01       	movw	r8, r24

						double b=(double)sensor_cal_data_high[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     918:	e8 80       	ld	r14, Y
     91a:	f9 80       	ldd	r15, Y+1	; 0x01

						b=(((((double)adc_high_gain-(double)b)*(double)10)));
     91c:	60 91 8e 03 	lds	r22, 0x038E
     920:	70 91 8f 03 	lds	r23, 0x038F
     924:	88 27       	eor	r24, r24
     926:	77 fd       	sbrc	r23, 7
     928:	80 95       	com	r24
     92a:	98 2f       	mov	r25, r24
     92c:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__floatsisf>
     930:	5b 01       	movw	r10, r22
     932:	6c 01       	movw	r12, r24
     934:	00 27       	eor	r16, r16
     936:	f7 fc       	sbrc	r15, 7
     938:	00 95       	com	r16
     93a:	10 2f       	mov	r17, r16
     93c:	c8 01       	movw	r24, r16
     93e:	b7 01       	movw	r22, r14
     940:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__floatsisf>
     944:	7b 01       	movw	r14, r22
     946:	8c 01       	movw	r16, r24
     948:	b2 01       	movw	r22, r4
     94a:	88 27       	eor	r24, r24
     94c:	77 fd       	sbrc	r23, 7
     94e:	80 95       	com	r24
     950:	98 2f       	mov	r25, r24
     952:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__floatsisf>
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	5f e3       	ldi	r21, 0x3F	; 63
     95e:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__addsf3>
     96e:	9b 01       	movw	r18, r22
     970:	ac 01       	movw	r20, r24
     972:	c4 01       	movw	r24, r8
     974:	b3 01       	movw	r22, r6
     976:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     97a:	9b 01       	movw	r18, r22
     97c:	ac 01       	movw	r20, r24
     97e:	c8 01       	movw	r24, r16
     980:	b7 01       	movw	r22, r14
     982:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__subsf3>
     986:	9b 01       	movw	r18, r22
     988:	ac 01       	movw	r20, r24
     98a:	c6 01       	movw	r24, r12
     98c:	b5 01       	movw	r22, r10
     98e:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__subsf3>
						b=((int)((int)b/(int)slope));
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	40 e2       	ldi	r20, 0x20	; 32
     998:	51 e4       	ldi	r21, 0x41	; 65
     99a:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     99e:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixsfsi>
     9a2:	7b 01       	movw	r14, r22
     9a4:	8c 01       	movw	r16, r24
     9a6:	c4 01       	movw	r24, r8
     9a8:	b3 01       	movw	r22, r6
     9aa:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixsfsi>
     9ae:	9b 01       	movw	r18, r22
     9b0:	ac 01       	movw	r20, r24
     9b2:	c7 01       	movw	r24, r14
     9b4:	b9 01       	movw	r22, r18
     9b6:	0e 94 81 13 	call	0x2702	; 0x2702 <__divmodhi4>
						distance_mm_high=b;
     9ba:	88 27       	eor	r24, r24
     9bc:	77 fd       	sbrc	r23, 7
     9be:	80 95       	com	r24
     9c0:	98 2f       	mov	r25, r24
     9c2:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__floatsisf>
     9c6:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fixunssfsi>
     9ca:	36 2e       	mov	r3, r22
					}

				}
			
			}
			if(adc_high_gain>700)//use low gain
     9cc:	80 91 8e 03 	lds	r24, 0x038E
     9d0:	90 91 8f 03 	lds	r25, 0x038F
     9d4:	8d 5b       	subi	r24, 0xBD	; 189
     9d6:	92 40       	sbci	r25, 0x02	; 2
     9d8:	0c f4       	brge	.+2      	; 0x9dc <__stack+0xdd>
     9da:	f3 c0       	rjmp	.+486    	; 0xbc2 <__stack+0x2c3>
			{
				if(adc_low_gain>sensor_cal_data_low[0])
     9dc:	20 91 3e 03 	lds	r18, 0x033E
     9e0:	30 91 3f 03 	lds	r19, 0x033F
     9e4:	80 91 22 03 	lds	r24, 0x0322
     9e8:	90 91 23 03 	lds	r25, 0x0323
     9ec:	82 17       	cp	r24, r18
     9ee:	93 07       	cpc	r25, r19
     9f0:	14 f4       	brge	.+4      	; 0x9f6 <__stack+0xf7>
     9f2:	55 24       	eor	r5, r5
     9f4:	8e c0       	rjmp	.+284    	; 0xb12 <__stack+0x213>
     9f6:	11 e0       	ldi	r17, 0x01	; 1
     9f8:	41 2e       	mov	r4, r17
     9fa:	51 2c       	mov	r5, r1
				}
				else
				{
					for(int a=1;a<14;a++)
					{
						if(adc_low_gain>sensor_cal_data_low[a])
     9fc:	20 91 3e 03 	lds	r18, 0x033E
     a00:	30 91 3f 03 	lds	r19, 0x033F
     a04:	e2 01       	movw	r28, r4
     a06:	cc 0f       	add	r28, r28
     a08:	dd 1f       	adc	r29, r29
     a0a:	ce 5d       	subi	r28, 0xDE	; 222
     a0c:	dc 4f       	sbci	r29, 0xFC	; 252
     a0e:	88 81       	ld	r24, Y
     a10:	99 81       	ldd	r25, Y+1	; 0x01
     a12:	82 17       	cp	r24, r18
     a14:	93 07       	cpc	r25, r19
     a16:	44 f0       	brlt	.+16     	; 0xa28 <__stack+0x129>
					distance_mm_low=0;
				
				}
				else
				{
					for(int a=1;a<14;a++)
     a18:	08 94       	sec
     a1a:	41 1c       	adc	r4, r1
     a1c:	51 1c       	adc	r5, r1
     a1e:	8e e0       	ldi	r24, 0x0E	; 14
     a20:	48 16       	cp	r4, r24
     a22:	51 04       	cpc	r5, r1
     a24:	59 f7       	brne	.-42     	; 0x9fc <__stack+0xfd>
     a26:	27 c2       	rjmp	.+1102   	; 0xe76 <__stack+0x577>
						distance_mm_low=90;
			
					}
					else
					{
						double slope=(sensor_cal_data_low[index_low]-sensor_cal_data_low[index_low-1])/0.5;
     a28:	68 81       	ld	r22, Y
     a2a:	79 81       	ldd	r23, Y+1	; 0x01
     a2c:	f2 01       	movw	r30, r4
     a2e:	ee 0f       	add	r30, r30
     a30:	ff 1f       	adc	r31, r31
     a32:	e0 5e       	subi	r30, 0xE0	; 224
     a34:	fc 4f       	sbci	r31, 0xFC	; 252
     a36:	20 81       	ld	r18, Z
     a38:	31 81       	ldd	r19, Z+1	; 0x01
     a3a:	62 1b       	sub	r22, r18
     a3c:	73 0b       	sbc	r23, r19
     a3e:	88 27       	eor	r24, r24
     a40:	77 fd       	sbrc	r23, 7
     a42:	80 95       	com	r24
     a44:	98 2f       	mov	r25, r24
     a46:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__floatsisf>
     a4a:	9b 01       	movw	r18, r22
     a4c:	ac 01       	movw	r20, r24
     a4e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__addsf3>
     a52:	3b 01       	movw	r6, r22
     a54:	4c 01       	movw	r8, r24

						double b=(double)sensor_cal_data_low[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     a56:	e8 80       	ld	r14, Y
     a58:	f9 80       	ldd	r15, Y+1	; 0x01

						b=(((((double)adc_low_gain-(double)b)*(double)10)));
     a5a:	60 91 3e 03 	lds	r22, 0x033E
     a5e:	70 91 3f 03 	lds	r23, 0x033F
     a62:	88 27       	eor	r24, r24
     a64:	77 fd       	sbrc	r23, 7
     a66:	80 95       	com	r24
     a68:	98 2f       	mov	r25, r24
     a6a:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__floatsisf>
     a6e:	5b 01       	movw	r10, r22
     a70:	6c 01       	movw	r12, r24
     a72:	00 27       	eor	r16, r16
     a74:	f7 fc       	sbrc	r15, 7
     a76:	00 95       	com	r16
     a78:	10 2f       	mov	r17, r16
     a7a:	c8 01       	movw	r24, r16
     a7c:	b7 01       	movw	r22, r14
     a7e:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__floatsisf>
     a82:	7b 01       	movw	r14, r22
     a84:	8c 01       	movw	r16, r24
     a86:	b2 01       	movw	r22, r4
     a88:	88 27       	eor	r24, r24
     a8a:	77 fd       	sbrc	r23, 7
     a8c:	80 95       	com	r24
     a8e:	98 2f       	mov	r25, r24
     a90:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__floatsisf>
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	5f e3       	ldi	r21, 0x3F	; 63
     a9c:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__addsf3>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	c4 01       	movw	r24, r8
     ab2:	b3 01       	movw	r22, r6
     ab4:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     ab8:	9b 01       	movw	r18, r22
     aba:	ac 01       	movw	r20, r24
     abc:	c8 01       	movw	r24, r16
     abe:	b7 01       	movw	r22, r14
     ac0:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__subsf3>
     ac4:	9b 01       	movw	r18, r22
     ac6:	ac 01       	movw	r20, r24
     ac8:	c6 01       	movw	r24, r12
     aca:	b5 01       	movw	r22, r10
     acc:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__subsf3>
						b=((int)((int)b/(int)slope));
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e2       	ldi	r20, 0x20	; 32
     ad6:	51 e4       	ldi	r21, 0x41	; 65
     ad8:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     adc:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixsfsi>
     ae0:	7b 01       	movw	r14, r22
     ae2:	8c 01       	movw	r16, r24
     ae4:	c4 01       	movw	r24, r8
     ae6:	b3 01       	movw	r22, r6
     ae8:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixsfsi>
     aec:	9b 01       	movw	r18, r22
     aee:	ac 01       	movw	r20, r24
     af0:	c7 01       	movw	r24, r14
     af2:	b9 01       	movw	r22, r18
     af4:	0e 94 81 13 	call	0x2702	; 0x2702 <__divmodhi4>
						distance_mm_low=b;
     af8:	88 27       	eor	r24, r24
     afa:	77 fd       	sbrc	r23, 7
     afc:	80 95       	com	r24
     afe:	98 2f       	mov	r25, r24
     b00:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__floatsisf>
     b04:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fixunssfsi>
     b08:	56 2e       	mov	r5, r22
				}
			

			}
			
			if((distance_mm_low!=255)&&(distance_mm_high!=255))
     b0a:	2f ef       	ldi	r18, 0xFF	; 255
     b0c:	62 17       	cp	r22, r18
     b0e:	09 f4       	brne	.+2      	; 0xb12 <__stack+0x213>
     b10:	58 c0       	rjmp	.+176    	; 0xbc2 <__stack+0x2c3>
     b12:	8f ef       	ldi	r24, 0xFF	; 255
     b14:	38 16       	cp	r3, r24
     b16:	11 f4       	brne	.+4      	; 0xb1c <__stack+0x21d>
     b18:	65 2d       	mov	r22, r5
     b1a:	54 c0       	rjmp	.+168    	; 0xbc4 <__stack+0x2c5>
			{
				distance=((double)distance_mm_high*(900.0-adc_high_gain)+(double)distance_mm_low*(adc_high_gain-700.0))/200.0;
     b1c:	e0 90 8e 03 	lds	r14, 0x038E
     b20:	f0 90 8f 03 	lds	r15, 0x038F
     b24:	a0 90 8e 03 	lds	r10, 0x038E
     b28:	b0 90 8f 03 	lds	r11, 0x038F
     b2c:	63 2d       	mov	r22, r3
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 13 11 	call	0x2226	; 0x2226 <__floatunsisf>
     b38:	3b 01       	movw	r6, r22
     b3a:	4c 01       	movw	r8, r24
     b3c:	00 27       	eor	r16, r16
     b3e:	f7 fc       	sbrc	r15, 7
     b40:	00 95       	com	r16
     b42:	10 2f       	mov	r17, r16
     b44:	c8 01       	movw	r24, r16
     b46:	b7 01       	movw	r22, r14
     b48:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__floatsisf>
     b4c:	9b 01       	movw	r18, r22
     b4e:	ac 01       	movw	r20, r24
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	81 e6       	ldi	r24, 0x61	; 97
     b56:	94 e4       	ldi	r25, 0x44	; 68
     b58:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__subsf3>
     b5c:	9b 01       	movw	r18, r22
     b5e:	ac 01       	movw	r20, r24
     b60:	c4 01       	movw	r24, r8
     b62:	b3 01       	movw	r22, r6
     b64:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     b68:	3b 01       	movw	r6, r22
     b6a:	4c 01       	movw	r8, r24
     b6c:	65 2d       	mov	r22, r5
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 13 11 	call	0x2226	; 0x2226 <__floatunsisf>
     b78:	7b 01       	movw	r14, r22
     b7a:	8c 01       	movw	r16, r24
     b7c:	cc 24       	eor	r12, r12
     b7e:	b7 fc       	sbrc	r11, 7
     b80:	c0 94       	com	r12
     b82:	dc 2c       	mov	r13, r12
     b84:	c6 01       	movw	r24, r12
     b86:	b5 01       	movw	r22, r10
     b88:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__floatsisf>
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	4f e2       	ldi	r20, 0x2F	; 47
     b92:	54 e4       	ldi	r21, 0x44	; 68
     b94:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__subsf3>
     b98:	9b 01       	movw	r18, r22
     b9a:	ac 01       	movw	r20, r24
     b9c:	c8 01       	movw	r24, r16
     b9e:	b7 01       	movw	r22, r14
     ba0:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     ba4:	9b 01       	movw	r18, r22
     ba6:	ac 01       	movw	r20, r24
     ba8:	c4 01       	movw	r24, r8
     baa:	b3 01       	movw	r22, r6
     bac:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__addsf3>
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	48 e4       	ldi	r20, 0x48	; 72
     bb6:	53 e4       	ldi	r21, 0x43	; 67
     bb8:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__divsf3>
     bbc:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fixunssfsi>
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <__stack+0x2c5>
				}
			

			}
			
			if((distance_mm_low!=255)&&(distance_mm_high!=255))
     bc2:	63 2d       	mov	r22, r3
			
			distance+=33;
			


			if((incoming_message[3]&(0x01))==0)// message is not a special mode message
     bc4:	80 91 8b 03 	lds	r24, 0x038B
     bc8:	80 fd       	sbrc	r24, 0
     bca:	6f c0       	rjmp	.+222    	; 0xcaa <__stack+0x3ab>
			{
				//write in oldest txvalue_buffer location
				txvalue_buffer[0][txvalue_buffer_pointer]=incoming_message[1];
     bcc:	e0 91 86 03 	lds	r30, 0x0386
     bd0:	f0 91 87 03 	lds	r31, 0x0387
     bd4:	80 91 89 03 	lds	r24, 0x0389
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	ee 0f       	add	r30, r30
     bdc:	ff 1f       	adc	r31, r31
     bde:	e0 5c       	subi	r30, 0xC0	; 192
     be0:	fc 4f       	sbci	r31, 0xFC	; 252
     be2:	91 83       	std	Z+1, r25	; 0x01
     be4:	80 83       	st	Z, r24
				txvalue_buffer[1][txvalue_buffer_pointer]=incoming_message[2];
     be6:	e0 91 86 03 	lds	r30, 0x0386
     bea:	f0 91 87 03 	lds	r31, 0x0387
     bee:	80 91 8a 03 	lds	r24, 0x038A
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	e8 5b       	subi	r30, 0xB8	; 184
     bfa:	fc 4f       	sbci	r31, 0xFC	; 252
     bfc:	91 83       	std	Z+1, r25	; 0x01
     bfe:	80 83       	st	Z, r24
				txvalue_buffer[2][txvalue_buffer_pointer]=incoming_message[3];
     c00:	e0 91 86 03 	lds	r30, 0x0386
     c04:	f0 91 87 03 	lds	r31, 0x0387
     c08:	80 91 8b 03 	lds	r24, 0x038B
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	ee 0f       	add	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	e0 5b       	subi	r30, 0xB0	; 176
     c14:	fc 4f       	sbci	r31, 0xFC	; 252
     c16:	91 83       	std	Z+1, r25	; 0x01
     c18:	80 83       	st	Z, r24
				txvalue_buffer[3][txvalue_buffer_pointer]=distance;
     c1a:	e0 91 86 03 	lds	r30, 0x0386
     c1e:	f0 91 87 03 	lds	r31, 0x0387
     c22:	6f 5d       	subi	r22, 0xDF	; 223
     c24:	86 2f       	mov	r24, r22
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	e8 5a       	subi	r30, 0xA8	; 168
     c2e:	fc 4f       	sbci	r31, 0xFC	; 252
     c30:	91 83       	std	Z+1, r25	; 0x01
     c32:	80 83       	st	Z, r24
				txvalue_buffer[4][txvalue_buffer_pointer]=adc_low_gain;
     c34:	e0 91 86 03 	lds	r30, 0x0386
     c38:	f0 91 87 03 	lds	r31, 0x0387
     c3c:	80 91 3e 03 	lds	r24, 0x033E
     c40:	90 91 3f 03 	lds	r25, 0x033F
     c44:	ee 0f       	add	r30, r30
     c46:	ff 1f       	adc	r31, r31
     c48:	e0 5a       	subi	r30, 0xA0	; 160
     c4a:	fc 4f       	sbci	r31, 0xFC	; 252
     c4c:	91 83       	std	Z+1, r25	; 0x01
     c4e:	80 83       	st	Z, r24
				txvalue_buffer[5][txvalue_buffer_pointer]=1;//mark as new entry
     c50:	e0 91 86 03 	lds	r30, 0x0386
     c54:	f0 91 87 03 	lds	r31, 0x0387
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	e8 59       	subi	r30, 0x98	; 152
     c5e:	fc 4f       	sbci	r31, 0xFC	; 252
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	91 83       	std	Z+1, r25	; 0x01
     c66:	80 83       	st	Z, r24
				txvalue_buffer[6][txvalue_buffer_pointer]=adc_high_gain;
     c68:	e0 91 86 03 	lds	r30, 0x0386
     c6c:	f0 91 87 03 	lds	r31, 0x0387
     c70:	80 91 8e 03 	lds	r24, 0x038E
     c74:	90 91 8f 03 	lds	r25, 0x038F
     c78:	ee 0f       	add	r30, r30
     c7a:	ff 1f       	adc	r31, r31
     c7c:	e0 59       	subi	r30, 0x90	; 144
     c7e:	fc 4f       	sbci	r31, 0xFC	; 252
     c80:	91 83       	std	Z+1, r25	; 0x01
     c82:	80 83       	st	Z, r24
		
				txvalue_buffer_pointer++;
     c84:	80 91 86 03 	lds	r24, 0x0386
     c88:	90 91 87 03 	lds	r25, 0x0387
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	90 93 87 03 	sts	0x0387, r25
     c92:	80 93 86 03 	sts	0x0386, r24

				if(txvalue_buffer_pointer==4)
     c96:	80 91 86 03 	lds	r24, 0x0386
     c9a:	90 91 87 03 	lds	r25, 0x0387
     c9e:	04 97       	sbiw	r24, 0x04	; 4
     ca0:	21 f4       	brne	.+8      	; 0xcaa <__stack+0x3ab>
					txvalue_buffer_pointer=0;
     ca2:	10 92 87 03 	sts	0x0387, r1
     ca6:	10 92 86 03 	sts	0x0386, r1
			
		}	

	
		if(checksum_good==1)//checksum passes
			if((incoming_message[3]&(0x01))!=0)// message is a special mode message
     caa:	80 91 8b 03 	lds	r24, 0x038B
     cae:	80 ff       	sbrs	r24, 0
     cb0:	97 c0       	rjmp	.+302    	; 0xde0 <__stack+0x4e1>
				if(incoming_message[2]==0)// this byte needs to be blank
     cb2:	80 91 8a 03 	lds	r24, 0x038A
     cb6:	88 23       	and	r24, r24
     cb8:	09 f0       	breq	.+2      	; 0xcbc <__stack+0x3bd>
     cba:	92 c0       	rjmp	.+292    	; 0xde0 <__stack+0x4e1>
					if(incoming_message[1]<9)//ignore if message is not valid
     cbc:	80 91 89 03 	lds	r24, 0x0389
     cc0:	89 30       	cpi	r24, 0x09	; 9
     cc2:	08 f0       	brcs	.+2      	; 0xcc6 <__stack+0x3c7>
     cc4:	8d c0       	rjmp	.+282    	; 0xde0 <__stack+0x4e1>
						if(special_mode_message!=incoming_message[1])//if i havent reacted to the special mode message yet
     cc6:	20 91 cc 01 	lds	r18, 0x01CC
     cca:	30 91 cd 01 	lds	r19, 0x01CD
     cce:	80 91 89 03 	lds	r24, 0x0389
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	28 17       	cp	r18, r24
     cd6:	39 07       	cpc	r19, r25
     cd8:	09 f4       	brne	.+2      	; 0xcdc <__stack+0x3dd>
     cda:	82 c0       	rjmp	.+260    	; 0xde0 <__stack+0x4e1>
						{
							if(incoming_message[1]!=0x03)
     cdc:	80 91 89 03 	lds	r24, 0x0389
     ce0:	83 30       	cpi	r24, 0x03	; 3
     ce2:	09 f4       	brne	.+2      	; 0xce6 <__stack+0x3e7>
     ce4:	68 c0       	rjmp	.+208    	; 0xdb6 <__stack+0x4b7>
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	1f c0       	rjmp	.+62     	; 0xd2a <__stack+0x42b>
							{
								for( int a=0 ; a<special_message_pointer ; a++ )
								{
									if(special_message_buffer[a]!=incoming_message[1])
     cec:	fa 01       	movw	r30, r20
     cee:	ee 0f       	add	r30, r30
     cf0:	ff 1f       	adc	r31, r31
     cf2:	e3 50       	subi	r30, 0x03	; 3
     cf4:	fd 4f       	sbci	r31, 0xFD	; 253
     cf6:	20 81       	ld	r18, Z
     cf8:	31 81       	ldd	r19, Z+1	; 0x01
     cfa:	80 91 89 03 	lds	r24, 0x0389
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	28 17       	cp	r18, r24
     d02:	39 07       	cpc	r19, r25
     d04:	81 f0       	breq	.+32     	; 0xd26 <__stack+0x427>
									{

										special_message_buffer[0]=0;
     d06:	10 92 fe 02 	sts	0x02FE, r1
     d0a:	10 92 fd 02 	sts	0x02FD, r1
										special_message_buffer[1]=0;
     d0e:	10 92 00 03 	sts	0x0300, r1
     d12:	10 92 ff 02 	sts	0x02FF, r1
										special_message_buffer[2]=0;
     d16:	10 92 02 03 	sts	0x0302, r1
     d1a:	10 92 01 03 	sts	0x0301, r1
										special_message_pointer=0;
     d1e:	10 92 f3 02 	sts	0x02F3, r1
     d22:	10 92 f2 02 	sts	0x02F2, r1
					if(incoming_message[1]<9)//ignore if message is not valid
						if(special_mode_message!=incoming_message[1])//if i havent reacted to the special mode message yet
						{
							if(incoming_message[1]!=0x03)
							{
								for( int a=0 ; a<special_message_pointer ; a++ )
     d26:	4f 5f       	subi	r20, 0xFF	; 255
     d28:	5f 4f       	sbci	r21, 0xFF	; 255
     d2a:	80 91 f2 02 	lds	r24, 0x02F2
     d2e:	90 91 f3 02 	lds	r25, 0x02F3
     d32:	48 17       	cp	r20, r24
     d34:	59 07       	cpc	r21, r25
     d36:	d4 f2       	brlt	.-76     	; 0xcec <__stack+0x3ed>
										special_message_pointer=0;

									}

								}
								if(special_message_pointer<3)
     d38:	80 91 f2 02 	lds	r24, 0x02F2
     d3c:	90 91 f3 02 	lds	r25, 0x02F3
     d40:	03 97       	sbiw	r24, 0x03	; 3
     d42:	b4 f4       	brge	.+44     	; 0xd70 <__stack+0x471>
								{
									special_message_buffer[special_message_pointer]=incoming_message[1];
     d44:	e0 91 f2 02 	lds	r30, 0x02F2
     d48:	f0 91 f3 02 	lds	r31, 0x02F3
     d4c:	80 91 89 03 	lds	r24, 0x0389
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	e3 50       	subi	r30, 0x03	; 3
     d58:	fd 4f       	sbci	r31, 0xFD	; 253
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	80 83       	st	Z, r24
									special_message_pointer++;
     d5e:	80 91 f2 02 	lds	r24, 0x02F2
     d62:	90 91 f3 02 	lds	r25, 0x02F3
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	90 93 f3 02 	sts	0x02F3, r25
     d6c:	80 93 f2 02 	sts	0x02F2, r24


								}

								if(special_message_pointer==3)
     d70:	80 91 f2 02 	lds	r24, 0x02F2
     d74:	90 91 f3 02 	lds	r25, 0x02F3
     d78:	03 97       	sbiw	r24, 0x03	; 3
     d7a:	e9 f4       	brne	.+58     	; 0xdb6 <__stack+0x4b7>
								{
									special_mode_message=incoming_message[1];
     d7c:	80 91 89 03 	lds	r24, 0x0389
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	90 93 cd 01 	sts	0x01CD, r25
     d86:	80 93 cc 01 	sts	0x01CC, r24
									special_mode=1;  // special mode will be entered when reached in main loop
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	90 93 cf 01 	sts	0x01CF, r25
     d92:	80 93 ce 01 	sts	0x01CE, r24
									special_message_buffer[0]=0;
     d96:	10 92 fe 02 	sts	0x02FE, r1
     d9a:	10 92 fd 02 	sts	0x02FD, r1
									special_message_buffer[1]=0;
     d9e:	10 92 00 03 	sts	0x0300, r1
     da2:	10 92 ff 02 	sts	0x02FF, r1
									special_message_buffer[2]=0;
     da6:	10 92 02 03 	sts	0x0302, r1
     daa:	10 92 01 03 	sts	0x0301, r1
									special_message_pointer=0;
     dae:	10 92 f3 02 	sts	0x02F3, r1
     db2:	10 92 f2 02 	sts	0x02F2, r1
						

							}


							if(incoming_message[1]==0x03)
     db6:	80 91 89 03 	lds	r24, 0x0389
     dba:	83 30       	cpi	r24, 0x03	; 3
     dbc:	89 f4       	brne	.+34     	; 0xde0 <__stack+0x4e1>
							{
								wakeup=1;
     dbe:	21 e0       	ldi	r18, 0x01	; 1
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	30 93 f5 02 	sts	0x02F5, r19
     dc6:	20 93 f4 02 	sts	0x02F4, r18
								special_mode_message=incoming_message[1];
     dca:	80 91 89 03 	lds	r24, 0x0389
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	90 93 cd 01 	sts	0x01CD, r25
     dd4:	80 93 cc 01 	sts	0x01CC, r24
								special_mode=1;  // special mode will be entered when reached in main loop
     dd8:	30 93 cf 01 	sts	0x01CF, r19
     ddc:	20 93 ce 01 	sts	0x01CE, r18
							}
						}
				
		
		//prepare a/d for next communication
		ADMUX=1;
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	90 93 7c 00 	sts	0x007C, r25
		ADCSRA = (1<<ADEN)  | (1<<ADATE) |  (1<<ADIF) |  (1<<ADPS1)|  (1<<ADPS0)  ;//|(1<<ADIE);//| (1<<ADPS0); //enable a/d, have it trigger converstion start on a compairitor interrrupt.Note: turn off for power saving
     de6:	83 eb       	ldi	r24, 0xB3	; 179
     de8:	80 93 7a 00 	sts	0x007A, r24
		ADCSRB = (1<<ADTS0);//set compairitor to be trigger source
     dec:	90 93 7b 00 	sts	0x007B, r25

		message_incoming=0;//no longer receiving a message
     df0:	10 92 e5 02 	sts	0x02E5, r1
     df4:	10 92 e4 02 	sts	0x02E4, r1

	
		incoming_message[0]=0;
     df8:	10 92 88 03 	sts	0x0388, r1
		incoming_message[1]=0;
     dfc:	10 92 89 03 	sts	0x0389, r1
		incoming_message[2]=0;
     e00:	10 92 8a 03 	sts	0x038A, r1
		incoming_message[3]=0;
     e04:	10 92 8b 03 	sts	0x038B, r1
		incoming_message[4]=0;
     e08:	10 92 8c 03 	sts	0x038C, r1


		TCCR1B=0;//turn counter1 off
     e0c:	10 92 81 00 	sts	0x0081, r1
		TCNT1H=0;//reset counter value to 0
     e10:	10 92 85 00 	sts	0x0085, r1
		TCNT1L=0;//reset counter value to 0
     e14:	10 92 84 00 	sts	0x0084, r1
		time_since_last+=12;//take into account time that timer0 was paused
     e18:	80 91 ec 02 	lds	r24, 0x02EC
     e1c:	90 91 ed 02 	lds	r25, 0x02ED
     e20:	0c 96       	adiw	r24, 0x0c	; 12
     e22:	90 93 ed 02 	sts	0x02ED, r25
     e26:	80 93 ec 02 	sts	0x02EC, r24
		TCCR0B=0x05;//turn timer0 back on
     e2a:	85 e0       	ldi	r24, 0x05	; 5
     e2c:	85 bd       	out	0x25, r24	; 37

		
	}
		

	incoming_byte_value=0;//reset incoming byte value for next byte
     e2e:	10 92 05 03 	sts	0x0305, r1
	
}
     e32:	ff 91       	pop	r31
     e34:	ef 91       	pop	r30
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	bf 91       	pop	r27
     e3c:	af 91       	pop	r26
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	7f 91       	pop	r23
     e44:	6f 91       	pop	r22
     e46:	5f 91       	pop	r21
     e48:	4f 91       	pop	r20
     e4a:	3f 91       	pop	r19
     e4c:	2f 91       	pop	r18
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	df 90       	pop	r13
     e58:	cf 90       	pop	r12
     e5a:	bf 90       	pop	r11
     e5c:	af 90       	pop	r10
     e5e:	9f 90       	pop	r9
     e60:	8f 90       	pop	r8
     e62:	7f 90       	pop	r7
     e64:	6f 90       	pop	r6
     e66:	5f 90       	pop	r5
     e68:	4f 90       	pop	r4
     e6a:	3f 90       	pop	r3
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	0f 90       	pop	r0
     e72:	1f 90       	pop	r1
     e74:	18 95       	reti
     e76:	aa e5       	ldi	r26, 0x5A	; 90
     e78:	5a 2e       	mov	r5, r26
     e7a:	4b ce       	rjmp	.-874    	; 0xb12 <__stack+0x213>

00000e7c <__vector_23>:



//isr for compairtor, needed for IR communication
ISR(ANALOG_COMP_vect)//triggers when a pulse is seen on the IR receiver, so every bit received
{
     e7c:	1f 92       	push	r1
     e7e:	0f 92       	push	r0
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	2f 93       	push	r18
     e88:	3f 93       	push	r19
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
	int temp=TCNT1;
     e8e:	20 91 84 00 	lds	r18, 0x0084
     e92:	30 91 85 00 	lds	r19, 0x0085
	TCCR0B=0x00;//turn off timer0 so message can be rx properly
     e96:	15 bc       	out	0x25, r1	; 37
	if(leading_bit==1)//leading bit received
     e98:	80 91 c7 01 	lds	r24, 0x01C7
     e9c:	90 91 c8 01 	lds	r25, 0x01C8
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	11 f5       	brne	.+68     	; 0xee8 <__vector_23+0x6c>
	{
		
		TCNT1H=0;//reset counter value to 0
     ea4:	10 92 85 00 	sts	0x0085, r1
		TCNT1L=0;//reset counter value to 0
     ea8:	10 92 84 00 	sts	0x0084, r1
		TCCR1B=1;//start timer
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	80 93 81 00 	sts	0x0081, r24
		ADCSRA &= ~(1<<ADATE);//prevent adc more converstions from happening 
     eb2:	80 91 7a 00 	lds	r24, 0x007A
     eb6:	8f 7d       	andi	r24, 0xDF	; 223
     eb8:	80 93 7a 00 	sts	0x007A, r24
		if(incoming_byte==0)//9 bits for first flow control "byte"
     ebc:	80 91 e2 02 	lds	r24, 0x02E2
     ec0:	90 91 e3 02 	lds	r25, 0x02E3
     ec4:	89 2b       	or	r24, r25
     ec6:	29 f4       	brne	.+10     	; 0xed2 <__vector_23+0x56>
		{
			//set timeout for end of byte
			OCR1AH=0x09;//high byte for timer compair interrupt
     ec8:	89 e0       	ldi	r24, 0x09	; 9
     eca:	80 93 89 00 	sts	0x0089, r24
			OCR1AL=0x80;//low byte for timer compair interrupt	
     ece:	80 e8       	ldi	r24, 0x80	; 128
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <__vector_23+0x5e>

		}
		else
		{
			//set timeout for end of byte
			OCR1AH=0x08;//high byte for timer compair interrupt
     ed2:	88 e0       	ldi	r24, 0x08	; 8
     ed4:	80 93 89 00 	sts	0x0089, r24
			OCR1AL=0x40;//low byte for timer compair interrupt
     ed8:	80 e4       	ldi	r24, 0x40	; 64
     eda:	80 93 88 00 	sts	0x0088, r24
		//	OCR1AL=0xa0;//low byte for timer compair interrupt	
	

		}
						
		leading_bit=0;
     ede:	10 92 c8 01 	sts	0x01C8, r1
     ee2:	10 92 c7 01 	sts	0x01C7, r1
     ee6:	39 c0       	rjmp	.+114    	; 0xf5a <__vector_23+0xde>
			
	}
	else
	{
		
		if(temp<(time_a+time_b*3 +timeb_half))
     ee8:	84 e0       	ldi	r24, 0x04	; 4
     eea:	2a 3b       	cpi	r18, 0xBA	; 186
     eec:	38 07       	cpc	r19, r24
     eee:	d4 f4       	brge	.+52     	; 0xf24 <__vector_23+0xa8>
		{
			if(temp<(time_a+time_b*1 +timeb_half))
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	20 3a       	cpi	r18, 0xA0	; 160
     ef4:	38 07       	cpc	r19, r24
     ef6:	5c f4       	brge	.+22     	; 0xf0e <__vector_23+0x92>
			{
				if(temp<(time_a+time_b*0 +timeb_half))//0
     ef8:	23 59       	subi	r18, 0x93	; 147
     efa:	31 40       	sbci	r19, 0x01	; 1
     efc:	24 f4       	brge	.+8      	; 0xf06 <__vector_23+0x8a>
				{
					incoming_byte_value+=128;
     efe:	80 91 05 03 	lds	r24, 0x0305
     f02:	80 58       	subi	r24, 0x80	; 128
     f04:	28 c0       	rjmp	.+80     	; 0xf56 <__vector_23+0xda>
				}
				else//1
				{
					incoming_byte_value+=64;
     f06:	80 91 05 03 	lds	r24, 0x0305
     f0a:	80 5c       	subi	r24, 0xC0	; 192
     f0c:	24 c0       	rjmp	.+72     	; 0xf56 <__vector_23+0xda>
				}

			}
			else
			{
				if(temp<(time_a+time_b*2 +timeb_half))//2
     f0e:	2d 5a       	subi	r18, 0xAD	; 173
     f10:	33 40       	sbci	r19, 0x03	; 3
     f12:	24 f4       	brge	.+8      	; 0xf1c <__vector_23+0xa0>
				{
					incoming_byte_value+=32;
     f14:	80 91 05 03 	lds	r24, 0x0305
     f18:	80 5e       	subi	r24, 0xE0	; 224
     f1a:	1d c0       	rjmp	.+58     	; 0xf56 <__vector_23+0xda>

				}
				else//3
				{
					incoming_byte_value+=16;
     f1c:	80 91 05 03 	lds	r24, 0x0305
     f20:	80 5f       	subi	r24, 0xF0	; 240
     f22:	19 c0       	rjmp	.+50     	; 0xf56 <__vector_23+0xda>


		}
		else
		{
			if(temp<(time_a+time_b*5 +timeb_half))
     f24:	86 e0       	ldi	r24, 0x06	; 6
     f26:	24 3d       	cpi	r18, 0xD4	; 212
     f28:	38 07       	cpc	r19, r24
     f2a:	5c f4       	brge	.+22     	; 0xf42 <__vector_23+0xc6>
			{
				if(temp<(time_a+time_b*4 +timeb_half))//4
     f2c:	27 5c       	subi	r18, 0xC7	; 199
     f2e:	35 40       	sbci	r19, 0x05	; 5
     f30:	24 f4       	brge	.+8      	; 0xf3a <__vector_23+0xbe>
				{
					incoming_byte_value+=8;
     f32:	80 91 05 03 	lds	r24, 0x0305
     f36:	88 5f       	subi	r24, 0xF8	; 248
     f38:	0e c0       	rjmp	.+28     	; 0xf56 <__vector_23+0xda>

				}
				else//5
				{
					incoming_byte_value+=4;
     f3a:	80 91 05 03 	lds	r24, 0x0305
     f3e:	8c 5f       	subi	r24, 0xFC	; 252
     f40:	0a c0       	rjmp	.+20     	; 0xf56 <__vector_23+0xda>
				}

			}
			else
			{
				if(temp<(time_a+time_b*6 +timeb_half))//6
     f42:	21 5e       	subi	r18, 0xE1	; 225
     f44:	37 40       	sbci	r19, 0x07	; 7
     f46:	24 f4       	brge	.+8      	; 0xf50 <__vector_23+0xd4>
				{
					incoming_byte_value+=2;
     f48:	80 91 05 03 	lds	r24, 0x0305
     f4c:	8e 5f       	subi	r24, 0xFE	; 254
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <__vector_23+0xda>

				}
				else//7
				{
					incoming_byte_value+=1;
     f50:	80 91 05 03 	lds	r24, 0x0305
     f54:	8f 5f       	subi	r24, 0xFF	; 255
     f56:	80 93 05 03 	sts	0x0305, r24
		}

	
	}
		
	message_incoming=1;// a message is being recieved
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	90 93 e5 02 	sts	0x02E5, r25
     f62:	80 93 e4 02 	sts	0x02E4, r24

}
     f66:	9f 91       	pop	r25
     f68:	8f 91       	pop	r24
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <kprints>:



void kprints(char *i)//print string for debugging out serial
{
     f78:	ac 01       	movw	r20, r24
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
	
	//for usage, kprints("hello world") up to 10 characters
	for(int a=0;a<10;a++)
	{
		UDR0=(i[a]);
     f7e:	fa 01       	movw	r30, r20
     f80:	e2 0f       	add	r30, r18
     f82:	f3 1f       	adc	r31, r19
     f84:	80 81       	ld	r24, Z
     f86:	80 93 c6 00 	sts	0x00C6, r24
			while(!(UCSR0A & (1<<UDRE0)));	
     f8a:	80 91 c0 00 	lds	r24, 0x00C0
     f8e:	85 ff       	sbrs	r24, 5
     f90:	fc cf       	rjmp	.-8      	; 0xf8a <kprints+0x12>

void kprints(char *i)//print string for debugging out serial
{
	
	//for usage, kprints("hello world") up to 10 characters
	for(int a=0;a<10;a++)
     f92:	2f 5f       	subi	r18, 0xFF	; 255
     f94:	3f 4f       	sbci	r19, 0xFF	; 255
     f96:	2a 30       	cpi	r18, 0x0A	; 10
     f98:	31 05       	cpc	r19, r1
     f9a:	89 f7       	brne	.-30     	; 0xf7e <kprints+0x6>
	{
		UDR0=(i[a]);
			while(!(UCSR0A & (1<<UDRE0)));	
	}

	UDR0=(0x0A);
     f9c:	8a e0       	ldi	r24, 0x0A	; 10
     f9e:	80 93 c6 00 	sts	0x00C6, r24

	while(!(UCSR0A & (1<<UDRE0)));
     fa2:	80 91 c0 00 	lds	r24, 0x00C0
     fa6:	85 ff       	sbrs	r24, 5
     fa8:	fc cf       	rjmp	.-8      	; 0xfa2 <kprints+0x2a>
		UDR0=(0x0d);
     faa:	8d e0       	ldi	r24, 0x0D	; 13
     fac:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)));
     fb0:	80 91 c0 00 	lds	r24, 0x00C0
     fb4:	85 ff       	sbrs	r24, 5
     fb6:	fc cf       	rjmp	.-8      	; 0xfb0 <kprints+0x38>
}
     fb8:	08 95       	ret

00000fba <set_motor>:
}

//function for setting motor speeds
void set_motor(char cw, char ccw)
{ 
	OCR2A=ccw;
     fba:	60 93 b3 00 	sts	0x00B3, r22
	OCR2B=cw;
     fbe:	80 93 b4 00 	sts	0x00B4, r24
}
     fc2:	08 95       	ret

00000fc4 <get_ambient_light>:


//measures the ambient light sensor value, will return -1 if there is a message incoming, which need the a/d
int get_ambient_light(void)
{
	if(message_incoming==0)
     fc4:	80 91 e4 02 	lds	r24, 0x02E4
     fc8:	90 91 e5 02 	lds	r25, 0x02E5
     fcc:	89 2b       	or	r24, r25
     fce:	19 f0       	breq	.+6      	; 0xfd6 <get_ambient_light+0x12>
     fd0:	2f ef       	ldi	r18, 0xFF	; 255
     fd2:	3f ef       	ldi	r19, 0xFF	; 255
     fd4:	1a c0       	rjmp	.+52     	; 0x100a <get_ambient_light+0x46>
	{
		cli();
     fd6:	f8 94       	cli
		ADMUX=7;
     fd8:	87 e0       	ldi	r24, 0x07	; 7
     fda:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA |= (1<<ADSC);//start adc
     fde:	80 91 7a 00 	lds	r24, 0x007A
     fe2:	80 64       	ori	r24, 0x40	; 64
     fe4:	80 93 7a 00 	sts	0x007A, r24
		while((ADCSRA&(1<<ADIF))==0);
     fe8:	80 91 7a 00 	lds	r24, 0x007A
     fec:	84 ff       	sbrs	r24, 4
     fee:	fc cf       	rjmp	.-8      	; 0xfe8 <get_ambient_light+0x24>
		ADMUX=1;
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	90 93 7c 00 	sts	0x007C, r25
		ADCSRA = (1<<ADEN)  | (1<<ADATE) |  (1<<ADIF) |  (1<<ADPS1)  ;//|(1<<ADIE);//| (1<<ADPS0); //enable a/d, have it trigger converstion start on a compairitor interrrupt.Note: turn off for power saving
     ff6:	82 eb       	ldi	r24, 0xB2	; 178
     ff8:	80 93 7a 00 	sts	0x007A, r24
		ADCSRB = (1<<ADTS0);//set compairitor to be trigger source
     ffc:	90 93 7b 00 	sts	0x007B, r25
		sei();
    1000:	78 94       	sei
		return(ADCW);
    1002:	20 91 78 00 	lds	r18, 0x0078
    1006:	30 91 79 00 	lds	r19, 0x0079
	}
	else
		return(-1);
}
    100a:	c9 01       	movw	r24, r18
    100c:	08 95       	ret

0000100e <measure_voltage>:


//measures the robot battery voltage, will return -1 if there is a message incoming, which need the a/d
int measure_voltage( void)
{	
	if(message_incoming==0)
    100e:	80 91 e4 02 	lds	r24, 0x02E4
    1012:	90 91 e5 02 	lds	r25, 0x02E5
    1016:	89 2b       	or	r24, r25
    1018:	19 f0       	breq	.+6      	; 0x1020 <measure_voltage+0x12>
    101a:	6f ef       	ldi	r22, 0xFF	; 255
    101c:	7f ef       	ldi	r23, 0xFF	; 255
    101e:	2c c0       	rjmp	.+88     	; 0x1078 <measure_voltage+0x6a>
	{
		while((ADCSRA&(1<<ADSC))==1);
    1020:	80 91 7a 00 	lds	r24, 0x007A
		cli();
    1024:	f8 94       	cli
		ADMUX=6;
    1026:	86 e0       	ldi	r24, 0x06	; 6
    1028:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA |= (1<<ADSC);//start adc
    102c:	80 91 7a 00 	lds	r24, 0x007A
    1030:	80 64       	ori	r24, 0x40	; 64
    1032:	80 93 7a 00 	sts	0x007A, r24
		while((ADCSRA&(1<<ADIF))==0);
    1036:	80 91 7a 00 	lds	r24, 0x007A
    103a:	84 ff       	sbrs	r24, 4
    103c:	fc cf       	rjmp	.-8      	; 0x1036 <measure_voltage+0x28>
		sei();
    103e:	78 94       	sei

		//kprinti(ADCW);
		int voltage=(.0059*(double)ADCW+.0156)*100.0;
    1040:	60 91 78 00 	lds	r22, 0x0078
    1044:	70 91 79 00 	lds	r23, 0x0079
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 13 11 	call	0x2226	; 0x2226 <__floatunsisf>
    1050:	2a ec       	ldi	r18, 0xCA	; 202
    1052:	34 e5       	ldi	r19, 0x54	; 84
    1054:	41 ec       	ldi	r20, 0xC1	; 193
    1056:	5b e3       	ldi	r21, 0x3B	; 59
    1058:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
    105c:	24 e2       	ldi	r18, 0x24	; 36
    105e:	37 e9       	ldi	r19, 0x97	; 151
    1060:	4f e7       	ldi	r20, 0x7F	; 127
    1062:	5c e3       	ldi	r21, 0x3C	; 60
    1064:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__addsf3>
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	48 ec       	ldi	r20, 0xC8	; 200
    106e:	52 e4       	ldi	r21, 0x42	; 66
    1070:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
    1074:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixsfsi>

		return(voltage);
	}
	else
		return(-1);
}
    1078:	cb 01       	movw	r24, r22
    107a:	08 95       	ret

0000107c <measure_charge_status>:

//checks to see if robot is chargin its battery or not
int measure_charge_status(void)
{

	if(PIND & (1<<0))
    107c:	29 b1       	in	r18, 0x09	; 9
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	20 95       	com	r18
    1082:	30 95       	com	r19
    1084:	21 70       	andi	r18, 0x01	; 1
    1086:	30 70       	andi	r19, 0x00	; 0
	else
	{
		//yes charging
		return(1);
	}
}
    1088:	c9 01       	movw	r24, r18
    108a:	08 95       	ret

0000108c <enter_sleep>:


//function used to handle the low power sleep mode for robot
void enter_sleep(void)
{
	wakeup=0;
    108c:	10 92 f5 02 	sts	0x02F5, r1
    1090:	10 92 f4 02 	sts	0x02F4, r1
	cli();
    1094:	f8 94       	cli
	//set registers for sleep mode
	SMCR= (1<<SM1);
    1096:	84 e0       	ldi	r24, 0x04	; 4
    1098:	83 bf       	out	0x33, r24	; 51
	MCUSR=0;
    109a:	14 be       	out	0x34, r1	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE);
    109c:	80 91 60 00 	lds	r24, 0x0060
    10a0:	88 61       	ori	r24, 0x18	; 24
    10a2:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = (1<<WDIE) | (1<<WDP3)| (1<<WDP0);
    10a6:	81 e6       	ldi	r24, 0x61	; 97
    10a8:	80 93 60 00 	sts	0x0060, r24

	//this turns off all the devices, and then enters an 8s deep sleep (55ua current draw)
	DDRB=0;
    10ac:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
    10ae:	15 b8       	out	0x05, r1	; 5
	DDRC=0;
    10b0:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
    10b2:	18 b8       	out	0x08, r1	; 8
	DDRD=0;
    10b4:	1a b8       	out	0x0a, r1	; 10
	PORTD=0;
    10b6:	1b b8       	out	0x0b, r1	; 11
	sei();
    10b8:	78 94       	sei
	ADCSRA &= ~(1<<ADEN); //turn off a2d
    10ba:	80 91 7a 00 	lds	r24, 0x007A
    10be:	8f 77       	andi	r24, 0x7F	; 127
    10c0:	80 93 7a 00 	sts	0x007A, r24

	asm volatile("wdr\n\t");
    10c4:	a8 95       	wdr
	SMCR|= (1<<SE);
    10c6:	83 b7       	in	r24, 0x33	; 51
    10c8:	81 60       	ori	r24, 0x01	; 1
    10ca:	83 bf       	out	0x33, r24	; 51
	asm volatile("sleep\n\t");
    10cc:	88 95       	sleep
	sei();
    10ce:	78 94       	sei

	while(wakeup==0)//go back to sleep
	{
	
		//set registers for sleep mode
		SMCR= (1<<SM1);
    10d0:	34 e0       	ldi	r19, 0x04	; 4
		MCUSR=0;
		WDTCSR |= (1<<WDCE)|(1<<WDE);
		WDTCSR = (1<<WDIE) | (1<<WDP3)| (1<<WDP0);
    10d2:	21 e6       	ldi	r18, 0x61	; 97
    10d4:	1b c0       	rjmp	.+54     	; 0x110c <enter_sleep+0x80>

	while(wakeup==0)//go back to sleep
	{
	
		//set registers for sleep mode
		SMCR= (1<<SM1);
    10d6:	33 bf       	out	0x33, r19	; 51
		MCUSR=0;
    10d8:	14 be       	out	0x34, r1	; 52
		WDTCSR |= (1<<WDCE)|(1<<WDE);
    10da:	80 91 60 00 	lds	r24, 0x0060
    10de:	88 61       	ori	r24, 0x18	; 24
    10e0:	80 93 60 00 	sts	0x0060, r24
		WDTCSR = (1<<WDIE) | (1<<WDP3)| (1<<WDP0);
    10e4:	20 93 60 00 	sts	0x0060, r18
	
		//this turns off all the devices, and then enters an 8s deep sleep (55ua current draw)
		DDRB=0;
    10e8:	14 b8       	out	0x04, r1	; 4
		PORTB=0;
    10ea:	15 b8       	out	0x05, r1	; 5
		DDRC=0;
    10ec:	17 b8       	out	0x07, r1	; 7
		PORTC=0;
    10ee:	18 b8       	out	0x08, r1	; 8
		DDRD=0;
    10f0:	1a b8       	out	0x0a, r1	; 10
		PORTD=0;
    10f2:	1b b8       	out	0x0b, r1	; 11
		sei();
    10f4:	78 94       	sei
		ADCSRA &= ~(1<<ADEN); //turn off a2d
    10f6:	80 91 7a 00 	lds	r24, 0x007A
    10fa:	8f 77       	andi	r24, 0x7F	; 127
    10fc:	80 93 7a 00 	sts	0x007A, r24
		asm volatile("wdr\n\t");
    1100:	a8 95       	wdr
		SMCR|= (1<<SE);
    1102:	83 b7       	in	r24, 0x33	; 51
    1104:	81 60       	ori	r24, 0x01	; 1
    1106:	83 bf       	out	0x33, r24	; 51
		asm volatile("sleep\n\t");
    1108:	88 95       	sleep
		sei();
    110a:	78 94       	sei
	asm volatile("wdr\n\t");
	SMCR|= (1<<SE);
	asm volatile("sleep\n\t");
	sei();

	while(wakeup==0)//go back to sleep
    110c:	80 91 f4 02 	lds	r24, 0x02F4
    1110:	90 91 f5 02 	lds	r25, 0x02F5
    1114:	89 2b       	or	r24, r25
    1116:	f9 f2       	breq	.-66     	; 0x10d6 <enter_sleep+0x4a>
		sei();

	}

	//re enable motors
	DDRD |= (1<<3);
    1118:	53 9a       	sbi	0x0a, 3	; 10
	DDRB |= (1<<3);
    111a:	23 9a       	sbi	0x04, 3	; 4
	TCCR2A |= (1<<COM2A1) | (1<<COM2B1) | (1<<WGM20);
    111c:	80 91 b0 00 	lds	r24, 0x00B0
    1120:	81 6a       	ori	r24, 0xA1	; 161
    1122:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1<<CS01); //prescaler set to /8
    1126:	80 91 b1 00 	lds	r24, 0x00B1
    112a:	82 60       	ori	r24, 0x02	; 2
    112c:	80 93 b1 00 	sts	0x00B1, r24
	OCR2B = 0x00;//start with motor off
    1130:	10 92 b4 00 	sts	0x00B4, r1
	OCR2A = 0x00;//start with motor off
    1134:	10 92 b3 00 	sts	0x00B3, r1
}
    1138:	08 95       	ret

0000113a <set_color>:



//for controlling the rgb led (0..3 for each color)
void set_color(int8_t red,int8_t green,int8_t blue)
{
    113a:	98 2f       	mov	r25, r24
//PB6 msb
//PB7
//PD5 lsb

	
	if((blue%2)!=0)//lsb
    113c:	40 ff       	sbrs	r20, 0
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <set_color+0xa>
		DDRC |= (1<<5);
    1140:	3d 9a       	sbi	0x07, 5	; 7
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <set_color+0xc>
	else
		DDRC &= ~(1<<5);
    1144:	3d 98       	cbi	0x07, 5	; 7

	blue=(blue>>1);
	if((blue%2)!=0)
    1146:	84 2f       	mov	r24, r20
    1148:	85 95       	asr	r24
    114a:	80 ff       	sbrs	r24, 0
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <set_color+0x18>
		DDRC |= (1<<4);
    114e:	3c 9a       	sbi	0x07, 4	; 7
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <set_color+0x1a>
	else
		DDRC &= ~(1<<4);
    1152:	3c 98       	cbi	0x07, 4	; 7


	if((red%2)!=0)//lsb
    1154:	90 ff       	sbrs	r25, 0
    1156:	02 c0       	rjmp	.+4      	; 0x115c <set_color+0x22>
		DDRD |= (1<<5);
    1158:	55 9a       	sbi	0x0a, 5	; 10
    115a:	01 c0       	rjmp	.+2      	; 0x115e <set_color+0x24>
	else
		DDRD &= ~(1<<5);
    115c:	55 98       	cbi	0x0a, 5	; 10

	red=(red>>1);
	if((red%2)!=0)
    115e:	89 2f       	mov	r24, r25
    1160:	85 95       	asr	r24
    1162:	80 ff       	sbrs	r24, 0
    1164:	02 c0       	rjmp	.+4      	; 0x116a <set_color+0x30>
		DDRD |= (1<<4);
    1166:	54 9a       	sbi	0x0a, 4	; 10
    1168:	01 c0       	rjmp	.+2      	; 0x116c <set_color+0x32>
	else
		DDRD &= ~(1<<4);
    116a:	54 98       	cbi	0x0a, 4	; 10


	if((green%2)!=0)//lsb
    116c:	60 ff       	sbrs	r22, 0
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <set_color+0x3a>
		DDRC |= (1<<3);
    1170:	3b 9a       	sbi	0x07, 3	; 7
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <set_color+0x3c>
	else
		DDRC &= ~(1<<3);
    1174:	3b 98       	cbi	0x07, 3	; 7

	green=(green>>1);
	if((green%2)!=0)
    1176:	86 2f       	mov	r24, r22
    1178:	85 95       	asr	r24
    117a:	80 ff       	sbrs	r24, 0
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <set_color+0x48>
		DDRC |= (1<<2);
    117e:	3a 9a       	sbi	0x07, 2	; 7
    1180:	08 95       	ret
	else
		DDRC &= ~(1<<2);
    1182:	3a 98       	cbi	0x07, 2	; 7
    1184:	08 95       	ret

00001186 <__vector_6>:
}


//watch dog timer isr. Used for the low power sleep mode
ISR(WDT_vect)
{
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
	
	//wake up 
	asm volatile("wdr\n\t");
    11a8:	a8 95       	wdr
	DDRD |= (1<<2);//make power supply control pin an output
    11aa:	52 9a       	sbi	0x0a, 2	; 10
	PORTD |= (1<<2);//turn on the power supply	  
    11ac:	5a 9a       	sbi	0x0b, 2	; 11
	ADCSRA |= (1<<ADEN);//turn on the a/d converter
    11ae:	ea e7       	ldi	r30, 0x7A	; 122
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	80 68       	ori	r24, 0x80	; 128
    11b6:	80 83       	st	Z, r24
	
	//disable watch dog timer
	WDTCSR |= (1<<WDCE)|(1<<WDE);
    11b8:	e0 e6       	ldi	r30, 0x60	; 96
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	88 61       	ori	r24, 0x18	; 24
    11c0:	80 83       	st	Z, r24
	WDTCSR = 0;
    11c2:	10 82       	st	Z, r1


	//check to see if message is incoming
	sei();
    11c4:	78 94       	sei
	set_color(3,3,3);
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	63 e0       	ldi	r22, 0x03	; 3
    11ca:	43 e0       	ldi	r20, 0x03	; 3
    11cc:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>
    11d0:	80 e2       	ldi	r24, 0x20	; 32
    11d2:	9e e4       	ldi	r25, 0x4E	; 78
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <__vector_6+0x4e>
	_delay_ms(10);
	set_color(0,0,0);	
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>
	
}
    11e2:	ff 91       	pop	r31
    11e4:	ef 91       	pop	r30
    11e6:	bf 91       	pop	r27
    11e8:	af 91       	pop	r26
    11ea:	9f 91       	pop	r25
    11ec:	8f 91       	pop	r24
    11ee:	7f 91       	pop	r23
    11f0:	6f 91       	pop	r22
    11f2:	5f 91       	pop	r21
    11f4:	4f 91       	pop	r20
    11f6:	3f 91       	pop	r19
    11f8:	2f 91       	pop	r18
    11fa:	0f 90       	pop	r0
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	0f 90       	pop	r0
    1200:	1f 90       	pop	r1
    1202:	18 95       	reti

00001204 <main_program_loop>:
}



void main_program_loop(void (*user_prgm) (void))
{
    1204:	bf 92       	push	r11
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	ec 01       	movw	r28, r24
    1218:	50 ea       	ldi	r21, 0xA0	; 160
    121a:	c5 2e       	mov	r12, r21
    121c:	5f e0       	ldi	r21, 0x0F	; 15
    121e:	d5 2e       	mov	r13, r21
						set_color(0,0,0);
						_delay_ms(200);
					}
				}
				enable_tx=1;
				TCCR0B=0x05;//turn on timer 0 to re-allow message transmissions
    1220:	08 ec       	ldi	r16, 0xC8	; 200
    1222:	10 e0       	ldi	r17, 0x00	; 0
    1224:	45 e0       	ldi	r20, 0x05	; 5
    1226:	b4 2e       	mov	r11, r20
    1228:	30 e2       	ldi	r19, 0x20	; 32
    122a:	e3 2e       	mov	r14, r19
    122c:	3e e4       	ldi	r19, 0x4E	; 78
    122e:	f3 2e       	mov	r15, r19

	while(1)//main program loop
	{	
		
		//special message controller, handles controll messages like sleep and resume program
		if(special_mode==1)
    1230:	80 91 ce 01 	lds	r24, 0x01CE
    1234:	90 91 cf 01 	lds	r25, 0x01CF
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	09 f0       	breq	.+2      	; 0x123e <main_program_loop+0x3a>
    123c:	d0 c0       	rjmp	.+416    	; 0x13de <main_program_loop+0x1da>
		{
			run_program=0;
    123e:	10 92 f6 02 	sts	0x02F6, r1
			sei();
    1242:	78 94       	sei
			special_mode=0;
    1244:	10 92 cf 01 	sts	0x01CF, r1
    1248:	10 92 ce 01 	sts	0x01CE, r1
			//0x05 display battery voltage
			//0x06 execute program code
			//0x07 battery charge
			//0x08 reset program
	
			if(special_mode_message==0x01)
    124c:	80 91 cc 01 	lds	r24, 0x01CC
    1250:	90 91 cd 01 	lds	r25, 0x01CD
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	51 f4       	brne	.+20     	; 0x126c <main_program_loop+0x68>
			{
				//stop motors and ir led
				OCR2B = 0x00;
    1258:	10 92 b4 00 	sts	0x00B4, r1
				OCR2A = 0x00;
    125c:	10 92 b3 00 	sts	0x00B3, r1
				PORTD &= ~(1<<4);
    1260:	5c 98       	cbi	0x0b, 4	; 11
				enable_tx=0;
    1262:	10 92 d0 01 	sts	0x01D0, r1
				TCCR0B=0x00;//turn off timer0
    1266:	15 bc       	out	0x25, r1	; 37
				asm("jmp 0x7000");//jump to bootloader
    1268:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__data_load_end+0x4474>
			}
			if(special_mode_message==0x02)
    126c:	80 91 cc 01 	lds	r24, 0x01CC
    1270:	90 91 cd 01 	lds	r25, 0x01CD
    1274:	02 97       	sbiw	r24, 0x02	; 2
    1276:	41 f4       	brne	.+16     	; 0x1288 <main_program_loop+0x84>
			{
				enable_tx=0;
    1278:	10 92 d0 01 	sts	0x01D0, r1
				wakeup=0;
    127c:	10 92 f5 02 	sts	0x02F5, r1
    1280:	10 92 f4 02 	sts	0x02F4, r1
				enter_sleep();//will not return from enter_sleep() untill a special mode message 0x03 is received	
    1284:	0e 94 46 08 	call	0x108c	; 0x108c <enter_sleep>
			}
			if((special_mode_message==0x03)||(special_mode_message==0x04))
    1288:	80 91 cc 01 	lds	r24, 0x01CC
    128c:	90 91 cd 01 	lds	r25, 0x01CD
    1290:	03 97       	sbiw	r24, 0x03	; 3
    1292:	31 f0       	breq	.+12     	; 0x12a0 <main_program_loop+0x9c>
    1294:	80 91 cc 01 	lds	r24, 0x01CC
    1298:	90 91 cd 01 	lds	r25, 0x01CD
    129c:	04 97       	sbiw	r24, 0x04	; 4
    129e:	51 f5       	brne	.+84     	; 0x12f4 <main_program_loop+0xf0>
			{
				//wakeup already set to 1 in timer1 interrupt
			
				//special_mode=0;
				set_color(0,0,0);
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>
				OCR2B = 0x00;
    12aa:	10 92 b4 00 	sts	0x00B4, r1
				OCR2A = 0x00;
    12ae:	10 92 b3 00 	sts	0x00B3, r1
				PORTD &= ~(1<<4);
    12b2:	5c 98       	cbi	0x0b, 4	; 11
				enable_tx=0;
    12b4:	10 92 d0 01 	sts	0x01D0, r1
    12b8:	14 c0       	rjmp	.+40     	; 0x12e2 <main_program_loop+0xde>
				while(special_mode==0)//loop untill another special mode message is received
				{	
					set_color(3,3,0);
    12ba:	83 e0       	ldi	r24, 0x03	; 3
    12bc:	63 e0       	ldi	r22, 0x03	; 3
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>
    12c4:	c7 01       	movw	r24, r14
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <main_program_loop+0xc2>
					_delay_ms(10);
					set_color(0,0,0);
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>
    12d4:	80 e1       	ldi	r24, 0x10	; 16
    12d6:	97 e2       	ldi	r25, 0x27	; 39
    12d8:	f8 01       	movw	r30, r16
    12da:	31 97       	sbiw	r30, 0x01	; 1
    12dc:	f1 f7       	brne	.-4      	; 0x12da <main_program_loop+0xd6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e0:	d9 f7       	brne	.-10     	; 0x12d8 <main_program_loop+0xd4>
				set_color(0,0,0);
				OCR2B = 0x00;
				OCR2A = 0x00;
				PORTD &= ~(1<<4);
				enable_tx=0;
				while(special_mode==0)//loop untill another special mode message is received
    12e2:	80 91 ce 01 	lds	r24, 0x01CE
    12e6:	90 91 cf 01 	lds	r25, 0x01CF
    12ea:	89 2b       	or	r24, r25
    12ec:	31 f3       	breq	.-52     	; 0x12ba <main_program_loop+0xb6>
					set_color(0,0,0);
					_delay_ms(1000);


				}
				enable_tx=1;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	80 93 d0 01 	sts	0x01D0, r24
			
			}
			if(special_mode_message==0x05)
    12f4:	80 91 cc 01 	lds	r24, 0x01CC
    12f8:	90 91 cd 01 	lds	r25, 0x01CD
    12fc:	05 97       	sbiw	r24, 0x05	; 5
    12fe:	81 f5       	brne	.+96     	; 0x1360 <main_program_loop+0x15c>
			{
			//	special_mode=0;
				OCR2B = 0x00;
    1300:	10 92 b4 00 	sts	0x00B4, r1
				OCR2A = 0x00;
    1304:	10 92 b3 00 	sts	0x00B3, r1
				PORTD &= ~(1<<4);
    1308:	5c 98       	cbi	0x0b, 4	; 11
				TCCR0B=0x00;//turn off timer 0 to stop message transmissions
    130a:	15 bc       	out	0x25, r1	; 37
				enable_tx=0;
    130c:	10 92 d0 01 	sts	0x01D0, r1
    1310:	1d c0       	rjmp	.+58     	; 0x134c <main_program_loop+0x148>
				while(special_mode==0)//loop untill another special mode message is received
				{
					if(measure_voltage()>400)
    1312:	0e 94 07 08 	call	0x100e	; 0x100e <measure_voltage>
    1316:	81 59       	subi	r24, 0x91	; 145
    1318:	91 40       	sbci	r25, 0x01	; 1
    131a:	14 f0       	brlt	.+4      	; 0x1320 <main_program_loop+0x11c>
						set_color(0,3,0);
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	0f c0       	rjmp	.+30     	; 0x133e <main_program_loop+0x13a>
					else if(measure_voltage()>390)
    1320:	0e 94 07 08 	call	0x100e	; 0x100e <measure_voltage>
    1324:	87 58       	subi	r24, 0x87	; 135
    1326:	91 40       	sbci	r25, 0x01	; 1
    1328:	24 f0       	brlt	.+8      	; 0x1332 <main_program_loop+0x12e>
						set_color(0,0,3);
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	43 e0       	ldi	r20, 0x03	; 3
    1330:	0b c0       	rjmp	.+22     	; 0x1348 <main_program_loop+0x144>
					else if(measure_voltage()>350)
    1332:	0e 94 07 08 	call	0x100e	; 0x100e <measure_voltage>
    1336:	8f 55       	subi	r24, 0x5F	; 95
    1338:	91 40       	sbci	r25, 0x01	; 1
    133a:	1c f0       	brlt	.+6      	; 0x1342 <main_program_loop+0x13e>
						set_color(3,3,0);
    133c:	83 e0       	ldi	r24, 0x03	; 3
    133e:	63 e0       	ldi	r22, 0x03	; 3
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <main_program_loop+0x142>
					else
						set_color(3,0,0);
    1342:	83 e0       	ldi	r24, 0x03	; 3
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>
				OCR2B = 0x00;
				OCR2A = 0x00;
				PORTD &= ~(1<<4);
				TCCR0B=0x00;//turn off timer 0 to stop message transmissions
				enable_tx=0;
				while(special_mode==0)//loop untill another special mode message is received
    134c:	80 91 ce 01 	lds	r24, 0x01CE
    1350:	90 91 cf 01 	lds	r25, 0x01CF
    1354:	89 2b       	or	r24, r25
    1356:	e9 f2       	breq	.-70     	; 0x1312 <main_program_loop+0x10e>
					else
						set_color(3,0,0);
					

				}
				enable_tx=1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	80 93 d0 01 	sts	0x01D0, r24
				TCCR0B=0x05;//turn on timer 0 to re-allow message transmissions
    135e:	b5 bc       	out	0x25, r11	; 37
			}
			if(special_mode_message==0x06)
    1360:	80 91 cc 01 	lds	r24, 0x01CC
    1364:	90 91 cd 01 	lds	r25, 0x01CD
    1368:	06 97       	sbiw	r24, 0x06	; 6
    136a:	29 f4       	brne	.+10     	; 0x1376 <main_program_loop+0x172>
			{	
				enable_tx=1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 93 d0 01 	sts	0x01D0, r24
				run_program=1;
    1372:	80 93 f6 02 	sts	0x02F6, r24
				//no code here, just allows special_mode to end 

			}
			if(special_mode_message==0x07)
    1376:	80 91 cc 01 	lds	r24, 0x01CC
    137a:	90 91 cd 01 	lds	r25, 0x01CD
    137e:	07 97       	sbiw	r24, 0x07	; 7
    1380:	d9 f4       	brne	.+54     	; 0x13b8 <main_program_loop+0x1b4>
			{
			//	special_mode=0;
				OCR2B = 0x00;
    1382:	10 92 b4 00 	sts	0x00B4, r1
				OCR2A = 0x00;
    1386:	10 92 b3 00 	sts	0x00B3, r1
				PORTD &= ~(1<<4);
    138a:	5c 98       	cbi	0x0b, 4	; 11
				TCCR0B=0x00;//turn off timer 0 to stop message transmissions
    138c:	15 bc       	out	0x25, r1	; 37
				enable_tx=0;
    138e:	10 92 d0 01 	sts	0x01D0, r1
    1392:	08 c0       	rjmp	.+16     	; 0x13a4 <main_program_loop+0x1a0>

//checks to see if robot is chargin its battery or not
int measure_charge_status(void)
{

	if(PIND & (1<<0))
    1394:	48 99       	sbic	0x09, 0	; 9
    1396:	06 c0       	rjmp	.+12     	; 0x13a4 <main_program_loop+0x1a0>
    1398:	2a c0       	rjmp	.+84     	; 0x13ee <main_program_loop+0x1ea>
    139a:	f8 01       	movw	r30, r16
    139c:	31 97       	sbiw	r30, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <main_program_loop+0x198>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a2:	d9 f7       	brne	.-10     	; 0x139a <main_program_loop+0x196>
				OCR2B = 0x00;
				OCR2A = 0x00;
				PORTD &= ~(1<<4);
				TCCR0B=0x00;//turn off timer 0 to stop message transmissions
				enable_tx=0;
				while(special_mode==0)//loop untill another special mode message is received
    13a4:	80 91 ce 01 	lds	r24, 0x01CE
    13a8:	90 91 cf 01 	lds	r25, 0x01CF
    13ac:	89 2b       	or	r24, r25
    13ae:	91 f3       	breq	.-28     	; 0x1394 <main_program_loop+0x190>
						_delay_ms(2);
						set_color(0,0,0);
						_delay_ms(200);
					}
				}
				enable_tx=1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	80 93 d0 01 	sts	0x01D0, r24
				TCCR0B=0x05;//turn on timer 0 to re-allow message transmissions
    13b6:	b5 bc       	out	0x25, r11	; 37
			}
			if(special_mode_message==0x08)
    13b8:	80 91 cc 01 	lds	r24, 0x01CC
    13bc:	90 91 cd 01 	lds	r25, 0x01CD
    13c0:	08 97       	sbiw	r24, 0x08	; 8
    13c2:	69 f4       	brne	.+26     	; 0x13de <main_program_loop+0x1da>
			{
				cli(); 
    13c4:	f8 94       	cli
				 wdt_enable(WDTO_15MS);  
    13c6:	28 e0       	ldi	r18, 0x08	; 8
    13c8:	88 e1       	ldi	r24, 0x18	; 24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	a8 95       	wdr
    13d2:	80 93 60 00 	sts	0x0060, r24
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	20 93 60 00 	sts	0x0060, r18
    13dc:	ff cf       	rjmp	.-2      	; 0x13dc <main_program_loop+0x1d8>

			}
		
	
		}
		if(run_program==1)
    13de:	80 91 f6 02 	lds	r24, 0x02F6
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <main_program_loop+0x1e4>
    13e6:	24 cf       	rjmp	.-440    	; 0x1230 <main_program_loop+0x2c>
		{	
			
			user_prgm();
    13e8:	fe 01       	movw	r30, r28
    13ea:	09 95       	icall
    13ec:	21 cf       	rjmp	.-446    	; 0x1230 <main_program_loop+0x2c>
				while(special_mode==0)//loop untill another special mode message is received
				{
				
					if(measure_charge_status()==1)
					{
						set_color(1,0,0);
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>
    13f8:	c6 01       	movw	r24, r12
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <main_program_loop+0x1f6>
						_delay_ms(2);
						set_color(0,0,0);
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>
    1408:	80 ed       	ldi	r24, 0xD0	; 208
    140a:	97 e0       	ldi	r25, 0x07	; 7
    140c:	c6 cf       	rjmp	.-116    	; 0x139a <main_program_loop+0x196>

0000140e <kprinti>:
	while(!(UCSR0A & (1<<UDRE0)));
}


void kprinti(int i)//print int for debugging out serial
{
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	2a 97       	sbiw	r28, 0x0a	; 10
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	8e 01       	movw	r16, r28
    142c:	0f 5f       	subi	r16, 0xFF	; 255
    142e:	1f 4f       	sbci	r17, 0xFF	; 255
    1430:	78 01       	movw	r14, r16
	
	char buffer[10]; 
	for(int a=0;a<10;a++)
    1432:	9e 01       	movw	r18, r28
    1434:	25 5f       	subi	r18, 0xF5	; 245
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
		buffer[a]=0;
    1438:	f7 01       	movw	r30, r14
    143a:	11 92       	st	Z+, r1
    143c:	7f 01       	movw	r14, r30

void kprinti(int i)//print int for debugging out serial
{
	
	char buffer[10]; 
	for(int a=0;a<10;a++)
    143e:	e2 17       	cp	r30, r18
    1440:	f3 07       	cpc	r31, r19
    1442:	d1 f7       	brne	.-12     	; 0x1438 <kprinti+0x2a>
		buffer[a]=0;

	itoa(i,buffer,10);
    1444:	be 01       	movw	r22, r28
    1446:	6f 5f       	subi	r22, 0xFF	; 255
    1448:	7f 4f       	sbci	r23, 0xFF	; 255
    144a:	4a e0       	ldi	r20, 0x0A	; 10
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	0e 94 40 14 	call	0x2880	; 0x2880 <itoa>
	for(int a=0;a<10;a++)
	{
			UDR0=(buffer[a]);
    1452:	f8 01       	movw	r30, r16
    1454:	80 81       	ld	r24, Z
    1456:	80 93 c6 00 	sts	0x00C6, r24
			while(!(UCSR0A & (1<<UDRE0)));
    145a:	80 91 c0 00 	lds	r24, 0x00C0
    145e:	85 ff       	sbrs	r24, 5
    1460:	fc cf       	rjmp	.-8      	; 0x145a <kprinti+0x4c>
    1462:	0f 5f       	subi	r16, 0xFF	; 255
    1464:	1f 4f       	sbci	r17, 0xFF	; 255
	char buffer[10]; 
	for(int a=0;a<10;a++)
		buffer[a]=0;

	itoa(i,buffer,10);
	for(int a=0;a<10;a++)
    1466:	0e 15       	cp	r16, r14
    1468:	1f 05       	cpc	r17, r15
    146a:	99 f7       	brne	.-26     	; 0x1452 <kprinti+0x44>
	{
			UDR0=(buffer[a]);
			while(!(UCSR0A & (1<<UDRE0)));
	}

	UDR0=(0x20);
    146c:	80 e2       	ldi	r24, 0x20	; 32
    146e:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)));
    1472:	80 91 c0 00 	lds	r24, 0x00C0
    1476:	85 ff       	sbrs	r24, 5
    1478:	fc cf       	rjmp	.-8      	; 0x1472 <kprinti+0x64>
//		UDR0=(0x0d);
//	while(!(UCSR0A & (1<<UDRE0)));

}
    147a:	2a 96       	adiw	r28, 0x0a	; 10
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	08 95       	ret

00001494 <init_robot>:
}



void init_robot(void)
{
    1494:	cf 92       	push	r12
    1496:	df 92       	push	r13
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
	//starting initalizations
	/////////////////////////
	//int TestLED=0;
	
	//clear special message buffer	
	special_message_buffer[0]=0;
    14a4:	10 92 fe 02 	sts	0x02FE, r1
    14a8:	10 92 fd 02 	sts	0x02FD, r1
	special_message_buffer[1]=0;
    14ac:	10 92 00 03 	sts	0x0300, r1
    14b0:	10 92 ff 02 	sts	0x02FF, r1
	special_message_buffer[2]=0;
    14b4:	10 92 02 03 	sts	0x0302, r1
    14b8:	10 92 01 03 	sts	0x0301, r1

	//clear txvalue_buffer
	for(int i=0;i<4;i++)
		txvalue_buffer[5][i]=0;	
    14bc:	10 92 69 03 	sts	0x0369, r1
    14c0:	10 92 68 03 	sts	0x0368, r1
    14c4:	10 92 6b 03 	sts	0x036B, r1
    14c8:	10 92 6a 03 	sts	0x036A, r1
    14cc:	10 92 6d 03 	sts	0x036D, r1
    14d0:	10 92 6c 03 	sts	0x036C, r1
    14d4:	10 92 6f 03 	sts	0x036F, r1
    14d8:	10 92 6e 03 	sts	0x036E, r1

	//port initalizations
	DDRB=0;
    14dc:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
    14de:	15 b8       	out	0x05, r1	; 5
	DDRC=0;
    14e0:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
    14e2:	18 b8       	out	0x08, r1	; 8
	DDRD=0;
    14e4:	1a b8       	out	0x0a, r1	; 10
	PORTD=0;
    14e6:	1b b8       	out	0x0b, r1	; 11

	DDRD |= (1<<2);//make power supply control pin an output
    14e8:	52 9a       	sbi	0x0a, 2	; 10
	PORTD |= (1<<2);//turn on the power supply
    14ea:	5a 9a       	sbi	0x0b, 2	; 11

	//set up rc oscillator to calibrated value
	OSCCAL=eeprom_read_byte((uint8_t *)ee_OSCCAL);//read rc calibration data from eeprom, and write it to OSCCAL
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__eerd_byte_m328p>
    14f4:	80 93 66 00 	sts	0x0066, r24
	
	//initalize uart for output of serial debugging info
	DDRD |= (1<<1);
    14f8:	51 9a       	sbi	0x0a, 1	; 10
	UBRR0=1;//256000 baud
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	90 93 c5 00 	sts	0x00C5, r25
    1502:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = 0;
    1506:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B |= (1<<TXEN0);
    150a:	80 91 c1 00 	lds	r24, 0x00C1
    150e:	88 60       	ori	r24, 0x08	; 8
    1510:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    1514:	80 91 c2 00 	lds	r24, 0x00C2
    1518:	86 60       	ori	r24, 0x06	; 6
    151a:	80 93 c2 00 	sts	0x00C2, r24
	kprints("start init");
    151e:	88 e3       	ldi	r24, 0x38	; 56
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>

	//initalize motors/pwm
	DDRD |= (1<<3);
    1526:	53 9a       	sbi	0x0a, 3	; 10
	DDRB |= (1<<3);
    1528:	23 9a       	sbi	0x04, 3	; 4
	TCCR2A |= (1<<COM2A1) | (1<<COM2B1) | (1<<WGM20);
    152a:	80 91 b0 00 	lds	r24, 0x00B0
    152e:	81 6a       	ori	r24, 0xA1	; 161
    1530:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= (1<<CS01); //prescaler set to /8
    1534:	80 91 b1 00 	lds	r24, 0x00B1
    1538:	82 60       	ori	r24, 0x02	; 2
    153a:	80 93 b1 00 	sts	0x00B1, r24
	OCR2B = 0x00;//start with motor off
    153e:	10 92 b4 00 	sts	0x00B4, r1
	OCR2A = 0x00;//start with motor off
    1542:	10 92 b3 00 	sts	0x00B3, r1

	//initalize analog comparator
	ACSR |= (1<<ACIE) | (1<<ACIS1)| (1<<ACIS0) ;//trigger interrupt on rising output edge
    1546:	80 b7       	in	r24, 0x30	; 48
    1548:	8b 60       	ori	r24, 0x0B	; 11
    154a:	80 bf       	out	0x30, r24	; 48
	DIDR1=3;
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	80 93 7f 00 	sts	0x007F, r24

	//initalize adc
	ADMUX = 0;//choose analog refrence pin AREF
    1552:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA = (1<<ADEN) | (1<<ADSC) |  (1<<ADPS1) | (1<<ADPS0); //enable a/d, have it trigger converstion start on a compairitor interrrupt.Note: turn off for power saving
    1556:	83 ec       	ldi	r24, 0xC3	; 195
    1558:	80 93 7a 00 	sts	0x007A, r24
	
	//initalize timer1
	TCCR1A=0x00;
    155c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x01;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=0x02;
    1566:	92 e0       	ldi	r25, 0x02	; 2
    1568:	90 93 6f 00 	sts	0x006F, r25
	OCR1AH=0x32;//high byte for timer compair interrupt
    156c:	82 e3       	ldi	r24, 0x32	; 50
    156e:	80 93 89 00 	sts	0x0089, r24
	OCR1AL=0x00;//low byte for timer compair interrupt	
    1572:	10 92 88 00 	sts	0x0088, r1

	//initalize timer0
	TCCR0A=0x00;
    1576:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0x05;
    1578:	85 e0       	ldi	r24, 0x05	; 5
    157a:	85 bd       	out	0x25, r24	; 37
	TIMSK0=0x02;
    157c:	90 93 6e 00 	sts	0x006E, r25
	OCR0A=0xff;
    1580:	8f ef       	ldi	r24, 0xFF	; 255
    1582:	87 bd       	out	0x27, r24	; 39
    1584:	cc 24       	eor	r12, r12
    1586:	dd 24       	eor	r13, r13
    1588:	c0 e2       	ldi	r28, 0x20	; 32
    158a:	d0 e0       	ldi	r29, 0x00	; 0

	//read low gain sensor calibration data from eeprom, store in sensor_cal_data_low[]
	for(int i=0;i<14;i++)
	{
		
		sensor_cal_data_low[i]=eeprom_read_byte((uint8_t *) (ee_SENSOR_LOW+i*2));
    158c:	ce 01       	movw	r24, r28
    158e:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__eerd_byte_m328p>
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	86 01       	movw	r16, r12
    1596:	00 0f       	add	r16, r16
    1598:	11 1f       	adc	r17, r17
    159a:	0e 5d       	subi	r16, 0xDE	; 222
    159c:	1c 4f       	sbci	r17, 0xFC	; 252
    159e:	f8 01       	movw	r30, r16
    15a0:	91 83       	std	Z+1, r25	; 0x01
    15a2:	80 83       	st	Z, r24
		sensor_cal_data_low[i]=sensor_cal_data_low[i]<<8;
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	98 2f       	mov	r25, r24
    15aa:	88 27       	eor	r24, r24
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	80 83       	st	Z, r24
		sensor_cal_data_low[i]+=eeprom_read_byte((uint8_t *) (ee_SENSOR_LOW+i*2+1));
    15b0:	e0 80       	ld	r14, Z
    15b2:	f1 80       	ldd	r15, Z+1	; 0x01
    15b4:	ce 01       	movw	r24, r28
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__eerd_byte_m328p>
    15bc:	e8 0e       	add	r14, r24
    15be:	f1 1c       	adc	r15, r1
    15c0:	f8 01       	movw	r30, r16
    15c2:	f1 82       	std	Z+1, r15	; 0x01
    15c4:	e0 82       	st	Z, r14
	TCCR0B=0x05;
	TIMSK0=0x02;
	OCR0A=0xff;

	//read low gain sensor calibration data from eeprom, store in sensor_cal_data_low[]
	for(int i=0;i<14;i++)
    15c6:	08 94       	sec
    15c8:	c1 1c       	adc	r12, r1
    15ca:	d1 1c       	adc	r13, r1
    15cc:	22 96       	adiw	r28, 0x02	; 2
    15ce:	fe e0       	ldi	r31, 0x0E	; 14
    15d0:	cf 16       	cp	r12, r31
    15d2:	d1 04       	cpc	r13, r1
    15d4:	d9 f6       	brne	.-74     	; 0x158c <init_robot+0xf8>
    15d6:	cc 24       	eor	r12, r12
    15d8:	dd 24       	eor	r13, r13
    15da:	c0 e5       	ldi	r28, 0x50	; 80
    15dc:	d0 e0       	ldi	r29, 0x00	; 0
	}
	//read high gain sensor calibration data from eeprom, store in sensor_cal_data_high[]
	for(int i=0;i<14;i++)
	{
		
		sensor_cal_data_high[i]=eeprom_read_byte( (uint8_t *)(ee_SENSOR_HIGH+i*2));
    15de:	ce 01       	movw	r24, r28
    15e0:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__eerd_byte_m328p>
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	86 01       	movw	r16, r12
    15e8:	00 0f       	add	r16, r16
    15ea:	11 1f       	adc	r17, r17
    15ec:	0a 5f       	subi	r16, 0xFA	; 250
    15ee:	1c 4f       	sbci	r17, 0xFC	; 252
    15f0:	f8 01       	movw	r30, r16
    15f2:	91 83       	std	Z+1, r25	; 0x01
    15f4:	80 83       	st	Z, r24
		sensor_cal_data_high[i]=sensor_cal_data_high[i]<<8;
    15f6:	80 81       	ld	r24, Z
    15f8:	91 81       	ldd	r25, Z+1	; 0x01
    15fa:	98 2f       	mov	r25, r24
    15fc:	88 27       	eor	r24, r24
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	80 83       	st	Z, r24
		sensor_cal_data_high[i]+=eeprom_read_byte((uint8_t *) (ee_SENSOR_HIGH+i*2+1));
    1602:	e0 80       	ld	r14, Z
    1604:	f1 80       	ldd	r15, Z+1	; 0x01
    1606:	ce 01       	movw	r24, r28
    1608:	01 96       	adiw	r24, 0x01	; 1
    160a:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__eerd_byte_m328p>
    160e:	e8 0e       	add	r14, r24
    1610:	f1 1c       	adc	r15, r1
    1612:	f8 01       	movw	r30, r16
    1614:	f1 82       	std	Z+1, r15	; 0x01
    1616:	e0 82       	st	Z, r14
		sensor_cal_data_low[i]+=eeprom_read_byte((uint8_t *) (ee_SENSOR_LOW+i*2+1));
		

	}
	//read high gain sensor calibration data from eeprom, store in sensor_cal_data_high[]
	for(int i=0;i<14;i++)
    1618:	08 94       	sec
    161a:	c1 1c       	adc	r12, r1
    161c:	d1 1c       	adc	r13, r1
    161e:	22 96       	adiw	r28, 0x02	; 2
    1620:	fe e0       	ldi	r31, 0x0E	; 14
    1622:	cf 16       	cp	r12, r31
    1624:	d1 04       	cpc	r13, r1
    1626:	d9 f6       	brne	.-74     	; 0x15de <init_robot+0x14a>


	}

  	// Read the motor calibration data from eeprom
	cw_in_place = eeprom_read_byte((uint8_t *)ee_CW_IN_PLACE);
    1628:	84 e0       	ldi	r24, 0x04	; 4
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__eerd_byte_m328p>
    1630:	80 93 8d 03 	sts	0x038D, r24
	ccw_in_place = eeprom_read_byte((uint8_t *)ee_CCW_IN_PLACE);
    1634:	88 e0       	ldi	r24, 0x08	; 8
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__eerd_byte_m328p>
    163c:	80 93 03 03 	sts	0x0303, r24
	cw_in_straight = eeprom_read_byte((uint8_t *)ee_CW_IN_STRAIGHT);
    1640:	8b e0       	ldi	r24, 0x0B	; 11
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__eerd_byte_m328p>
    1648:	80 93 fc 02 	sts	0x02FC, r24
	ccw_in_straight = eeprom_read_byte((uint8_t *)ee_CCW_IN_STRAIGHT);
    164c:	83 e1       	ldi	r24, 0x13	; 19
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__eerd_byte_m328p>
    1654:	80 93 04 03 	sts	0x0304, r24

	//load transmission strength calibration data from eeprom
	tx_mask=eeprom_read_byte((uint8_t *) (ee_TX_MASK));
    1658:	80 e9       	ldi	r24, 0x90	; 144
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__eerd_byte_m328p>
    1660:	80 93 f9 02 	sts	0x02F9, r24

	//print out calibration data
	kprints("                    ");
    1664:	83 e4       	ldi	r24, 0x43	; 67
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
	kprints("Calibration data    ");
    166c:	88 e5       	ldi	r24, 0x58	; 88
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
	kprints("                    ");
    1674:	83 e4       	ldi	r24, 0x43	; 67
    1676:	91 e0       	ldi	r25, 0x01	; 1
    1678:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
	kprints("low gain          ");
    167c:	8d e6       	ldi	r24, 0x6D	; 109
    167e:	91 e0       	ldi	r25, 0x01	; 1
    1680:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
    1684:	c0 e0       	ldi	r28, 0x00	; 0
    1686:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<14;i++)
		kprinti(sensor_cal_data_low[i]);
    1688:	fe 01       	movw	r30, r28
    168a:	ee 0f       	add	r30, r30
    168c:	ff 1f       	adc	r31, r31
    168e:	ee 5d       	subi	r30, 0xDE	; 222
    1690:	fc 4f       	sbci	r31, 0xFC	; 252
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	0e 94 07 0a 	call	0x140e	; 0x140e <kprinti>
	//print out calibration data
	kprints("                    ");
	kprints("Calibration data    ");
	kprints("                    ");
	kprints("low gain          ");
	for(int i=0;i<14;i++)
    169a:	21 96       	adiw	r28, 0x01	; 1
    169c:	ce 30       	cpi	r28, 0x0E	; 14
    169e:	d1 05       	cpc	r29, r1
    16a0:	99 f7       	brne	.-26     	; 0x1688 <init_robot+0x1f4>
		kprinti(sensor_cal_data_low[i]);
	kprints("                    ");
    16a2:	83 e4       	ldi	r24, 0x43	; 67
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
	kprints("high gain          ");
    16aa:	80 e8       	ldi	r24, 0x80	; 128
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
    16b2:	c0 e0       	ldi	r28, 0x00	; 0
    16b4:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<14;i++)
		kprinti(sensor_cal_data_high[i]);
    16b6:	fe 01       	movw	r30, r28
    16b8:	ee 0f       	add	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	ea 5f       	subi	r30, 0xFA	; 250
    16be:	fc 4f       	sbci	r31, 0xFC	; 252
    16c0:	80 81       	ld	r24, Z
    16c2:	91 81       	ldd	r25, Z+1	; 0x01
    16c4:	0e 94 07 0a 	call	0x140e	; 0x140e <kprinti>
	kprints("low gain          ");
	for(int i=0;i<14;i++)
		kprinti(sensor_cal_data_low[i]);
	kprints("                    ");
	kprints("high gain          ");
	for(int i=0;i<14;i++)
    16c8:	21 96       	adiw	r28, 0x01	; 1
    16ca:	ce 30       	cpi	r28, 0x0E	; 14
    16cc:	d1 05       	cpc	r29, r1
    16ce:	99 f7       	brne	.-26     	; 0x16b6 <init_robot+0x222>
		kprinti(sensor_cal_data_high[i]);
	kprints("                    ");
    16d0:	83 e4       	ldi	r24, 0x43	; 67
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
	kprints("txmask     ");
    16d8:	84 e9       	ldi	r24, 0x94	; 148
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
	kprinti(tx_mask);
    16e0:	80 91 f9 02 	lds	r24, 0x02F9
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 07 0a 	call	0x140e	; 0x140e <kprinti>
	kprints("            ");
    16ea:	80 ea       	ldi	r24, 0xA0	; 160
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
	kprints("OSCCAL     ");
    16f2:	8d ea       	ldi	r24, 0xAD	; 173
    16f4:	91 e0       	ldi	r25, 0x01	; 1
    16f6:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
	kprinti(OSCCAL);
    16fa:	80 91 66 00 	lds	r24, 0x0066
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 07 0a 	call	0x140e	; 0x140e <kprinti>
	kprints("            ");
    1704:	80 ea       	ldi	r24, 0xA0	; 160
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
	kprints("program start");
    170c:	89 eb       	ldi	r24, 0xB9	; 185
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>
	kprints("            ");
    1714:	80 ea       	ldi	r24, 0xA0	; 160
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	0e 94 bc 07 	call	0xf78	; 0xf78 <kprints>

	//flash RGB LED red green blue quickly.. just to show the robot is now on.
	set_color(1,0,0);
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>
    1726:	88 eb       	ldi	r24, 0xB8	; 184
    1728:	9b e0       	ldi	r25, 0x0B	; 11
    172a:	28 ec       	ldi	r18, 0xC8	; 200
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	f9 01       	movw	r30, r18
    1730:	31 97       	sbiw	r30, 0x01	; 1
    1732:	f1 f7       	brne	.-4      	; 0x1730 <init_robot+0x29c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1734:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1736:	d9 f7       	brne	.-10     	; 0x172e <init_robot+0x29a>
	_delay_ms(300);
	set_color(0,1,0);
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>
    1742:	88 eb       	ldi	r24, 0xB8	; 184
    1744:	9b e0       	ldi	r25, 0x0B	; 11
    1746:	28 ec       	ldi	r18, 0xC8	; 200
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	f9 01       	movw	r30, r18
    174c:	31 97       	sbiw	r30, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <init_robot+0x2b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1750:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1752:	d9 f7       	brne	.-10     	; 0x174a <init_robot+0x2b6>
	_delay_ms(300);
	set_color(0,0,1);
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	41 e0       	ldi	r20, 0x01	; 1
    175a:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>
    175e:	88 eb       	ldi	r24, 0xB8	; 184
    1760:	9b e0       	ldi	r25, 0x0B	; 11
    1762:	28 ec       	ldi	r18, 0xC8	; 200
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	f9 01       	movw	r30, r18
    1768:	31 97       	sbiw	r30, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <init_robot+0x2d4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176e:	d9 f7       	brne	.-10     	; 0x1766 <init_robot+0x2d2>
	_delay_ms(300);
	set_color(0,0,0);
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	0e 94 9d 08 	call	0x113a	; 0x113a <set_color>
	
	//start robot so it doesnt send any ir messages
	enable_tx=0;
    177a:	10 92 d0 01 	sts	0x01D0, r1

	sei();//enable interrupts
    177e:	78 94       	sei
	
	//clear txvalue_buffer, so robot ignors any messages received before it was ready
	for(int i=0;i<4;i++)
		txvalue_buffer[5][i]=0;			
    1780:	10 92 69 03 	sts	0x0369, r1
    1784:	10 92 68 03 	sts	0x0368, r1
    1788:	10 92 6b 03 	sts	0x036B, r1
    178c:	10 92 6a 03 	sts	0x036A, r1
    1790:	10 92 6d 03 	sts	0x036D, r1
    1794:	10 92 6c 03 	sts	0x036C, r1
    1798:	10 92 6f 03 	sts	0x036F, r1
    179c:	10 92 6e 03 	sts	0x036E, r1
}
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	08 95       	ret

000017b2 <__vector_14>:
	
}


ISR(TIMER0_COMPA_vect)//timer interrupt attempts to send messages every fixed amount of time
{
    17b2:	1f 92       	push	r1
    17b4:	0f 92       	push	r0
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	0f 92       	push	r0
    17ba:	11 24       	eor	r1, r1
    17bc:	2f 93       	push	r18
    17be:	3f 93       	push	r19
    17c0:	4f 93       	push	r20
    17c2:	5f 93       	push	r21
    17c4:	6f 93       	push	r22
    17c6:	7f 93       	push	r23
    17c8:	8f 93       	push	r24
    17ca:	9f 93       	push	r25
    17cc:	af 93       	push	r26
    17ce:	bf 93       	push	r27
    17d0:	ef 93       	push	r30
    17d2:	ff 93       	push	r31
	static int clock_0=0;//varaible used to determine when to try transmitting agian
	tx_clock+=time_since_last;	
    17d4:	20 91 ee 02 	lds	r18, 0x02EE
    17d8:	30 91 ef 02 	lds	r19, 0x02EF
    17dc:	80 91 ec 02 	lds	r24, 0x02EC
    17e0:	90 91 ed 02 	lds	r25, 0x02ED
    17e4:	82 0f       	add	r24, r18
    17e6:	93 1f       	adc	r25, r19
    17e8:	90 93 ef 02 	sts	0x02EF, r25
    17ec:	80 93 ee 02 	sts	0x02EE, r24
	clock_0+=time_since_last;
    17f0:	20 91 ec 02 	lds	r18, 0x02EC
    17f4:	30 91 ed 02 	lds	r19, 0x02ED
    17f8:	80 91 fa 02 	lds	r24, 0x02FA
    17fc:	90 91 fb 02 	lds	r25, 0x02FB
    1800:	82 0f       	add	r24, r18
    1802:	93 1f       	adc	r25, r19
    1804:	90 93 fb 02 	sts	0x02FB, r25
    1808:	80 93 fa 02 	sts	0x02FA, r24
	clock_1+=time_since_last;
    180c:	20 91 e6 02 	lds	r18, 0x02E6
    1810:	30 91 e7 02 	lds	r19, 0x02E7
    1814:	80 91 ec 02 	lds	r24, 0x02EC
    1818:	90 91 ed 02 	lds	r25, 0x02ED
    181c:	82 0f       	add	r24, r18
    181e:	93 1f       	adc	r25, r19
    1820:	90 93 e7 02 	sts	0x02E7, r25
    1824:	80 93 e6 02 	sts	0x02E6, r24
	clock_3+=time_since_last;
    1828:	20 91 ea 02 	lds	r18, 0x02EA
    182c:	30 91 eb 02 	lds	r19, 0x02EB
    1830:	80 91 ec 02 	lds	r24, 0x02EC
    1834:	90 91 ed 02 	lds	r25, 0x02ED
    1838:	82 0f       	add	r24, r18
    183a:	93 1f       	adc	r25, r19
    183c:	90 93 eb 02 	sts	0x02EB, r25
    1840:	80 93 ea 02 	sts	0x02EA, r24
	clock+=time_since_last;
    1844:	20 91 f0 02 	lds	r18, 0x02F0
    1848:	30 91 f1 02 	lds	r19, 0x02F1
    184c:	80 91 ec 02 	lds	r24, 0x02EC
    1850:	90 91 ed 02 	lds	r25, 0x02ED
    1854:	82 0f       	add	r24, r18
    1856:	93 1f       	adc	r25, r19
    1858:	90 93 f1 02 	sts	0x02F1, r25
    185c:	80 93 f0 02 	sts	0x02F0, r24

	clock_2+=time_since_last/100;
    1860:	20 91 e8 02 	lds	r18, 0x02E8
    1864:	30 91 e9 02 	lds	r19, 0x02E9
    1868:	80 91 ec 02 	lds	r24, 0x02EC
    186c:	90 91 ed 02 	lds	r25, 0x02ED
    1870:	64 e6       	ldi	r22, 0x64	; 100
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	0e 94 81 13 	call	0x2702	; 0x2702 <__divmodhi4>
    1878:	26 0f       	add	r18, r22
    187a:	37 1f       	adc	r19, r23
    187c:	30 93 e9 02 	sts	0x02E9, r19
    1880:	20 93 e8 02 	sts	0x02E8, r18
	if(clock_2>32000)
    1884:	80 91 e8 02 	lds	r24, 0x02E8
    1888:	90 91 e9 02 	lds	r25, 0x02E9
    188c:	81 50       	subi	r24, 0x01	; 1
    188e:	9d 47       	sbci	r25, 0x7D	; 125
    1890:	20 f0       	brcs	.+8      	; 0x189a <__vector_14+0xe8>
		clock_2=0;
    1892:	10 92 e9 02 	sts	0x02E9, r1
    1896:	10 92 e8 02 	sts	0x02E8, r1
	time_since_last=0xff;	
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	90 93 ed 02 	sts	0x02ED, r25
    18a2:	80 93 ec 02 	sts	0x02EC, r24

	OCR0A=0xff;
    18a6:	8f ef       	ldi	r24, 0xFF	; 255
    18a8:	87 bd       	out	0x27, r24	; 39

	if(tx_clock>550)
    18aa:	80 91 ee 02 	lds	r24, 0x02EE
    18ae:	90 91 ef 02 	lds	r25, 0x02EF
    18b2:	87 52       	subi	r24, 0x27	; 39
    18b4:	92 40       	sbci	r25, 0x02	; 2
    18b6:	6c f1       	brlt	.+90     	; 0x1912 <__vector_14+0x160>
		if(enable_tx==1)
    18b8:	80 91 d0 01 	lds	r24, 0x01D0
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	49 f5       	brne	.+82     	; 0x1912 <__vector_14+0x160>
		{
			int return_value;
	
		
			if(message_incoming==0)
    18c0:	80 91 e4 02 	lds	r24, 0x02E4
    18c4:	90 91 e5 02 	lds	r25, 0x02E5
    18c8:	89 2b       	or	r24, r25
    18ca:	a1 f4       	brne	.+40     	; 0x18f4 <__vector_14+0x142>
			{
			//	set_color(1,0,0);
				return_value=send_message(message_tx0,message_tx1,message_tx2);//try to send the message
    18cc:	80 91 c9 01 	lds	r24, 0x01C9
    18d0:	60 91 ca 01 	lds	r22, 0x01CA
    18d4:	40 91 cb 01 	lds	r20, 0x01CB
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	0e 94 4f 02 	call	0x49e	; 0x49e <send_message>
			}
			else
				return_value=3;
	
	
			if(return_value==0)//collision detected during transmission
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	39 f0       	breq	.+14     	; 0x18f4 <__vector_14+0x142>
			
				time_since_last=rand()%255;
				OCR0A=time_since_last;//set next try to be a random time between 0.000128 and 0.03264 seconds later

			}
			else if(return_value==1)//sucessfull send
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	29 f4       	brne	.+10     	; 0x18f4 <__vector_14+0x142>
			{
		
				tx_clock=0;
    18ea:	10 92 ef 02 	sts	0x02EF, r1
    18ee:	10 92 ee 02 	sts	0x02EE, r1
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <__vector_14+0x160>
			
			}
			else//channel aready in use
			{
				time_since_last=rand()%255;
    18f4:	0e 94 30 14 	call	0x2860	; 0x2860 <rand>
    18f8:	6f ef       	ldi	r22, 0xFF	; 255
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	0e 94 81 13 	call	0x2702	; 0x2702 <__divmodhi4>
    1900:	90 93 ed 02 	sts	0x02ED, r25
    1904:	80 93 ec 02 	sts	0x02EC, r24
				OCR0A=time_since_last;//set next try to be a random time between 0.000128 and 0.03264 seconds later
    1908:	80 91 ec 02 	lds	r24, 0x02EC
    190c:	90 91 ed 02 	lds	r25, 0x02ED
    1910:	87 bd       	out	0x27, r24	; 39
	
		}

	//this is part of the system that makes sure you receive multiple special message from the over head controller
	//within a short time.. this ensures corrupt messages do not trigger a special message mode 
	if(clock_0>2295)
    1912:	80 91 fa 02 	lds	r24, 0x02FA
    1916:	90 91 fb 02 	lds	r25, 0x02FB
    191a:	88 5f       	subi	r24, 0xF8	; 248
    191c:	98 40       	sbci	r25, 0x08	; 8
    191e:	a4 f0       	brlt	.+40     	; 0x1948 <__vector_14+0x196>
	{
		clock_0=0;
    1920:	10 92 fb 02 	sts	0x02FB, r1
    1924:	10 92 fa 02 	sts	0x02FA, r1
		special_message_buffer[0]=0;
    1928:	10 92 fe 02 	sts	0x02FE, r1
    192c:	10 92 fd 02 	sts	0x02FD, r1
		special_message_buffer[1]=0;
    1930:	10 92 00 03 	sts	0x0300, r1
    1934:	10 92 ff 02 	sts	0x02FF, r1
		special_message_buffer[2]=0;
    1938:	10 92 02 03 	sts	0x0302, r1
    193c:	10 92 01 03 	sts	0x0301, r1
		special_message_pointer=0;
    1940:	10 92 f3 02 	sts	0x02F3, r1
    1944:	10 92 f2 02 	sts	0x02F2, r1
	}

}
    1948:	ff 91       	pop	r31
    194a:	ef 91       	pop	r30
    194c:	bf 91       	pop	r27
    194e:	af 91       	pop	r26
    1950:	9f 91       	pop	r25
    1952:	8f 91       	pop	r24
    1954:	7f 91       	pop	r23
    1956:	6f 91       	pop	r22
    1958:	5f 91       	pop	r21
    195a:	4f 91       	pop	r20
    195c:	3f 91       	pop	r19
    195e:	2f 91       	pop	r18
    1960:	0f 90       	pop	r0
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	0f 90       	pop	r0
    1966:	1f 90       	pop	r1
    1968:	18 95       	reti

0000196a <__fixunssfsi>:
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	7b 01       	movw	r14, r22
    1974:	8c 01       	movw	r16, r24
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	5f e4       	ldi	r21, 0x4F	; 79
    197e:	0e 94 31 10 	call	0x2062	; 0x2062 <__gesf2>
    1982:	88 23       	and	r24, r24
    1984:	8c f0       	brlt	.+34     	; 0x19a8 <__fixunssfsi+0x3e>
    1986:	c8 01       	movw	r24, r16
    1988:	b7 01       	movw	r22, r14
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	5f e4       	ldi	r21, 0x4F	; 79
    1992:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__subsf3>
    1996:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixsfsi>
    199a:	9b 01       	movw	r18, r22
    199c:	ac 01       	movw	r20, r24
    199e:	20 50       	subi	r18, 0x00	; 0
    19a0:	30 40       	sbci	r19, 0x00	; 0
    19a2:	40 40       	sbci	r20, 0x00	; 0
    19a4:	50 48       	sbci	r21, 0x80	; 128
    19a6:	06 c0       	rjmp	.+12     	; 0x19b4 <__fixunssfsi+0x4a>
    19a8:	c8 01       	movw	r24, r16
    19aa:	b7 01       	movw	r22, r14
    19ac:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixsfsi>
    19b0:	9b 01       	movw	r18, r22
    19b2:	ac 01       	movw	r20, r24
    19b4:	b9 01       	movw	r22, r18
    19b6:	ca 01       	movw	r24, r20
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	08 95       	ret

000019c2 <_fpadd_parts>:
    19c2:	a0 e0       	ldi	r26, 0x00	; 0
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e7 ee       	ldi	r30, 0xE7	; 231
    19c8:	fc e0       	ldi	r31, 0x0C	; 12
    19ca:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__prologue_saves__>
    19ce:	dc 01       	movw	r26, r24
    19d0:	2b 01       	movw	r4, r22
    19d2:	fa 01       	movw	r30, r20
    19d4:	9c 91       	ld	r25, X
    19d6:	92 30       	cpi	r25, 0x02	; 2
    19d8:	08 f4       	brcc	.+2      	; 0x19dc <_fpadd_parts+0x1a>
    19da:	39 c1       	rjmp	.+626    	; 0x1c4e <_fpadd_parts+0x28c>
    19dc:	eb 01       	movw	r28, r22
    19de:	88 81       	ld	r24, Y
    19e0:	82 30       	cpi	r24, 0x02	; 2
    19e2:	08 f4       	brcc	.+2      	; 0x19e6 <_fpadd_parts+0x24>
    19e4:	33 c1       	rjmp	.+614    	; 0x1c4c <_fpadd_parts+0x28a>
    19e6:	94 30       	cpi	r25, 0x04	; 4
    19e8:	69 f4       	brne	.+26     	; 0x1a04 <_fpadd_parts+0x42>
    19ea:	84 30       	cpi	r24, 0x04	; 4
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <_fpadd_parts+0x2e>
    19ee:	2f c1       	rjmp	.+606    	; 0x1c4e <_fpadd_parts+0x28c>
    19f0:	11 96       	adiw	r26, 0x01	; 1
    19f2:	9c 91       	ld	r25, X
    19f4:	11 97       	sbiw	r26, 0x01	; 1
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	98 17       	cp	r25, r24
    19fa:	09 f4       	brne	.+2      	; 0x19fe <_fpadd_parts+0x3c>
    19fc:	28 c1       	rjmp	.+592    	; 0x1c4e <_fpadd_parts+0x28c>
    19fe:	a1 ed       	ldi	r26, 0xD1	; 209
    1a00:	b1 e0       	ldi	r27, 0x01	; 1
    1a02:	25 c1       	rjmp	.+586    	; 0x1c4e <_fpadd_parts+0x28c>
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <_fpadd_parts+0x48>
    1a08:	21 c1       	rjmp	.+578    	; 0x1c4c <_fpadd_parts+0x28a>
    1a0a:	82 30       	cpi	r24, 0x02	; 2
    1a0c:	a9 f4       	brne	.+42     	; 0x1a38 <_fpadd_parts+0x76>
    1a0e:	92 30       	cpi	r25, 0x02	; 2
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <_fpadd_parts+0x52>
    1a12:	1d c1       	rjmp	.+570    	; 0x1c4e <_fpadd_parts+0x28c>
    1a14:	9a 01       	movw	r18, r20
    1a16:	ad 01       	movw	r20, r26
    1a18:	88 e0       	ldi	r24, 0x08	; 8
    1a1a:	ea 01       	movw	r28, r20
    1a1c:	09 90       	ld	r0, Y+
    1a1e:	ae 01       	movw	r20, r28
    1a20:	e9 01       	movw	r28, r18
    1a22:	09 92       	st	Y+, r0
    1a24:	9e 01       	movw	r18, r28
    1a26:	81 50       	subi	r24, 0x01	; 1
    1a28:	c1 f7       	brne	.-16     	; 0x1a1a <_fpadd_parts+0x58>
    1a2a:	e2 01       	movw	r28, r4
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	11 96       	adiw	r26, 0x01	; 1
    1a30:	9c 91       	ld	r25, X
    1a32:	89 23       	and	r24, r25
    1a34:	81 83       	std	Z+1, r24	; 0x01
    1a36:	08 c1       	rjmp	.+528    	; 0x1c48 <_fpadd_parts+0x286>
    1a38:	92 30       	cpi	r25, 0x02	; 2
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <_fpadd_parts+0x7c>
    1a3c:	07 c1       	rjmp	.+526    	; 0x1c4c <_fpadd_parts+0x28a>
    1a3e:	12 96       	adiw	r26, 0x02	; 2
    1a40:	2d 90       	ld	r2, X+
    1a42:	3c 90       	ld	r3, X
    1a44:	13 97       	sbiw	r26, 0x03	; 3
    1a46:	eb 01       	movw	r28, r22
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4c:	14 96       	adiw	r26, 0x04	; 4
    1a4e:	ad 90       	ld	r10, X+
    1a50:	bd 90       	ld	r11, X+
    1a52:	cd 90       	ld	r12, X+
    1a54:	dc 90       	ld	r13, X
    1a56:	17 97       	sbiw	r26, 0x07	; 7
    1a58:	ec 80       	ldd	r14, Y+4	; 0x04
    1a5a:	fd 80       	ldd	r15, Y+5	; 0x05
    1a5c:	0e 81       	ldd	r16, Y+6	; 0x06
    1a5e:	1f 81       	ldd	r17, Y+7	; 0x07
    1a60:	91 01       	movw	r18, r2
    1a62:	28 1b       	sub	r18, r24
    1a64:	39 0b       	sbc	r19, r25
    1a66:	b9 01       	movw	r22, r18
    1a68:	37 ff       	sbrs	r19, 7
    1a6a:	04 c0       	rjmp	.+8      	; 0x1a74 <_fpadd_parts+0xb2>
    1a6c:	66 27       	eor	r22, r22
    1a6e:	77 27       	eor	r23, r23
    1a70:	62 1b       	sub	r22, r18
    1a72:	73 0b       	sbc	r23, r19
    1a74:	60 32       	cpi	r22, 0x20	; 32
    1a76:	71 05       	cpc	r23, r1
    1a78:	0c f0       	brlt	.+2      	; 0x1a7c <_fpadd_parts+0xba>
    1a7a:	61 c0       	rjmp	.+194    	; 0x1b3e <_fpadd_parts+0x17c>
    1a7c:	12 16       	cp	r1, r18
    1a7e:	13 06       	cpc	r1, r19
    1a80:	6c f5       	brge	.+90     	; 0x1adc <_fpadd_parts+0x11a>
    1a82:	37 01       	movw	r6, r14
    1a84:	48 01       	movw	r8, r16
    1a86:	06 2e       	mov	r0, r22
    1a88:	04 c0       	rjmp	.+8      	; 0x1a92 <_fpadd_parts+0xd0>
    1a8a:	96 94       	lsr	r9
    1a8c:	87 94       	ror	r8
    1a8e:	77 94       	ror	r7
    1a90:	67 94       	ror	r6
    1a92:	0a 94       	dec	r0
    1a94:	d2 f7       	brpl	.-12     	; 0x1a8a <_fpadd_parts+0xc8>
    1a96:	21 e0       	ldi	r18, 0x01	; 1
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	04 c0       	rjmp	.+8      	; 0x1aa8 <_fpadd_parts+0xe6>
    1aa0:	22 0f       	add	r18, r18
    1aa2:	33 1f       	adc	r19, r19
    1aa4:	44 1f       	adc	r20, r20
    1aa6:	55 1f       	adc	r21, r21
    1aa8:	6a 95       	dec	r22
    1aaa:	d2 f7       	brpl	.-12     	; 0x1aa0 <_fpadd_parts+0xde>
    1aac:	21 50       	subi	r18, 0x01	; 1
    1aae:	30 40       	sbci	r19, 0x00	; 0
    1ab0:	40 40       	sbci	r20, 0x00	; 0
    1ab2:	50 40       	sbci	r21, 0x00	; 0
    1ab4:	2e 21       	and	r18, r14
    1ab6:	3f 21       	and	r19, r15
    1ab8:	40 23       	and	r20, r16
    1aba:	51 23       	and	r21, r17
    1abc:	21 15       	cp	r18, r1
    1abe:	31 05       	cpc	r19, r1
    1ac0:	41 05       	cpc	r20, r1
    1ac2:	51 05       	cpc	r21, r1
    1ac4:	21 f0       	breq	.+8      	; 0x1ace <_fpadd_parts+0x10c>
    1ac6:	21 e0       	ldi	r18, 0x01	; 1
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	50 e0       	ldi	r21, 0x00	; 0
    1ace:	79 01       	movw	r14, r18
    1ad0:	8a 01       	movw	r16, r20
    1ad2:	e6 28       	or	r14, r6
    1ad4:	f7 28       	or	r15, r7
    1ad6:	08 29       	or	r16, r8
    1ad8:	19 29       	or	r17, r9
    1ada:	3c c0       	rjmp	.+120    	; 0x1b54 <_fpadd_parts+0x192>
    1adc:	23 2b       	or	r18, r19
    1ade:	d1 f1       	breq	.+116    	; 0x1b54 <_fpadd_parts+0x192>
    1ae0:	26 0e       	add	r2, r22
    1ae2:	37 1e       	adc	r3, r23
    1ae4:	35 01       	movw	r6, r10
    1ae6:	46 01       	movw	r8, r12
    1ae8:	06 2e       	mov	r0, r22
    1aea:	04 c0       	rjmp	.+8      	; 0x1af4 <_fpadd_parts+0x132>
    1aec:	96 94       	lsr	r9
    1aee:	87 94       	ror	r8
    1af0:	77 94       	ror	r7
    1af2:	67 94       	ror	r6
    1af4:	0a 94       	dec	r0
    1af6:	d2 f7       	brpl	.-12     	; 0x1aec <_fpadd_parts+0x12a>
    1af8:	21 e0       	ldi	r18, 0x01	; 1
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	50 e0       	ldi	r21, 0x00	; 0
    1b00:	04 c0       	rjmp	.+8      	; 0x1b0a <_fpadd_parts+0x148>
    1b02:	22 0f       	add	r18, r18
    1b04:	33 1f       	adc	r19, r19
    1b06:	44 1f       	adc	r20, r20
    1b08:	55 1f       	adc	r21, r21
    1b0a:	6a 95       	dec	r22
    1b0c:	d2 f7       	brpl	.-12     	; 0x1b02 <_fpadd_parts+0x140>
    1b0e:	21 50       	subi	r18, 0x01	; 1
    1b10:	30 40       	sbci	r19, 0x00	; 0
    1b12:	40 40       	sbci	r20, 0x00	; 0
    1b14:	50 40       	sbci	r21, 0x00	; 0
    1b16:	2a 21       	and	r18, r10
    1b18:	3b 21       	and	r19, r11
    1b1a:	4c 21       	and	r20, r12
    1b1c:	5d 21       	and	r21, r13
    1b1e:	21 15       	cp	r18, r1
    1b20:	31 05       	cpc	r19, r1
    1b22:	41 05       	cpc	r20, r1
    1b24:	51 05       	cpc	r21, r1
    1b26:	21 f0       	breq	.+8      	; 0x1b30 <_fpadd_parts+0x16e>
    1b28:	21 e0       	ldi	r18, 0x01	; 1
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	59 01       	movw	r10, r18
    1b32:	6a 01       	movw	r12, r20
    1b34:	a6 28       	or	r10, r6
    1b36:	b7 28       	or	r11, r7
    1b38:	c8 28       	or	r12, r8
    1b3a:	d9 28       	or	r13, r9
    1b3c:	0b c0       	rjmp	.+22     	; 0x1b54 <_fpadd_parts+0x192>
    1b3e:	82 15       	cp	r24, r2
    1b40:	93 05       	cpc	r25, r3
    1b42:	2c f0       	brlt	.+10     	; 0x1b4e <_fpadd_parts+0x18c>
    1b44:	1c 01       	movw	r2, r24
    1b46:	aa 24       	eor	r10, r10
    1b48:	bb 24       	eor	r11, r11
    1b4a:	65 01       	movw	r12, r10
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <_fpadd_parts+0x192>
    1b4e:	ee 24       	eor	r14, r14
    1b50:	ff 24       	eor	r15, r15
    1b52:	87 01       	movw	r16, r14
    1b54:	11 96       	adiw	r26, 0x01	; 1
    1b56:	9c 91       	ld	r25, X
    1b58:	d2 01       	movw	r26, r4
    1b5a:	11 96       	adiw	r26, 0x01	; 1
    1b5c:	8c 91       	ld	r24, X
    1b5e:	98 17       	cp	r25, r24
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <_fpadd_parts+0x1a2>
    1b62:	45 c0       	rjmp	.+138    	; 0x1bee <_fpadd_parts+0x22c>
    1b64:	99 23       	and	r25, r25
    1b66:	39 f0       	breq	.+14     	; 0x1b76 <_fpadd_parts+0x1b4>
    1b68:	a8 01       	movw	r20, r16
    1b6a:	97 01       	movw	r18, r14
    1b6c:	2a 19       	sub	r18, r10
    1b6e:	3b 09       	sbc	r19, r11
    1b70:	4c 09       	sbc	r20, r12
    1b72:	5d 09       	sbc	r21, r13
    1b74:	06 c0       	rjmp	.+12     	; 0x1b82 <_fpadd_parts+0x1c0>
    1b76:	a6 01       	movw	r20, r12
    1b78:	95 01       	movw	r18, r10
    1b7a:	2e 19       	sub	r18, r14
    1b7c:	3f 09       	sbc	r19, r15
    1b7e:	40 0b       	sbc	r20, r16
    1b80:	51 0b       	sbc	r21, r17
    1b82:	57 fd       	sbrc	r21, 7
    1b84:	08 c0       	rjmp	.+16     	; 0x1b96 <_fpadd_parts+0x1d4>
    1b86:	11 82       	std	Z+1, r1	; 0x01
    1b88:	33 82       	std	Z+3, r3	; 0x03
    1b8a:	22 82       	std	Z+2, r2	; 0x02
    1b8c:	24 83       	std	Z+4, r18	; 0x04
    1b8e:	35 83       	std	Z+5, r19	; 0x05
    1b90:	46 83       	std	Z+6, r20	; 0x06
    1b92:	57 83       	std	Z+7, r21	; 0x07
    1b94:	1d c0       	rjmp	.+58     	; 0x1bd0 <_fpadd_parts+0x20e>
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	81 83       	std	Z+1, r24	; 0x01
    1b9a:	33 82       	std	Z+3, r3	; 0x03
    1b9c:	22 82       	std	Z+2, r2	; 0x02
    1b9e:	88 27       	eor	r24, r24
    1ba0:	99 27       	eor	r25, r25
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	82 1b       	sub	r24, r18
    1ba6:	93 0b       	sbc	r25, r19
    1ba8:	a4 0b       	sbc	r26, r20
    1baa:	b5 0b       	sbc	r27, r21
    1bac:	84 83       	std	Z+4, r24	; 0x04
    1bae:	95 83       	std	Z+5, r25	; 0x05
    1bb0:	a6 83       	std	Z+6, r26	; 0x06
    1bb2:	b7 83       	std	Z+7, r27	; 0x07
    1bb4:	0d c0       	rjmp	.+26     	; 0x1bd0 <_fpadd_parts+0x20e>
    1bb6:	22 0f       	add	r18, r18
    1bb8:	33 1f       	adc	r19, r19
    1bba:	44 1f       	adc	r20, r20
    1bbc:	55 1f       	adc	r21, r21
    1bbe:	24 83       	std	Z+4, r18	; 0x04
    1bc0:	35 83       	std	Z+5, r19	; 0x05
    1bc2:	46 83       	std	Z+6, r20	; 0x06
    1bc4:	57 83       	std	Z+7, r21	; 0x07
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	93 83       	std	Z+3, r25	; 0x03
    1bce:	82 83       	std	Z+2, r24	; 0x02
    1bd0:	24 81       	ldd	r18, Z+4	; 0x04
    1bd2:	35 81       	ldd	r19, Z+5	; 0x05
    1bd4:	46 81       	ldd	r20, Z+6	; 0x06
    1bd6:	57 81       	ldd	r21, Z+7	; 0x07
    1bd8:	da 01       	movw	r26, r20
    1bda:	c9 01       	movw	r24, r18
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	a1 09       	sbc	r26, r1
    1be0:	b1 09       	sbc	r27, r1
    1be2:	8f 5f       	subi	r24, 0xFF	; 255
    1be4:	9f 4f       	sbci	r25, 0xFF	; 255
    1be6:	af 4f       	sbci	r26, 0xFF	; 255
    1be8:	bf 43       	sbci	r27, 0x3F	; 63
    1bea:	28 f3       	brcs	.-54     	; 0x1bb6 <_fpadd_parts+0x1f4>
    1bec:	0b c0       	rjmp	.+22     	; 0x1c04 <_fpadd_parts+0x242>
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	33 82       	std	Z+3, r3	; 0x03
    1bf2:	22 82       	std	Z+2, r2	; 0x02
    1bf4:	ea 0c       	add	r14, r10
    1bf6:	fb 1c       	adc	r15, r11
    1bf8:	0c 1d       	adc	r16, r12
    1bfa:	1d 1d       	adc	r17, r13
    1bfc:	e4 82       	std	Z+4, r14	; 0x04
    1bfe:	f5 82       	std	Z+5, r15	; 0x05
    1c00:	06 83       	std	Z+6, r16	; 0x06
    1c02:	17 83       	std	Z+7, r17	; 0x07
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	80 83       	st	Z, r24
    1c08:	24 81       	ldd	r18, Z+4	; 0x04
    1c0a:	35 81       	ldd	r19, Z+5	; 0x05
    1c0c:	46 81       	ldd	r20, Z+6	; 0x06
    1c0e:	57 81       	ldd	r21, Z+7	; 0x07
    1c10:	57 ff       	sbrs	r21, 7
    1c12:	1a c0       	rjmp	.+52     	; 0x1c48 <_fpadd_parts+0x286>
    1c14:	c9 01       	movw	r24, r18
    1c16:	aa 27       	eor	r26, r26
    1c18:	97 fd       	sbrc	r25, 7
    1c1a:	a0 95       	com	r26
    1c1c:	ba 2f       	mov	r27, r26
    1c1e:	81 70       	andi	r24, 0x01	; 1
    1c20:	90 70       	andi	r25, 0x00	; 0
    1c22:	a0 70       	andi	r26, 0x00	; 0
    1c24:	b0 70       	andi	r27, 0x00	; 0
    1c26:	56 95       	lsr	r21
    1c28:	47 95       	ror	r20
    1c2a:	37 95       	ror	r19
    1c2c:	27 95       	ror	r18
    1c2e:	82 2b       	or	r24, r18
    1c30:	93 2b       	or	r25, r19
    1c32:	a4 2b       	or	r26, r20
    1c34:	b5 2b       	or	r27, r21
    1c36:	84 83       	std	Z+4, r24	; 0x04
    1c38:	95 83       	std	Z+5, r25	; 0x05
    1c3a:	a6 83       	std	Z+6, r26	; 0x06
    1c3c:	b7 83       	std	Z+7, r27	; 0x07
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	93 83       	std	Z+3, r25	; 0x03
    1c46:	82 83       	std	Z+2, r24	; 0x02
    1c48:	df 01       	movw	r26, r30
    1c4a:	01 c0       	rjmp	.+2      	; 0x1c4e <_fpadd_parts+0x28c>
    1c4c:	d2 01       	movw	r26, r4
    1c4e:	cd 01       	movw	r24, r26
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	e2 e1       	ldi	r30, 0x12	; 18
    1c56:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__epilogue_restores__>

00001c5a <__subsf3>:
    1c5a:	a0 e2       	ldi	r26, 0x20	; 32
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e3 e3       	ldi	r30, 0x33	; 51
    1c60:	fe e0       	ldi	r31, 0x0E	; 14
    1c62:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__prologue_saves__+0x18>
    1c66:	69 83       	std	Y+1, r22	; 0x01
    1c68:	7a 83       	std	Y+2, r23	; 0x02
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
    1c6c:	9c 83       	std	Y+4, r25	; 0x04
    1c6e:	2d 83       	std	Y+5, r18	; 0x05
    1c70:	3e 83       	std	Y+6, r19	; 0x06
    1c72:	4f 83       	std	Y+7, r20	; 0x07
    1c74:	58 87       	std	Y+8, r21	; 0x08
    1c76:	e9 e0       	ldi	r30, 0x09	; 9
    1c78:	ee 2e       	mov	r14, r30
    1c7a:	f1 2c       	mov	r15, r1
    1c7c:	ec 0e       	add	r14, r28
    1c7e:	fd 1e       	adc	r15, r29
    1c80:	ce 01       	movw	r24, r28
    1c82:	01 96       	adiw	r24, 0x01	; 1
    1c84:	b7 01       	movw	r22, r14
    1c86:	0e 94 b0 12 	call	0x2560	; 0x2560 <__unpack_f>
    1c8a:	8e 01       	movw	r16, r28
    1c8c:	0f 5e       	subi	r16, 0xEF	; 239
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c90:	ce 01       	movw	r24, r28
    1c92:	05 96       	adiw	r24, 0x05	; 5
    1c94:	b8 01       	movw	r22, r16
    1c96:	0e 94 b0 12 	call	0x2560	; 0x2560 <__unpack_f>
    1c9a:	8a 89       	ldd	r24, Y+18	; 0x12
    1c9c:	91 e0       	ldi	r25, 0x01	; 1
    1c9e:	89 27       	eor	r24, r25
    1ca0:	8a 8b       	std	Y+18, r24	; 0x12
    1ca2:	c7 01       	movw	r24, r14
    1ca4:	b8 01       	movw	r22, r16
    1ca6:	ae 01       	movw	r20, r28
    1ca8:	47 5e       	subi	r20, 0xE7	; 231
    1caa:	5f 4f       	sbci	r21, 0xFF	; 255
    1cac:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_fpadd_parts>
    1cb0:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__pack_f>
    1cb4:	a0 96       	adiw	r28, 0x20	; 32
    1cb6:	e6 e0       	ldi	r30, 0x06	; 6
    1cb8:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__epilogue_restores__+0x18>

00001cbc <__addsf3>:
    1cbc:	a0 e2       	ldi	r26, 0x20	; 32
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e4 e6       	ldi	r30, 0x64	; 100
    1cc2:	fe e0       	ldi	r31, 0x0E	; 14
    1cc4:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__prologue_saves__+0x18>
    1cc8:	69 83       	std	Y+1, r22	; 0x01
    1cca:	7a 83       	std	Y+2, r23	; 0x02
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
    1cce:	9c 83       	std	Y+4, r25	; 0x04
    1cd0:	2d 83       	std	Y+5, r18	; 0x05
    1cd2:	3e 83       	std	Y+6, r19	; 0x06
    1cd4:	4f 83       	std	Y+7, r20	; 0x07
    1cd6:	58 87       	std	Y+8, r21	; 0x08
    1cd8:	f9 e0       	ldi	r31, 0x09	; 9
    1cda:	ef 2e       	mov	r14, r31
    1cdc:	f1 2c       	mov	r15, r1
    1cde:	ec 0e       	add	r14, r28
    1ce0:	fd 1e       	adc	r15, r29
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	b7 01       	movw	r22, r14
    1ce8:	0e 94 b0 12 	call	0x2560	; 0x2560 <__unpack_f>
    1cec:	8e 01       	movw	r16, r28
    1cee:	0f 5e       	subi	r16, 0xEF	; 239
    1cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	05 96       	adiw	r24, 0x05	; 5
    1cf6:	b8 01       	movw	r22, r16
    1cf8:	0e 94 b0 12 	call	0x2560	; 0x2560 <__unpack_f>
    1cfc:	c7 01       	movw	r24, r14
    1cfe:	b8 01       	movw	r22, r16
    1d00:	ae 01       	movw	r20, r28
    1d02:	47 5e       	subi	r20, 0xE7	; 231
    1d04:	5f 4f       	sbci	r21, 0xFF	; 255
    1d06:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_fpadd_parts>
    1d0a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__pack_f>
    1d0e:	a0 96       	adiw	r28, 0x20	; 32
    1d10:	e6 e0       	ldi	r30, 0x06	; 6
    1d12:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__epilogue_restores__+0x18>

00001d16 <__mulsf3>:
    1d16:	a0 e2       	ldi	r26, 0x20	; 32
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e1 e9       	ldi	r30, 0x91	; 145
    1d1c:	fe e0       	ldi	r31, 0x0E	; 14
    1d1e:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__prologue_saves__>
    1d22:	69 83       	std	Y+1, r22	; 0x01
    1d24:	7a 83       	std	Y+2, r23	; 0x02
    1d26:	8b 83       	std	Y+3, r24	; 0x03
    1d28:	9c 83       	std	Y+4, r25	; 0x04
    1d2a:	2d 83       	std	Y+5, r18	; 0x05
    1d2c:	3e 83       	std	Y+6, r19	; 0x06
    1d2e:	4f 83       	std	Y+7, r20	; 0x07
    1d30:	58 87       	std	Y+8, r21	; 0x08
    1d32:	ce 01       	movw	r24, r28
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	be 01       	movw	r22, r28
    1d38:	67 5f       	subi	r22, 0xF7	; 247
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	0e 94 b0 12 	call	0x2560	; 0x2560 <__unpack_f>
    1d40:	ce 01       	movw	r24, r28
    1d42:	05 96       	adiw	r24, 0x05	; 5
    1d44:	be 01       	movw	r22, r28
    1d46:	6f 5e       	subi	r22, 0xEF	; 239
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	0e 94 b0 12 	call	0x2560	; 0x2560 <__unpack_f>
    1d4e:	99 85       	ldd	r25, Y+9	; 0x09
    1d50:	92 30       	cpi	r25, 0x02	; 2
    1d52:	88 f0       	brcs	.+34     	; 0x1d76 <__mulsf3+0x60>
    1d54:	89 89       	ldd	r24, Y+17	; 0x11
    1d56:	82 30       	cpi	r24, 0x02	; 2
    1d58:	c8 f0       	brcs	.+50     	; 0x1d8c <__mulsf3+0x76>
    1d5a:	94 30       	cpi	r25, 0x04	; 4
    1d5c:	19 f4       	brne	.+6      	; 0x1d64 <__mulsf3+0x4e>
    1d5e:	82 30       	cpi	r24, 0x02	; 2
    1d60:	51 f4       	brne	.+20     	; 0x1d76 <__mulsf3+0x60>
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <__mulsf3+0x56>
    1d64:	84 30       	cpi	r24, 0x04	; 4
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <__mulsf3+0x5c>
    1d68:	92 30       	cpi	r25, 0x02	; 2
    1d6a:	81 f4       	brne	.+32     	; 0x1d8c <__mulsf3+0x76>
    1d6c:	81 ed       	ldi	r24, 0xD1	; 209
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	c6 c0       	rjmp	.+396    	; 0x1efe <__mulsf3+0x1e8>
    1d72:	92 30       	cpi	r25, 0x02	; 2
    1d74:	49 f4       	brne	.+18     	; 0x1d88 <__mulsf3+0x72>
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	8a 89       	ldd	r24, Y+18	; 0x12
    1d7c:	98 13       	cpse	r25, r24
    1d7e:	21 e0       	ldi	r18, 0x01	; 1
    1d80:	2a 87       	std	Y+10, r18	; 0x0a
    1d82:	ce 01       	movw	r24, r28
    1d84:	09 96       	adiw	r24, 0x09	; 9
    1d86:	bb c0       	rjmp	.+374    	; 0x1efe <__mulsf3+0x1e8>
    1d88:	82 30       	cpi	r24, 0x02	; 2
    1d8a:	49 f4       	brne	.+18     	; 0x1d9e <__mulsf3+0x88>
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d90:	8a 89       	ldd	r24, Y+18	; 0x12
    1d92:	98 13       	cpse	r25, r24
    1d94:	21 e0       	ldi	r18, 0x01	; 1
    1d96:	2a 8b       	std	Y+18, r18	; 0x12
    1d98:	ce 01       	movw	r24, r28
    1d9a:	41 96       	adiw	r24, 0x11	; 17
    1d9c:	b0 c0       	rjmp	.+352    	; 0x1efe <__mulsf3+0x1e8>
    1d9e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1da0:	3e 84       	ldd	r3, Y+14	; 0x0e
    1da2:	4f 84       	ldd	r4, Y+15	; 0x0f
    1da4:	58 88       	ldd	r5, Y+16	; 0x10
    1da6:	6d 88       	ldd	r6, Y+21	; 0x15
    1da8:	7e 88       	ldd	r7, Y+22	; 0x16
    1daa:	8f 88       	ldd	r8, Y+23	; 0x17
    1dac:	98 8c       	ldd	r9, Y+24	; 0x18
    1dae:	ee 24       	eor	r14, r14
    1db0:	ff 24       	eor	r15, r15
    1db2:	87 01       	movw	r16, r14
    1db4:	aa 24       	eor	r10, r10
    1db6:	bb 24       	eor	r11, r11
    1db8:	65 01       	movw	r12, r10
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	60 e0       	ldi	r22, 0x00	; 0
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	e0 e0       	ldi	r30, 0x00	; 0
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	c1 01       	movw	r24, r2
    1dc8:	81 70       	andi	r24, 0x01	; 1
    1dca:	90 70       	andi	r25, 0x00	; 0
    1dcc:	89 2b       	or	r24, r25
    1dce:	e9 f0       	breq	.+58     	; 0x1e0a <__mulsf3+0xf4>
    1dd0:	e6 0c       	add	r14, r6
    1dd2:	f7 1c       	adc	r15, r7
    1dd4:	08 1d       	adc	r16, r8
    1dd6:	19 1d       	adc	r17, r9
    1dd8:	9a 01       	movw	r18, r20
    1dda:	ab 01       	movw	r20, r22
    1ddc:	2a 0d       	add	r18, r10
    1dde:	3b 1d       	adc	r19, r11
    1de0:	4c 1d       	adc	r20, r12
    1de2:	5d 1d       	adc	r21, r13
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a0 e0       	ldi	r26, 0x00	; 0
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e6 14       	cp	r14, r6
    1dee:	f7 04       	cpc	r15, r7
    1df0:	08 05       	cpc	r16, r8
    1df2:	19 05       	cpc	r17, r9
    1df4:	20 f4       	brcc	.+8      	; 0x1dfe <__mulsf3+0xe8>
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	a0 e0       	ldi	r26, 0x00	; 0
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	ba 01       	movw	r22, r20
    1e00:	a9 01       	movw	r20, r18
    1e02:	48 0f       	add	r20, r24
    1e04:	59 1f       	adc	r21, r25
    1e06:	6a 1f       	adc	r22, r26
    1e08:	7b 1f       	adc	r23, r27
    1e0a:	aa 0c       	add	r10, r10
    1e0c:	bb 1c       	adc	r11, r11
    1e0e:	cc 1c       	adc	r12, r12
    1e10:	dd 1c       	adc	r13, r13
    1e12:	97 fe       	sbrs	r9, 7
    1e14:	08 c0       	rjmp	.+16     	; 0x1e26 <__mulsf3+0x110>
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a0 e0       	ldi	r26, 0x00	; 0
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	a8 2a       	or	r10, r24
    1e20:	b9 2a       	or	r11, r25
    1e22:	ca 2a       	or	r12, r26
    1e24:	db 2a       	or	r13, r27
    1e26:	31 96       	adiw	r30, 0x01	; 1
    1e28:	e0 32       	cpi	r30, 0x20	; 32
    1e2a:	f1 05       	cpc	r31, r1
    1e2c:	49 f0       	breq	.+18     	; 0x1e40 <__mulsf3+0x12a>
    1e2e:	66 0c       	add	r6, r6
    1e30:	77 1c       	adc	r7, r7
    1e32:	88 1c       	adc	r8, r8
    1e34:	99 1c       	adc	r9, r9
    1e36:	56 94       	lsr	r5
    1e38:	47 94       	ror	r4
    1e3a:	37 94       	ror	r3
    1e3c:	27 94       	ror	r2
    1e3e:	c3 cf       	rjmp	.-122    	; 0x1dc6 <__mulsf3+0xb0>
    1e40:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e42:	ea 89       	ldd	r30, Y+18	; 0x12
    1e44:	2b 89       	ldd	r18, Y+19	; 0x13
    1e46:	3c 89       	ldd	r19, Y+20	; 0x14
    1e48:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e4c:	28 0f       	add	r18, r24
    1e4e:	39 1f       	adc	r19, r25
    1e50:	2e 5f       	subi	r18, 0xFE	; 254
    1e52:	3f 4f       	sbci	r19, 0xFF	; 255
    1e54:	17 c0       	rjmp	.+46     	; 0x1e84 <__mulsf3+0x16e>
    1e56:	ca 01       	movw	r24, r20
    1e58:	81 70       	andi	r24, 0x01	; 1
    1e5a:	90 70       	andi	r25, 0x00	; 0
    1e5c:	89 2b       	or	r24, r25
    1e5e:	61 f0       	breq	.+24     	; 0x1e78 <__mulsf3+0x162>
    1e60:	16 95       	lsr	r17
    1e62:	07 95       	ror	r16
    1e64:	f7 94       	ror	r15
    1e66:	e7 94       	ror	r14
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e0       	ldi	r26, 0x00	; 0
    1e6e:	b0 e8       	ldi	r27, 0x80	; 128
    1e70:	e8 2a       	or	r14, r24
    1e72:	f9 2a       	or	r15, r25
    1e74:	0a 2b       	or	r16, r26
    1e76:	1b 2b       	or	r17, r27
    1e78:	76 95       	lsr	r23
    1e7a:	67 95       	ror	r22
    1e7c:	57 95       	ror	r21
    1e7e:	47 95       	ror	r20
    1e80:	2f 5f       	subi	r18, 0xFF	; 255
    1e82:	3f 4f       	sbci	r19, 0xFF	; 255
    1e84:	77 fd       	sbrc	r23, 7
    1e86:	e7 cf       	rjmp	.-50     	; 0x1e56 <__mulsf3+0x140>
    1e88:	0c c0       	rjmp	.+24     	; 0x1ea2 <__mulsf3+0x18c>
    1e8a:	44 0f       	add	r20, r20
    1e8c:	55 1f       	adc	r21, r21
    1e8e:	66 1f       	adc	r22, r22
    1e90:	77 1f       	adc	r23, r23
    1e92:	17 fd       	sbrc	r17, 7
    1e94:	41 60       	ori	r20, 0x01	; 1
    1e96:	ee 0c       	add	r14, r14
    1e98:	ff 1c       	adc	r15, r15
    1e9a:	00 1f       	adc	r16, r16
    1e9c:	11 1f       	adc	r17, r17
    1e9e:	21 50       	subi	r18, 0x01	; 1
    1ea0:	30 40       	sbci	r19, 0x00	; 0
    1ea2:	40 30       	cpi	r20, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	59 07       	cpc	r21, r25
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	69 07       	cpc	r22, r25
    1eac:	90 e4       	ldi	r25, 0x40	; 64
    1eae:	79 07       	cpc	r23, r25
    1eb0:	60 f3       	brcs	.-40     	; 0x1e8a <__mulsf3+0x174>
    1eb2:	2b 8f       	std	Y+27, r18	; 0x1b
    1eb4:	3c 8f       	std	Y+28, r19	; 0x1c
    1eb6:	db 01       	movw	r26, r22
    1eb8:	ca 01       	movw	r24, r20
    1eba:	8f 77       	andi	r24, 0x7F	; 127
    1ebc:	90 70       	andi	r25, 0x00	; 0
    1ebe:	a0 70       	andi	r26, 0x00	; 0
    1ec0:	b0 70       	andi	r27, 0x00	; 0
    1ec2:	80 34       	cpi	r24, 0x40	; 64
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	a1 05       	cpc	r26, r1
    1ec8:	b1 05       	cpc	r27, r1
    1eca:	61 f4       	brne	.+24     	; 0x1ee4 <__mulsf3+0x1ce>
    1ecc:	47 fd       	sbrc	r20, 7
    1ece:	0a c0       	rjmp	.+20     	; 0x1ee4 <__mulsf3+0x1ce>
    1ed0:	e1 14       	cp	r14, r1
    1ed2:	f1 04       	cpc	r15, r1
    1ed4:	01 05       	cpc	r16, r1
    1ed6:	11 05       	cpc	r17, r1
    1ed8:	29 f0       	breq	.+10     	; 0x1ee4 <__mulsf3+0x1ce>
    1eda:	40 5c       	subi	r20, 0xC0	; 192
    1edc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ede:	6f 4f       	sbci	r22, 0xFF	; 255
    1ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee2:	40 78       	andi	r20, 0x80	; 128
    1ee4:	1a 8e       	std	Y+26, r1	; 0x1a
    1ee6:	fe 17       	cp	r31, r30
    1ee8:	11 f0       	breq	.+4      	; 0x1eee <__mulsf3+0x1d8>
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	8a 8f       	std	Y+26, r24	; 0x1a
    1eee:	4d 8f       	std	Y+29, r20	; 0x1d
    1ef0:	5e 8f       	std	Y+30, r21	; 0x1e
    1ef2:	6f 8f       	std	Y+31, r22	; 0x1f
    1ef4:	78 a3       	std	Y+32, r23	; 0x20
    1ef6:	83 e0       	ldi	r24, 0x03	; 3
    1ef8:	89 8f       	std	Y+25, r24	; 0x19
    1efa:	ce 01       	movw	r24, r28
    1efc:	49 96       	adiw	r24, 0x19	; 25
    1efe:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__pack_f>
    1f02:	a0 96       	adiw	r28, 0x20	; 32
    1f04:	e2 e1       	ldi	r30, 0x12	; 18
    1f06:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__epilogue_restores__>

00001f0a <__divsf3>:
    1f0a:	a8 e1       	ldi	r26, 0x18	; 24
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	eb e8       	ldi	r30, 0x8B	; 139
    1f10:	ff e0       	ldi	r31, 0x0F	; 15
    1f12:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__prologue_saves__+0x10>
    1f16:	69 83       	std	Y+1, r22	; 0x01
    1f18:	7a 83       	std	Y+2, r23	; 0x02
    1f1a:	8b 83       	std	Y+3, r24	; 0x03
    1f1c:	9c 83       	std	Y+4, r25	; 0x04
    1f1e:	2d 83       	std	Y+5, r18	; 0x05
    1f20:	3e 83       	std	Y+6, r19	; 0x06
    1f22:	4f 83       	std	Y+7, r20	; 0x07
    1f24:	58 87       	std	Y+8, r21	; 0x08
    1f26:	b9 e0       	ldi	r27, 0x09	; 9
    1f28:	eb 2e       	mov	r14, r27
    1f2a:	f1 2c       	mov	r15, r1
    1f2c:	ec 0e       	add	r14, r28
    1f2e:	fd 1e       	adc	r15, r29
    1f30:	ce 01       	movw	r24, r28
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	b7 01       	movw	r22, r14
    1f36:	0e 94 b0 12 	call	0x2560	; 0x2560 <__unpack_f>
    1f3a:	8e 01       	movw	r16, r28
    1f3c:	0f 5e       	subi	r16, 0xEF	; 239
    1f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f40:	ce 01       	movw	r24, r28
    1f42:	05 96       	adiw	r24, 0x05	; 5
    1f44:	b8 01       	movw	r22, r16
    1f46:	0e 94 b0 12 	call	0x2560	; 0x2560 <__unpack_f>
    1f4a:	29 85       	ldd	r18, Y+9	; 0x09
    1f4c:	22 30       	cpi	r18, 0x02	; 2
    1f4e:	08 f4       	brcc	.+2      	; 0x1f52 <__divsf3+0x48>
    1f50:	7e c0       	rjmp	.+252    	; 0x204e <__divsf3+0x144>
    1f52:	39 89       	ldd	r19, Y+17	; 0x11
    1f54:	32 30       	cpi	r19, 0x02	; 2
    1f56:	10 f4       	brcc	.+4      	; 0x1f5c <__divsf3+0x52>
    1f58:	b8 01       	movw	r22, r16
    1f5a:	7c c0       	rjmp	.+248    	; 0x2054 <__divsf3+0x14a>
    1f5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f60:	89 27       	eor	r24, r25
    1f62:	8a 87       	std	Y+10, r24	; 0x0a
    1f64:	24 30       	cpi	r18, 0x04	; 4
    1f66:	11 f0       	breq	.+4      	; 0x1f6c <__divsf3+0x62>
    1f68:	22 30       	cpi	r18, 0x02	; 2
    1f6a:	31 f4       	brne	.+12     	; 0x1f78 <__divsf3+0x6e>
    1f6c:	23 17       	cp	r18, r19
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <__divsf3+0x68>
    1f70:	6e c0       	rjmp	.+220    	; 0x204e <__divsf3+0x144>
    1f72:	61 ed       	ldi	r22, 0xD1	; 209
    1f74:	71 e0       	ldi	r23, 0x01	; 1
    1f76:	6e c0       	rjmp	.+220    	; 0x2054 <__divsf3+0x14a>
    1f78:	34 30       	cpi	r19, 0x04	; 4
    1f7a:	39 f4       	brne	.+14     	; 0x1f8a <__divsf3+0x80>
    1f7c:	1d 86       	std	Y+13, r1	; 0x0d
    1f7e:	1e 86       	std	Y+14, r1	; 0x0e
    1f80:	1f 86       	std	Y+15, r1	; 0x0f
    1f82:	18 8a       	std	Y+16, r1	; 0x10
    1f84:	1c 86       	std	Y+12, r1	; 0x0c
    1f86:	1b 86       	std	Y+11, r1	; 0x0b
    1f88:	04 c0       	rjmp	.+8      	; 0x1f92 <__divsf3+0x88>
    1f8a:	32 30       	cpi	r19, 0x02	; 2
    1f8c:	21 f4       	brne	.+8      	; 0x1f96 <__divsf3+0x8c>
    1f8e:	84 e0       	ldi	r24, 0x04	; 4
    1f90:	89 87       	std	Y+9, r24	; 0x09
    1f92:	b7 01       	movw	r22, r14
    1f94:	5f c0       	rjmp	.+190    	; 0x2054 <__divsf3+0x14a>
    1f96:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f98:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9e:	28 1b       	sub	r18, r24
    1fa0:	39 0b       	sbc	r19, r25
    1fa2:	3c 87       	std	Y+12, r19	; 0x0c
    1fa4:	2b 87       	std	Y+11, r18	; 0x0b
    1fa6:	ed 84       	ldd	r14, Y+13	; 0x0d
    1fa8:	fe 84       	ldd	r15, Y+14	; 0x0e
    1faa:	0f 85       	ldd	r16, Y+15	; 0x0f
    1fac:	18 89       	ldd	r17, Y+16	; 0x10
    1fae:	ad 88       	ldd	r10, Y+21	; 0x15
    1fb0:	be 88       	ldd	r11, Y+22	; 0x16
    1fb2:	cf 88       	ldd	r12, Y+23	; 0x17
    1fb4:	d8 8c       	ldd	r13, Y+24	; 0x18
    1fb6:	ea 14       	cp	r14, r10
    1fb8:	fb 04       	cpc	r15, r11
    1fba:	0c 05       	cpc	r16, r12
    1fbc:	1d 05       	cpc	r17, r13
    1fbe:	40 f4       	brcc	.+16     	; 0x1fd0 <__divsf3+0xc6>
    1fc0:	ee 0c       	add	r14, r14
    1fc2:	ff 1c       	adc	r15, r15
    1fc4:	00 1f       	adc	r16, r16
    1fc6:	11 1f       	adc	r17, r17
    1fc8:	21 50       	subi	r18, 0x01	; 1
    1fca:	30 40       	sbci	r19, 0x00	; 0
    1fcc:	3c 87       	std	Y+12, r19	; 0x0c
    1fce:	2b 87       	std	Y+11, r18	; 0x0b
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	50 e0       	ldi	r21, 0x00	; 0
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	a0 e0       	ldi	r26, 0x00	; 0
    1fde:	b0 e4       	ldi	r27, 0x40	; 64
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	ea 14       	cp	r14, r10
    1fe6:	fb 04       	cpc	r15, r11
    1fe8:	0c 05       	cpc	r16, r12
    1fea:	1d 05       	cpc	r17, r13
    1fec:	40 f0       	brcs	.+16     	; 0x1ffe <__divsf3+0xf4>
    1fee:	28 2b       	or	r18, r24
    1ff0:	39 2b       	or	r19, r25
    1ff2:	4a 2b       	or	r20, r26
    1ff4:	5b 2b       	or	r21, r27
    1ff6:	ea 18       	sub	r14, r10
    1ff8:	fb 08       	sbc	r15, r11
    1ffa:	0c 09       	sbc	r16, r12
    1ffc:	1d 09       	sbc	r17, r13
    1ffe:	b6 95       	lsr	r27
    2000:	a7 95       	ror	r26
    2002:	97 95       	ror	r25
    2004:	87 95       	ror	r24
    2006:	ee 0c       	add	r14, r14
    2008:	ff 1c       	adc	r15, r15
    200a:	00 1f       	adc	r16, r16
    200c:	11 1f       	adc	r17, r17
    200e:	6f 5f       	subi	r22, 0xFF	; 255
    2010:	7f 4f       	sbci	r23, 0xFF	; 255
    2012:	6f 31       	cpi	r22, 0x1F	; 31
    2014:	71 05       	cpc	r23, r1
    2016:	31 f7       	brne	.-52     	; 0x1fe4 <__divsf3+0xda>
    2018:	da 01       	movw	r26, r20
    201a:	c9 01       	movw	r24, r18
    201c:	8f 77       	andi	r24, 0x7F	; 127
    201e:	90 70       	andi	r25, 0x00	; 0
    2020:	a0 70       	andi	r26, 0x00	; 0
    2022:	b0 70       	andi	r27, 0x00	; 0
    2024:	80 34       	cpi	r24, 0x40	; 64
    2026:	91 05       	cpc	r25, r1
    2028:	a1 05       	cpc	r26, r1
    202a:	b1 05       	cpc	r27, r1
    202c:	61 f4       	brne	.+24     	; 0x2046 <__divsf3+0x13c>
    202e:	27 fd       	sbrc	r18, 7
    2030:	0a c0       	rjmp	.+20     	; 0x2046 <__divsf3+0x13c>
    2032:	e1 14       	cp	r14, r1
    2034:	f1 04       	cpc	r15, r1
    2036:	01 05       	cpc	r16, r1
    2038:	11 05       	cpc	r17, r1
    203a:	29 f0       	breq	.+10     	; 0x2046 <__divsf3+0x13c>
    203c:	20 5c       	subi	r18, 0xC0	; 192
    203e:	3f 4f       	sbci	r19, 0xFF	; 255
    2040:	4f 4f       	sbci	r20, 0xFF	; 255
    2042:	5f 4f       	sbci	r21, 0xFF	; 255
    2044:	20 78       	andi	r18, 0x80	; 128
    2046:	2d 87       	std	Y+13, r18	; 0x0d
    2048:	3e 87       	std	Y+14, r19	; 0x0e
    204a:	4f 87       	std	Y+15, r20	; 0x0f
    204c:	58 8b       	std	Y+16, r21	; 0x10
    204e:	be 01       	movw	r22, r28
    2050:	67 5f       	subi	r22, 0xF7	; 247
    2052:	7f 4f       	sbci	r23, 0xFF	; 255
    2054:	cb 01       	movw	r24, r22
    2056:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__pack_f>
    205a:	68 96       	adiw	r28, 0x18	; 24
    205c:	ea e0       	ldi	r30, 0x0A	; 10
    205e:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__epilogue_restores__+0x10>

00002062 <__gesf2>:
    2062:	a8 e1       	ldi	r26, 0x18	; 24
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e7 e3       	ldi	r30, 0x37	; 55
    2068:	f0 e1       	ldi	r31, 0x10	; 16
    206a:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__prologue_saves__+0x18>
    206e:	69 83       	std	Y+1, r22	; 0x01
    2070:	7a 83       	std	Y+2, r23	; 0x02
    2072:	8b 83       	std	Y+3, r24	; 0x03
    2074:	9c 83       	std	Y+4, r25	; 0x04
    2076:	2d 83       	std	Y+5, r18	; 0x05
    2078:	3e 83       	std	Y+6, r19	; 0x06
    207a:	4f 83       	std	Y+7, r20	; 0x07
    207c:	58 87       	std	Y+8, r21	; 0x08
    207e:	89 e0       	ldi	r24, 0x09	; 9
    2080:	e8 2e       	mov	r14, r24
    2082:	f1 2c       	mov	r15, r1
    2084:	ec 0e       	add	r14, r28
    2086:	fd 1e       	adc	r15, r29
    2088:	ce 01       	movw	r24, r28
    208a:	01 96       	adiw	r24, 0x01	; 1
    208c:	b7 01       	movw	r22, r14
    208e:	0e 94 b0 12 	call	0x2560	; 0x2560 <__unpack_f>
    2092:	8e 01       	movw	r16, r28
    2094:	0f 5e       	subi	r16, 0xEF	; 239
    2096:	1f 4f       	sbci	r17, 0xFF	; 255
    2098:	ce 01       	movw	r24, r28
    209a:	05 96       	adiw	r24, 0x05	; 5
    209c:	b8 01       	movw	r22, r16
    209e:	0e 94 b0 12 	call	0x2560	; 0x2560 <__unpack_f>
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	40 f0       	brcs	.+16     	; 0x20b8 <__gesf2+0x56>
    20a8:	89 89       	ldd	r24, Y+17	; 0x11
    20aa:	82 30       	cpi	r24, 0x02	; 2
    20ac:	28 f0       	brcs	.+10     	; 0x20b8 <__gesf2+0x56>
    20ae:	c7 01       	movw	r24, r14
    20b0:	b8 01       	movw	r22, r16
    20b2:	0e 94 28 13 	call	0x2650	; 0x2650 <__fpcmp_parts_f>
    20b6:	01 c0       	rjmp	.+2      	; 0x20ba <__gesf2+0x58>
    20b8:	8f ef       	ldi	r24, 0xFF	; 255
    20ba:	68 96       	adiw	r28, 0x18	; 24
    20bc:	e6 e0       	ldi	r30, 0x06	; 6
    20be:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__epilogue_restores__+0x18>

000020c2 <__floatsisf>:
    20c2:	a8 e0       	ldi	r26, 0x08	; 8
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e7 e6       	ldi	r30, 0x67	; 103
    20c8:	f0 e1       	ldi	r31, 0x10	; 16
    20ca:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__+0x12>
    20ce:	9b 01       	movw	r18, r22
    20d0:	ac 01       	movw	r20, r24
    20d2:	83 e0       	ldi	r24, 0x03	; 3
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	da 01       	movw	r26, r20
    20d8:	c9 01       	movw	r24, r18
    20da:	88 27       	eor	r24, r24
    20dc:	b7 fd       	sbrc	r27, 7
    20de:	83 95       	inc	r24
    20e0:	99 27       	eor	r25, r25
    20e2:	aa 27       	eor	r26, r26
    20e4:	bb 27       	eor	r27, r27
    20e6:	b8 2e       	mov	r11, r24
    20e8:	21 15       	cp	r18, r1
    20ea:	31 05       	cpc	r19, r1
    20ec:	41 05       	cpc	r20, r1
    20ee:	51 05       	cpc	r21, r1
    20f0:	19 f4       	brne	.+6      	; 0x20f8 <__floatsisf+0x36>
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	3a c0       	rjmp	.+116    	; 0x216c <__floatsisf+0xaa>
    20f8:	88 23       	and	r24, r24
    20fa:	a9 f0       	breq	.+42     	; 0x2126 <__floatsisf+0x64>
    20fc:	20 30       	cpi	r18, 0x00	; 0
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	38 07       	cpc	r19, r24
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	48 07       	cpc	r20, r24
    2106:	80 e8       	ldi	r24, 0x80	; 128
    2108:	58 07       	cpc	r21, r24
    210a:	29 f4       	brne	.+10     	; 0x2116 <__floatsisf+0x54>
    210c:	60 e0       	ldi	r22, 0x00	; 0
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	9f ec       	ldi	r25, 0xCF	; 207
    2114:	30 c0       	rjmp	.+96     	; 0x2176 <__floatsisf+0xb4>
    2116:	ee 24       	eor	r14, r14
    2118:	ff 24       	eor	r15, r15
    211a:	87 01       	movw	r16, r14
    211c:	e2 1a       	sub	r14, r18
    211e:	f3 0a       	sbc	r15, r19
    2120:	04 0b       	sbc	r16, r20
    2122:	15 0b       	sbc	r17, r21
    2124:	02 c0       	rjmp	.+4      	; 0x212a <__floatsisf+0x68>
    2126:	79 01       	movw	r14, r18
    2128:	8a 01       	movw	r16, r20
    212a:	8e e1       	ldi	r24, 0x1E	; 30
    212c:	c8 2e       	mov	r12, r24
    212e:	d1 2c       	mov	r13, r1
    2130:	dc 82       	std	Y+4, r13	; 0x04
    2132:	cb 82       	std	Y+3, r12	; 0x03
    2134:	ed 82       	std	Y+5, r14	; 0x05
    2136:	fe 82       	std	Y+6, r15	; 0x06
    2138:	0f 83       	std	Y+7, r16	; 0x07
    213a:	18 87       	std	Y+8, r17	; 0x08
    213c:	c8 01       	movw	r24, r16
    213e:	b7 01       	movw	r22, r14
    2140:	0e 94 8c 11 	call	0x2318	; 0x2318 <__clzsi2>
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	18 16       	cp	r1, r24
    2148:	19 06       	cpc	r1, r25
    214a:	84 f4       	brge	.+32     	; 0x216c <__floatsisf+0xaa>
    214c:	08 2e       	mov	r0, r24
    214e:	04 c0       	rjmp	.+8      	; 0x2158 <__floatsisf+0x96>
    2150:	ee 0c       	add	r14, r14
    2152:	ff 1c       	adc	r15, r15
    2154:	00 1f       	adc	r16, r16
    2156:	11 1f       	adc	r17, r17
    2158:	0a 94       	dec	r0
    215a:	d2 f7       	brpl	.-12     	; 0x2150 <__floatsisf+0x8e>
    215c:	ed 82       	std	Y+5, r14	; 0x05
    215e:	fe 82       	std	Y+6, r15	; 0x06
    2160:	0f 83       	std	Y+7, r16	; 0x07
    2162:	18 87       	std	Y+8, r17	; 0x08
    2164:	c8 1a       	sub	r12, r24
    2166:	d9 0a       	sbc	r13, r25
    2168:	dc 82       	std	Y+4, r13	; 0x04
    216a:	cb 82       	std	Y+3, r12	; 0x03
    216c:	ba 82       	std	Y+2, r11	; 0x02
    216e:	ce 01       	movw	r24, r28
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__pack_f>
    2176:	28 96       	adiw	r28, 0x08	; 8
    2178:	e9 e0       	ldi	r30, 0x09	; 9
    217a:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__+0x12>

0000217e <__fixsfsi>:
    217e:	ac e0       	ldi	r26, 0x0C	; 12
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e5 ec       	ldi	r30, 0xC5	; 197
    2184:	f0 e1       	ldi	r31, 0x10	; 16
    2186:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__prologue_saves__+0x20>
    218a:	69 83       	std	Y+1, r22	; 0x01
    218c:	7a 83       	std	Y+2, r23	; 0x02
    218e:	8b 83       	std	Y+3, r24	; 0x03
    2190:	9c 83       	std	Y+4, r25	; 0x04
    2192:	ce 01       	movw	r24, r28
    2194:	01 96       	adiw	r24, 0x01	; 1
    2196:	be 01       	movw	r22, r28
    2198:	6b 5f       	subi	r22, 0xFB	; 251
    219a:	7f 4f       	sbci	r23, 0xFF	; 255
    219c:	0e 94 b0 12 	call	0x2560	; 0x2560 <__unpack_f>
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	82 30       	cpi	r24, 0x02	; 2
    21a4:	61 f1       	breq	.+88     	; 0x21fe <__fixsfsi+0x80>
    21a6:	82 30       	cpi	r24, 0x02	; 2
    21a8:	50 f1       	brcs	.+84     	; 0x21fe <__fixsfsi+0x80>
    21aa:	84 30       	cpi	r24, 0x04	; 4
    21ac:	21 f4       	brne	.+8      	; 0x21b6 <__fixsfsi+0x38>
    21ae:	8e 81       	ldd	r24, Y+6	; 0x06
    21b0:	88 23       	and	r24, r24
    21b2:	51 f1       	breq	.+84     	; 0x2208 <__fixsfsi+0x8a>
    21b4:	2e c0       	rjmp	.+92     	; 0x2212 <__fixsfsi+0x94>
    21b6:	2f 81       	ldd	r18, Y+7	; 0x07
    21b8:	38 85       	ldd	r19, Y+8	; 0x08
    21ba:	37 fd       	sbrc	r19, 7
    21bc:	20 c0       	rjmp	.+64     	; 0x21fe <__fixsfsi+0x80>
    21be:	6e 81       	ldd	r22, Y+6	; 0x06
    21c0:	2f 31       	cpi	r18, 0x1F	; 31
    21c2:	31 05       	cpc	r19, r1
    21c4:	1c f0       	brlt	.+6      	; 0x21cc <__fixsfsi+0x4e>
    21c6:	66 23       	and	r22, r22
    21c8:	f9 f0       	breq	.+62     	; 0x2208 <__fixsfsi+0x8a>
    21ca:	23 c0       	rjmp	.+70     	; 0x2212 <__fixsfsi+0x94>
    21cc:	8e e1       	ldi	r24, 0x1E	; 30
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	82 1b       	sub	r24, r18
    21d2:	93 0b       	sbc	r25, r19
    21d4:	29 85       	ldd	r18, Y+9	; 0x09
    21d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    21d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    21da:	5c 85       	ldd	r21, Y+12	; 0x0c
    21dc:	04 c0       	rjmp	.+8      	; 0x21e6 <__fixsfsi+0x68>
    21de:	56 95       	lsr	r21
    21e0:	47 95       	ror	r20
    21e2:	37 95       	ror	r19
    21e4:	27 95       	ror	r18
    21e6:	8a 95       	dec	r24
    21e8:	d2 f7       	brpl	.-12     	; 0x21de <__fixsfsi+0x60>
    21ea:	66 23       	and	r22, r22
    21ec:	b1 f0       	breq	.+44     	; 0x221a <__fixsfsi+0x9c>
    21ee:	50 95       	com	r21
    21f0:	40 95       	com	r20
    21f2:	30 95       	com	r19
    21f4:	21 95       	neg	r18
    21f6:	3f 4f       	sbci	r19, 0xFF	; 255
    21f8:	4f 4f       	sbci	r20, 0xFF	; 255
    21fa:	5f 4f       	sbci	r21, 0xFF	; 255
    21fc:	0e c0       	rjmp	.+28     	; 0x221a <__fixsfsi+0x9c>
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e0       	ldi	r20, 0x00	; 0
    2204:	50 e0       	ldi	r21, 0x00	; 0
    2206:	09 c0       	rjmp	.+18     	; 0x221a <__fixsfsi+0x9c>
    2208:	2f ef       	ldi	r18, 0xFF	; 255
    220a:	3f ef       	ldi	r19, 0xFF	; 255
    220c:	4f ef       	ldi	r20, 0xFF	; 255
    220e:	5f e7       	ldi	r21, 0x7F	; 127
    2210:	04 c0       	rjmp	.+8      	; 0x221a <__fixsfsi+0x9c>
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	50 e8       	ldi	r21, 0x80	; 128
    221a:	b9 01       	movw	r22, r18
    221c:	ca 01       	movw	r24, r20
    221e:	2c 96       	adiw	r28, 0x0c	; 12
    2220:	e2 e0       	ldi	r30, 0x02	; 2
    2222:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <__epilogue_restores__+0x20>

00002226 <__floatunsisf>:
    2226:	a8 e0       	ldi	r26, 0x08	; 8
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e9 e1       	ldi	r30, 0x19	; 25
    222c:	f1 e1       	ldi	r31, 0x11	; 17
    222e:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__prologue_saves__+0x10>
    2232:	7b 01       	movw	r14, r22
    2234:	8c 01       	movw	r16, r24
    2236:	61 15       	cp	r22, r1
    2238:	71 05       	cpc	r23, r1
    223a:	81 05       	cpc	r24, r1
    223c:	91 05       	cpc	r25, r1
    223e:	19 f4       	brne	.+6      	; 0x2246 <__floatunsisf+0x20>
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	60 c0       	rjmp	.+192    	; 0x2306 <__floatunsisf+0xe0>
    2246:	83 e0       	ldi	r24, 0x03	; 3
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	8e e1       	ldi	r24, 0x1E	; 30
    224c:	c8 2e       	mov	r12, r24
    224e:	d1 2c       	mov	r13, r1
    2250:	dc 82       	std	Y+4, r13	; 0x04
    2252:	cb 82       	std	Y+3, r12	; 0x03
    2254:	ed 82       	std	Y+5, r14	; 0x05
    2256:	fe 82       	std	Y+6, r15	; 0x06
    2258:	0f 83       	std	Y+7, r16	; 0x07
    225a:	18 87       	std	Y+8, r17	; 0x08
    225c:	c8 01       	movw	r24, r16
    225e:	b7 01       	movw	r22, r14
    2260:	0e 94 8c 11 	call	0x2318	; 0x2318 <__clzsi2>
    2264:	fc 01       	movw	r30, r24
    2266:	31 97       	sbiw	r30, 0x01	; 1
    2268:	f7 ff       	sbrs	r31, 7
    226a:	3b c0       	rjmp	.+118    	; 0x22e2 <__floatunsisf+0xbc>
    226c:	22 27       	eor	r18, r18
    226e:	33 27       	eor	r19, r19
    2270:	2e 1b       	sub	r18, r30
    2272:	3f 0b       	sbc	r19, r31
    2274:	57 01       	movw	r10, r14
    2276:	68 01       	movw	r12, r16
    2278:	02 2e       	mov	r0, r18
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <__floatunsisf+0x5e>
    227c:	d6 94       	lsr	r13
    227e:	c7 94       	ror	r12
    2280:	b7 94       	ror	r11
    2282:	a7 94       	ror	r10
    2284:	0a 94       	dec	r0
    2286:	d2 f7       	brpl	.-12     	; 0x227c <__floatunsisf+0x56>
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	50 e0       	ldi	r21, 0x00	; 0
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	70 e0       	ldi	r23, 0x00	; 0
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a0 e0       	ldi	r26, 0x00	; 0
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	04 c0       	rjmp	.+8      	; 0x22a2 <__floatunsisf+0x7c>
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	aa 1f       	adc	r26, r26
    22a0:	bb 1f       	adc	r27, r27
    22a2:	2a 95       	dec	r18
    22a4:	d2 f7       	brpl	.-12     	; 0x229a <__floatunsisf+0x74>
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	a1 09       	sbc	r26, r1
    22aa:	b1 09       	sbc	r27, r1
    22ac:	8e 21       	and	r24, r14
    22ae:	9f 21       	and	r25, r15
    22b0:	a0 23       	and	r26, r16
    22b2:	b1 23       	and	r27, r17
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	a1 05       	cpc	r26, r1
    22b8:	b1 05       	cpc	r27, r1
    22ba:	21 f0       	breq	.+8      	; 0x22c4 <__floatunsisf+0x9e>
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	60 e0       	ldi	r22, 0x00	; 0
    22c2:	70 e0       	ldi	r23, 0x00	; 0
    22c4:	4a 29       	or	r20, r10
    22c6:	5b 29       	or	r21, r11
    22c8:	6c 29       	or	r22, r12
    22ca:	7d 29       	or	r23, r13
    22cc:	4d 83       	std	Y+5, r20	; 0x05
    22ce:	5e 83       	std	Y+6, r21	; 0x06
    22d0:	6f 83       	std	Y+7, r22	; 0x07
    22d2:	78 87       	std	Y+8, r23	; 0x08
    22d4:	8e e1       	ldi	r24, 0x1E	; 30
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	8e 1b       	sub	r24, r30
    22da:	9f 0b       	sbc	r25, r31
    22dc:	9c 83       	std	Y+4, r25	; 0x04
    22de:	8b 83       	std	Y+3, r24	; 0x03
    22e0:	12 c0       	rjmp	.+36     	; 0x2306 <__floatunsisf+0xe0>
    22e2:	30 97       	sbiw	r30, 0x00	; 0
    22e4:	81 f0       	breq	.+32     	; 0x2306 <__floatunsisf+0xe0>
    22e6:	0e 2e       	mov	r0, r30
    22e8:	04 c0       	rjmp	.+8      	; 0x22f2 <__floatunsisf+0xcc>
    22ea:	ee 0c       	add	r14, r14
    22ec:	ff 1c       	adc	r15, r15
    22ee:	00 1f       	adc	r16, r16
    22f0:	11 1f       	adc	r17, r17
    22f2:	0a 94       	dec	r0
    22f4:	d2 f7       	brpl	.-12     	; 0x22ea <__floatunsisf+0xc4>
    22f6:	ed 82       	std	Y+5, r14	; 0x05
    22f8:	fe 82       	std	Y+6, r15	; 0x06
    22fa:	0f 83       	std	Y+7, r16	; 0x07
    22fc:	18 87       	std	Y+8, r17	; 0x08
    22fe:	ce 1a       	sub	r12, r30
    2300:	df 0a       	sbc	r13, r31
    2302:	dc 82       	std	Y+4, r13	; 0x04
    2304:	cb 82       	std	Y+3, r12	; 0x03
    2306:	1a 82       	std	Y+2, r1	; 0x02
    2308:	ce 01       	movw	r24, r28
    230a:	01 96       	adiw	r24, 0x01	; 1
    230c:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__pack_f>
    2310:	28 96       	adiw	r28, 0x08	; 8
    2312:	ea e0       	ldi	r30, 0x0A	; 10
    2314:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__epilogue_restores__+0x10>

00002318 <__clzsi2>:
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	7b 01       	movw	r14, r22
    2322:	8c 01       	movw	r16, r24
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	e8 16       	cp	r14, r24
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	f8 06       	cpc	r15, r24
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	08 07       	cpc	r16, r24
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	18 07       	cpc	r17, r24
    2334:	88 f4       	brcc	.+34     	; 0x2358 <__clzsi2+0x40>
    2336:	8f ef       	ldi	r24, 0xFF	; 255
    2338:	e8 16       	cp	r14, r24
    233a:	f1 04       	cpc	r15, r1
    233c:	01 05       	cpc	r16, r1
    233e:	11 05       	cpc	r17, r1
    2340:	31 f0       	breq	.+12     	; 0x234e <__clzsi2+0x36>
    2342:	28 f0       	brcs	.+10     	; 0x234e <__clzsi2+0x36>
    2344:	88 e0       	ldi	r24, 0x08	; 8
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a0 e0       	ldi	r26, 0x00	; 0
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	17 c0       	rjmp	.+46     	; 0x237c <__clzsi2+0x64>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 e0       	ldi	r26, 0x00	; 0
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	12 c0       	rjmp	.+36     	; 0x237c <__clzsi2+0x64>
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	e8 16       	cp	r14, r24
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	f8 06       	cpc	r15, r24
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	08 07       	cpc	r16, r24
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	18 07       	cpc	r17, r24
    2368:	28 f0       	brcs	.+10     	; 0x2374 <__clzsi2+0x5c>
    236a:	88 e1       	ldi	r24, 0x18	; 24
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	a0 e0       	ldi	r26, 0x00	; 0
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	04 c0       	rjmp	.+8      	; 0x237c <__clzsi2+0x64>
    2374:	80 e1       	ldi	r24, 0x10	; 16
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a0 e0       	ldi	r26, 0x00	; 0
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	20 e2       	ldi	r18, 0x20	; 32
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	28 1b       	sub	r18, r24
    2386:	39 0b       	sbc	r19, r25
    2388:	4a 0b       	sbc	r20, r26
    238a:	5b 0b       	sbc	r21, r27
    238c:	04 c0       	rjmp	.+8      	; 0x2396 <__clzsi2+0x7e>
    238e:	16 95       	lsr	r17
    2390:	07 95       	ror	r16
    2392:	f7 94       	ror	r15
    2394:	e7 94       	ror	r14
    2396:	8a 95       	dec	r24
    2398:	d2 f7       	brpl	.-12     	; 0x238e <__clzsi2+0x76>
    239a:	f7 01       	movw	r30, r14
    239c:	e7 52       	subi	r30, 0x27	; 39
    239e:	fe 4f       	sbci	r31, 0xFE	; 254
    23a0:	80 81       	ld	r24, Z
    23a2:	28 1b       	sub	r18, r24
    23a4:	31 09       	sbc	r19, r1
    23a6:	41 09       	sbc	r20, r1
    23a8:	51 09       	sbc	r21, r1
    23aa:	c9 01       	movw	r24, r18
    23ac:	1f 91       	pop	r17
    23ae:	0f 91       	pop	r16
    23b0:	ff 90       	pop	r15
    23b2:	ef 90       	pop	r14
    23b4:	08 95       	ret

000023b6 <__pack_f>:
    23b6:	df 92       	push	r13
    23b8:	ef 92       	push	r14
    23ba:	ff 92       	push	r15
    23bc:	0f 93       	push	r16
    23be:	1f 93       	push	r17
    23c0:	fc 01       	movw	r30, r24
    23c2:	e4 80       	ldd	r14, Z+4	; 0x04
    23c4:	f5 80       	ldd	r15, Z+5	; 0x05
    23c6:	06 81       	ldd	r16, Z+6	; 0x06
    23c8:	17 81       	ldd	r17, Z+7	; 0x07
    23ca:	d1 80       	ldd	r13, Z+1	; 0x01
    23cc:	80 81       	ld	r24, Z
    23ce:	82 30       	cpi	r24, 0x02	; 2
    23d0:	48 f4       	brcc	.+18     	; 0x23e4 <__pack_f+0x2e>
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	a0 e1       	ldi	r26, 0x10	; 16
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e8 2a       	or	r14, r24
    23dc:	f9 2a       	or	r15, r25
    23de:	0a 2b       	or	r16, r26
    23e0:	1b 2b       	or	r17, r27
    23e2:	a5 c0       	rjmp	.+330    	; 0x252e <__pack_f+0x178>
    23e4:	84 30       	cpi	r24, 0x04	; 4
    23e6:	09 f4       	brne	.+2      	; 0x23ea <__pack_f+0x34>
    23e8:	9f c0       	rjmp	.+318    	; 0x2528 <__pack_f+0x172>
    23ea:	82 30       	cpi	r24, 0x02	; 2
    23ec:	21 f4       	brne	.+8      	; 0x23f6 <__pack_f+0x40>
    23ee:	ee 24       	eor	r14, r14
    23f0:	ff 24       	eor	r15, r15
    23f2:	87 01       	movw	r16, r14
    23f4:	05 c0       	rjmp	.+10     	; 0x2400 <__pack_f+0x4a>
    23f6:	e1 14       	cp	r14, r1
    23f8:	f1 04       	cpc	r15, r1
    23fa:	01 05       	cpc	r16, r1
    23fc:	11 05       	cpc	r17, r1
    23fe:	19 f4       	brne	.+6      	; 0x2406 <__pack_f+0x50>
    2400:	e0 e0       	ldi	r30, 0x00	; 0
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	96 c0       	rjmp	.+300    	; 0x2532 <__pack_f+0x17c>
    2406:	62 81       	ldd	r22, Z+2	; 0x02
    2408:	73 81       	ldd	r23, Z+3	; 0x03
    240a:	9f ef       	ldi	r25, 0xFF	; 255
    240c:	62 38       	cpi	r22, 0x82	; 130
    240e:	79 07       	cpc	r23, r25
    2410:	0c f0       	brlt	.+2      	; 0x2414 <__pack_f+0x5e>
    2412:	5b c0       	rjmp	.+182    	; 0x24ca <__pack_f+0x114>
    2414:	22 e8       	ldi	r18, 0x82	; 130
    2416:	3f ef       	ldi	r19, 0xFF	; 255
    2418:	26 1b       	sub	r18, r22
    241a:	37 0b       	sbc	r19, r23
    241c:	2a 31       	cpi	r18, 0x1A	; 26
    241e:	31 05       	cpc	r19, r1
    2420:	2c f0       	brlt	.+10     	; 0x242c <__pack_f+0x76>
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	50 e0       	ldi	r21, 0x00	; 0
    242a:	2a c0       	rjmp	.+84     	; 0x2480 <__pack_f+0xca>
    242c:	b8 01       	movw	r22, r16
    242e:	a7 01       	movw	r20, r14
    2430:	02 2e       	mov	r0, r18
    2432:	04 c0       	rjmp	.+8      	; 0x243c <__pack_f+0x86>
    2434:	76 95       	lsr	r23
    2436:	67 95       	ror	r22
    2438:	57 95       	ror	r21
    243a:	47 95       	ror	r20
    243c:	0a 94       	dec	r0
    243e:	d2 f7       	brpl	.-12     	; 0x2434 <__pack_f+0x7e>
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	a0 e0       	ldi	r26, 0x00	; 0
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	04 c0       	rjmp	.+8      	; 0x2452 <__pack_f+0x9c>
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	aa 1f       	adc	r26, r26
    2450:	bb 1f       	adc	r27, r27
    2452:	2a 95       	dec	r18
    2454:	d2 f7       	brpl	.-12     	; 0x244a <__pack_f+0x94>
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	a1 09       	sbc	r26, r1
    245a:	b1 09       	sbc	r27, r1
    245c:	8e 21       	and	r24, r14
    245e:	9f 21       	and	r25, r15
    2460:	a0 23       	and	r26, r16
    2462:	b1 23       	and	r27, r17
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	a1 05       	cpc	r26, r1
    2468:	b1 05       	cpc	r27, r1
    246a:	21 f0       	breq	.+8      	; 0x2474 <__pack_f+0xbe>
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	a0 e0       	ldi	r26, 0x00	; 0
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	9a 01       	movw	r18, r20
    2476:	ab 01       	movw	r20, r22
    2478:	28 2b       	or	r18, r24
    247a:	39 2b       	or	r19, r25
    247c:	4a 2b       	or	r20, r26
    247e:	5b 2b       	or	r21, r27
    2480:	da 01       	movw	r26, r20
    2482:	c9 01       	movw	r24, r18
    2484:	8f 77       	andi	r24, 0x7F	; 127
    2486:	90 70       	andi	r25, 0x00	; 0
    2488:	a0 70       	andi	r26, 0x00	; 0
    248a:	b0 70       	andi	r27, 0x00	; 0
    248c:	80 34       	cpi	r24, 0x40	; 64
    248e:	91 05       	cpc	r25, r1
    2490:	a1 05       	cpc	r26, r1
    2492:	b1 05       	cpc	r27, r1
    2494:	39 f4       	brne	.+14     	; 0x24a4 <__pack_f+0xee>
    2496:	27 ff       	sbrs	r18, 7
    2498:	09 c0       	rjmp	.+18     	; 0x24ac <__pack_f+0xf6>
    249a:	20 5c       	subi	r18, 0xC0	; 192
    249c:	3f 4f       	sbci	r19, 0xFF	; 255
    249e:	4f 4f       	sbci	r20, 0xFF	; 255
    24a0:	5f 4f       	sbci	r21, 0xFF	; 255
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac <__pack_f+0xf6>
    24a4:	21 5c       	subi	r18, 0xC1	; 193
    24a6:	3f 4f       	sbci	r19, 0xFF	; 255
    24a8:	4f 4f       	sbci	r20, 0xFF	; 255
    24aa:	5f 4f       	sbci	r21, 0xFF	; 255
    24ac:	e0 e0       	ldi	r30, 0x00	; 0
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	20 30       	cpi	r18, 0x00	; 0
    24b2:	a0 e0       	ldi	r26, 0x00	; 0
    24b4:	3a 07       	cpc	r19, r26
    24b6:	a0 e0       	ldi	r26, 0x00	; 0
    24b8:	4a 07       	cpc	r20, r26
    24ba:	a0 e4       	ldi	r26, 0x40	; 64
    24bc:	5a 07       	cpc	r21, r26
    24be:	10 f0       	brcs	.+4      	; 0x24c4 <__pack_f+0x10e>
    24c0:	e1 e0       	ldi	r30, 0x01	; 1
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	79 01       	movw	r14, r18
    24c6:	8a 01       	movw	r16, r20
    24c8:	27 c0       	rjmp	.+78     	; 0x2518 <__pack_f+0x162>
    24ca:	60 38       	cpi	r22, 0x80	; 128
    24cc:	71 05       	cpc	r23, r1
    24ce:	64 f5       	brge	.+88     	; 0x2528 <__pack_f+0x172>
    24d0:	fb 01       	movw	r30, r22
    24d2:	e1 58       	subi	r30, 0x81	; 129
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	d8 01       	movw	r26, r16
    24d8:	c7 01       	movw	r24, r14
    24da:	8f 77       	andi	r24, 0x7F	; 127
    24dc:	90 70       	andi	r25, 0x00	; 0
    24de:	a0 70       	andi	r26, 0x00	; 0
    24e0:	b0 70       	andi	r27, 0x00	; 0
    24e2:	80 34       	cpi	r24, 0x40	; 64
    24e4:	91 05       	cpc	r25, r1
    24e6:	a1 05       	cpc	r26, r1
    24e8:	b1 05       	cpc	r27, r1
    24ea:	39 f4       	brne	.+14     	; 0x24fa <__pack_f+0x144>
    24ec:	e7 fe       	sbrs	r14, 7
    24ee:	0d c0       	rjmp	.+26     	; 0x250a <__pack_f+0x154>
    24f0:	80 e4       	ldi	r24, 0x40	; 64
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	a0 e0       	ldi	r26, 0x00	; 0
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	04 c0       	rjmp	.+8      	; 0x2502 <__pack_f+0x14c>
    24fa:	8f e3       	ldi	r24, 0x3F	; 63
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	a0 e0       	ldi	r26, 0x00	; 0
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e8 0e       	add	r14, r24
    2504:	f9 1e       	adc	r15, r25
    2506:	0a 1f       	adc	r16, r26
    2508:	1b 1f       	adc	r17, r27
    250a:	17 ff       	sbrs	r17, 7
    250c:	05 c0       	rjmp	.+10     	; 0x2518 <__pack_f+0x162>
    250e:	16 95       	lsr	r17
    2510:	07 95       	ror	r16
    2512:	f7 94       	ror	r15
    2514:	e7 94       	ror	r14
    2516:	31 96       	adiw	r30, 0x01	; 1
    2518:	87 e0       	ldi	r24, 0x07	; 7
    251a:	16 95       	lsr	r17
    251c:	07 95       	ror	r16
    251e:	f7 94       	ror	r15
    2520:	e7 94       	ror	r14
    2522:	8a 95       	dec	r24
    2524:	d1 f7       	brne	.-12     	; 0x251a <__pack_f+0x164>
    2526:	05 c0       	rjmp	.+10     	; 0x2532 <__pack_f+0x17c>
    2528:	ee 24       	eor	r14, r14
    252a:	ff 24       	eor	r15, r15
    252c:	87 01       	movw	r16, r14
    252e:	ef ef       	ldi	r30, 0xFF	; 255
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	6e 2f       	mov	r22, r30
    2534:	67 95       	ror	r22
    2536:	66 27       	eor	r22, r22
    2538:	67 95       	ror	r22
    253a:	90 2f       	mov	r25, r16
    253c:	9f 77       	andi	r25, 0x7F	; 127
    253e:	d7 94       	ror	r13
    2540:	dd 24       	eor	r13, r13
    2542:	d7 94       	ror	r13
    2544:	8e 2f       	mov	r24, r30
    2546:	86 95       	lsr	r24
    2548:	49 2f       	mov	r20, r25
    254a:	46 2b       	or	r20, r22
    254c:	58 2f       	mov	r21, r24
    254e:	5d 29       	or	r21, r13
    2550:	b7 01       	movw	r22, r14
    2552:	ca 01       	movw	r24, r20
    2554:	1f 91       	pop	r17
    2556:	0f 91       	pop	r16
    2558:	ff 90       	pop	r15
    255a:	ef 90       	pop	r14
    255c:	df 90       	pop	r13
    255e:	08 95       	ret

00002560 <__unpack_f>:
    2560:	fc 01       	movw	r30, r24
    2562:	db 01       	movw	r26, r22
    2564:	40 81       	ld	r20, Z
    2566:	51 81       	ldd	r21, Z+1	; 0x01
    2568:	22 81       	ldd	r18, Z+2	; 0x02
    256a:	62 2f       	mov	r22, r18
    256c:	6f 77       	andi	r22, 0x7F	; 127
    256e:	70 e0       	ldi	r23, 0x00	; 0
    2570:	22 1f       	adc	r18, r18
    2572:	22 27       	eor	r18, r18
    2574:	22 1f       	adc	r18, r18
    2576:	93 81       	ldd	r25, Z+3	; 0x03
    2578:	89 2f       	mov	r24, r25
    257a:	88 0f       	add	r24, r24
    257c:	82 2b       	or	r24, r18
    257e:	28 2f       	mov	r18, r24
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	99 1f       	adc	r25, r25
    2584:	99 27       	eor	r25, r25
    2586:	99 1f       	adc	r25, r25
    2588:	11 96       	adiw	r26, 0x01	; 1
    258a:	9c 93       	st	X, r25
    258c:	11 97       	sbiw	r26, 0x01	; 1
    258e:	21 15       	cp	r18, r1
    2590:	31 05       	cpc	r19, r1
    2592:	a9 f5       	brne	.+106    	; 0x25fe <__unpack_f+0x9e>
    2594:	41 15       	cp	r20, r1
    2596:	51 05       	cpc	r21, r1
    2598:	61 05       	cpc	r22, r1
    259a:	71 05       	cpc	r23, r1
    259c:	11 f4       	brne	.+4      	; 0x25a2 <__unpack_f+0x42>
    259e:	82 e0       	ldi	r24, 0x02	; 2
    25a0:	37 c0       	rjmp	.+110    	; 0x2610 <__unpack_f+0xb0>
    25a2:	82 e8       	ldi	r24, 0x82	; 130
    25a4:	9f ef       	ldi	r25, 0xFF	; 255
    25a6:	13 96       	adiw	r26, 0x03	; 3
    25a8:	9c 93       	st	X, r25
    25aa:	8e 93       	st	-X, r24
    25ac:	12 97       	sbiw	r26, 0x02	; 2
    25ae:	9a 01       	movw	r18, r20
    25b0:	ab 01       	movw	r20, r22
    25b2:	67 e0       	ldi	r22, 0x07	; 7
    25b4:	22 0f       	add	r18, r18
    25b6:	33 1f       	adc	r19, r19
    25b8:	44 1f       	adc	r20, r20
    25ba:	55 1f       	adc	r21, r21
    25bc:	6a 95       	dec	r22
    25be:	d1 f7       	brne	.-12     	; 0x25b4 <__unpack_f+0x54>
    25c0:	83 e0       	ldi	r24, 0x03	; 3
    25c2:	8c 93       	st	X, r24
    25c4:	0d c0       	rjmp	.+26     	; 0x25e0 <__unpack_f+0x80>
    25c6:	22 0f       	add	r18, r18
    25c8:	33 1f       	adc	r19, r19
    25ca:	44 1f       	adc	r20, r20
    25cc:	55 1f       	adc	r21, r21
    25ce:	12 96       	adiw	r26, 0x02	; 2
    25d0:	8d 91       	ld	r24, X+
    25d2:	9c 91       	ld	r25, X
    25d4:	13 97       	sbiw	r26, 0x03	; 3
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	13 96       	adiw	r26, 0x03	; 3
    25da:	9c 93       	st	X, r25
    25dc:	8e 93       	st	-X, r24
    25de:	12 97       	sbiw	r26, 0x02	; 2
    25e0:	20 30       	cpi	r18, 0x00	; 0
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	38 07       	cpc	r19, r24
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	48 07       	cpc	r20, r24
    25ea:	80 e4       	ldi	r24, 0x40	; 64
    25ec:	58 07       	cpc	r21, r24
    25ee:	58 f3       	brcs	.-42     	; 0x25c6 <__unpack_f+0x66>
    25f0:	14 96       	adiw	r26, 0x04	; 4
    25f2:	2d 93       	st	X+, r18
    25f4:	3d 93       	st	X+, r19
    25f6:	4d 93       	st	X+, r20
    25f8:	5c 93       	st	X, r21
    25fa:	17 97       	sbiw	r26, 0x07	; 7
    25fc:	08 95       	ret
    25fe:	2f 3f       	cpi	r18, 0xFF	; 255
    2600:	31 05       	cpc	r19, r1
    2602:	79 f4       	brne	.+30     	; 0x2622 <__unpack_f+0xc2>
    2604:	41 15       	cp	r20, r1
    2606:	51 05       	cpc	r21, r1
    2608:	61 05       	cpc	r22, r1
    260a:	71 05       	cpc	r23, r1
    260c:	19 f4       	brne	.+6      	; 0x2614 <__unpack_f+0xb4>
    260e:	84 e0       	ldi	r24, 0x04	; 4
    2610:	8c 93       	st	X, r24
    2612:	08 95       	ret
    2614:	64 ff       	sbrs	r22, 4
    2616:	03 c0       	rjmp	.+6      	; 0x261e <__unpack_f+0xbe>
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	8c 93       	st	X, r24
    261c:	12 c0       	rjmp	.+36     	; 0x2642 <__unpack_f+0xe2>
    261e:	1c 92       	st	X, r1
    2620:	10 c0       	rjmp	.+32     	; 0x2642 <__unpack_f+0xe2>
    2622:	2f 57       	subi	r18, 0x7F	; 127
    2624:	30 40       	sbci	r19, 0x00	; 0
    2626:	13 96       	adiw	r26, 0x03	; 3
    2628:	3c 93       	st	X, r19
    262a:	2e 93       	st	-X, r18
    262c:	12 97       	sbiw	r26, 0x02	; 2
    262e:	83 e0       	ldi	r24, 0x03	; 3
    2630:	8c 93       	st	X, r24
    2632:	87 e0       	ldi	r24, 0x07	; 7
    2634:	44 0f       	add	r20, r20
    2636:	55 1f       	adc	r21, r21
    2638:	66 1f       	adc	r22, r22
    263a:	77 1f       	adc	r23, r23
    263c:	8a 95       	dec	r24
    263e:	d1 f7       	brne	.-12     	; 0x2634 <__unpack_f+0xd4>
    2640:	70 64       	ori	r23, 0x40	; 64
    2642:	14 96       	adiw	r26, 0x04	; 4
    2644:	4d 93       	st	X+, r20
    2646:	5d 93       	st	X+, r21
    2648:	6d 93       	st	X+, r22
    264a:	7c 93       	st	X, r23
    264c:	17 97       	sbiw	r26, 0x07	; 7
    264e:	08 95       	ret

00002650 <__fpcmp_parts_f>:
    2650:	1f 93       	push	r17
    2652:	dc 01       	movw	r26, r24
    2654:	fb 01       	movw	r30, r22
    2656:	9c 91       	ld	r25, X
    2658:	92 30       	cpi	r25, 0x02	; 2
    265a:	08 f4       	brcc	.+2      	; 0x265e <__fpcmp_parts_f+0xe>
    265c:	47 c0       	rjmp	.+142    	; 0x26ec <__fpcmp_parts_f+0x9c>
    265e:	80 81       	ld	r24, Z
    2660:	82 30       	cpi	r24, 0x02	; 2
    2662:	08 f4       	brcc	.+2      	; 0x2666 <__fpcmp_parts_f+0x16>
    2664:	43 c0       	rjmp	.+134    	; 0x26ec <__fpcmp_parts_f+0x9c>
    2666:	94 30       	cpi	r25, 0x04	; 4
    2668:	51 f4       	brne	.+20     	; 0x267e <__fpcmp_parts_f+0x2e>
    266a:	11 96       	adiw	r26, 0x01	; 1
    266c:	1c 91       	ld	r17, X
    266e:	84 30       	cpi	r24, 0x04	; 4
    2670:	99 f5       	brne	.+102    	; 0x26d8 <__fpcmp_parts_f+0x88>
    2672:	81 81       	ldd	r24, Z+1	; 0x01
    2674:	68 2f       	mov	r22, r24
    2676:	70 e0       	ldi	r23, 0x00	; 0
    2678:	61 1b       	sub	r22, r17
    267a:	71 09       	sbc	r23, r1
    267c:	3f c0       	rjmp	.+126    	; 0x26fc <__fpcmp_parts_f+0xac>
    267e:	84 30       	cpi	r24, 0x04	; 4
    2680:	21 f0       	breq	.+8      	; 0x268a <__fpcmp_parts_f+0x3a>
    2682:	92 30       	cpi	r25, 0x02	; 2
    2684:	31 f4       	brne	.+12     	; 0x2692 <__fpcmp_parts_f+0x42>
    2686:	82 30       	cpi	r24, 0x02	; 2
    2688:	b9 f1       	breq	.+110    	; 0x26f8 <__fpcmp_parts_f+0xa8>
    268a:	81 81       	ldd	r24, Z+1	; 0x01
    268c:	88 23       	and	r24, r24
    268e:	89 f1       	breq	.+98     	; 0x26f2 <__fpcmp_parts_f+0xa2>
    2690:	2d c0       	rjmp	.+90     	; 0x26ec <__fpcmp_parts_f+0x9c>
    2692:	11 96       	adiw	r26, 0x01	; 1
    2694:	1c 91       	ld	r17, X
    2696:	11 97       	sbiw	r26, 0x01	; 1
    2698:	82 30       	cpi	r24, 0x02	; 2
    269a:	f1 f0       	breq	.+60     	; 0x26d8 <__fpcmp_parts_f+0x88>
    269c:	81 81       	ldd	r24, Z+1	; 0x01
    269e:	18 17       	cp	r17, r24
    26a0:	d9 f4       	brne	.+54     	; 0x26d8 <__fpcmp_parts_f+0x88>
    26a2:	12 96       	adiw	r26, 0x02	; 2
    26a4:	2d 91       	ld	r18, X+
    26a6:	3c 91       	ld	r19, X
    26a8:	13 97       	sbiw	r26, 0x03	; 3
    26aa:	82 81       	ldd	r24, Z+2	; 0x02
    26ac:	93 81       	ldd	r25, Z+3	; 0x03
    26ae:	82 17       	cp	r24, r18
    26b0:	93 07       	cpc	r25, r19
    26b2:	94 f0       	brlt	.+36     	; 0x26d8 <__fpcmp_parts_f+0x88>
    26b4:	28 17       	cp	r18, r24
    26b6:	39 07       	cpc	r19, r25
    26b8:	bc f0       	brlt	.+46     	; 0x26e8 <__fpcmp_parts_f+0x98>
    26ba:	14 96       	adiw	r26, 0x04	; 4
    26bc:	8d 91       	ld	r24, X+
    26be:	9d 91       	ld	r25, X+
    26c0:	0d 90       	ld	r0, X+
    26c2:	bc 91       	ld	r27, X
    26c4:	a0 2d       	mov	r26, r0
    26c6:	24 81       	ldd	r18, Z+4	; 0x04
    26c8:	35 81       	ldd	r19, Z+5	; 0x05
    26ca:	46 81       	ldd	r20, Z+6	; 0x06
    26cc:	57 81       	ldd	r21, Z+7	; 0x07
    26ce:	28 17       	cp	r18, r24
    26d0:	39 07       	cpc	r19, r25
    26d2:	4a 07       	cpc	r20, r26
    26d4:	5b 07       	cpc	r21, r27
    26d6:	18 f4       	brcc	.+6      	; 0x26de <__fpcmp_parts_f+0x8e>
    26d8:	11 23       	and	r17, r17
    26da:	41 f0       	breq	.+16     	; 0x26ec <__fpcmp_parts_f+0x9c>
    26dc:	0a c0       	rjmp	.+20     	; 0x26f2 <__fpcmp_parts_f+0xa2>
    26de:	82 17       	cp	r24, r18
    26e0:	93 07       	cpc	r25, r19
    26e2:	a4 07       	cpc	r26, r20
    26e4:	b5 07       	cpc	r27, r21
    26e6:	40 f4       	brcc	.+16     	; 0x26f8 <__fpcmp_parts_f+0xa8>
    26e8:	11 23       	and	r17, r17
    26ea:	19 f0       	breq	.+6      	; 0x26f2 <__fpcmp_parts_f+0xa2>
    26ec:	61 e0       	ldi	r22, 0x01	; 1
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	05 c0       	rjmp	.+10     	; 0x26fc <__fpcmp_parts_f+0xac>
    26f2:	6f ef       	ldi	r22, 0xFF	; 255
    26f4:	7f ef       	ldi	r23, 0xFF	; 255
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <__fpcmp_parts_f+0xac>
    26f8:	60 e0       	ldi	r22, 0x00	; 0
    26fa:	70 e0       	ldi	r23, 0x00	; 0
    26fc:	cb 01       	movw	r24, r22
    26fe:	1f 91       	pop	r17
    2700:	08 95       	ret

00002702 <__divmodhi4>:
    2702:	97 fb       	bst	r25, 7
    2704:	09 2e       	mov	r0, r25
    2706:	07 26       	eor	r0, r23
    2708:	0a d0       	rcall	.+20     	; 0x271e <__divmodhi4_neg1>
    270a:	77 fd       	sbrc	r23, 7
    270c:	04 d0       	rcall	.+8      	; 0x2716 <__divmodhi4_neg2>
    270e:	0c d0       	rcall	.+24     	; 0x2728 <__udivmodhi4>
    2710:	06 d0       	rcall	.+12     	; 0x271e <__divmodhi4_neg1>
    2712:	00 20       	and	r0, r0
    2714:	1a f4       	brpl	.+6      	; 0x271c <__divmodhi4_exit>

00002716 <__divmodhi4_neg2>:
    2716:	70 95       	com	r23
    2718:	61 95       	neg	r22
    271a:	7f 4f       	sbci	r23, 0xFF	; 255

0000271c <__divmodhi4_exit>:
    271c:	08 95       	ret

0000271e <__divmodhi4_neg1>:
    271e:	f6 f7       	brtc	.-4      	; 0x271c <__divmodhi4_exit>
    2720:	90 95       	com	r25
    2722:	81 95       	neg	r24
    2724:	9f 4f       	sbci	r25, 0xFF	; 255
    2726:	08 95       	ret

00002728 <__udivmodhi4>:
    2728:	aa 1b       	sub	r26, r26
    272a:	bb 1b       	sub	r27, r27
    272c:	51 e1       	ldi	r21, 0x11	; 17
    272e:	07 c0       	rjmp	.+14     	; 0x273e <__udivmodhi4_ep>

00002730 <__udivmodhi4_loop>:
    2730:	aa 1f       	adc	r26, r26
    2732:	bb 1f       	adc	r27, r27
    2734:	a6 17       	cp	r26, r22
    2736:	b7 07       	cpc	r27, r23
    2738:	10 f0       	brcs	.+4      	; 0x273e <__udivmodhi4_ep>
    273a:	a6 1b       	sub	r26, r22
    273c:	b7 0b       	sbc	r27, r23

0000273e <__udivmodhi4_ep>:
    273e:	88 1f       	adc	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	5a 95       	dec	r21
    2744:	a9 f7       	brne	.-22     	; 0x2730 <__udivmodhi4_loop>
    2746:	80 95       	com	r24
    2748:	90 95       	com	r25
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	08 95       	ret

00002750 <__prologue_saves__>:
    2750:	2f 92       	push	r2
    2752:	3f 92       	push	r3
    2754:	4f 92       	push	r4
    2756:	5f 92       	push	r5
    2758:	6f 92       	push	r6
    275a:	7f 92       	push	r7
    275c:	8f 92       	push	r8
    275e:	9f 92       	push	r9
    2760:	af 92       	push	r10
    2762:	bf 92       	push	r11
    2764:	cf 92       	push	r12
    2766:	df 92       	push	r13
    2768:	ef 92       	push	r14
    276a:	ff 92       	push	r15
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	ca 1b       	sub	r28, r26
    277a:	db 0b       	sbc	r29, r27
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	09 94       	ijmp

00002788 <__epilogue_restores__>:
    2788:	2a 88       	ldd	r2, Y+18	; 0x12
    278a:	39 88       	ldd	r3, Y+17	; 0x11
    278c:	48 88       	ldd	r4, Y+16	; 0x10
    278e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2790:	6e 84       	ldd	r6, Y+14	; 0x0e
    2792:	7d 84       	ldd	r7, Y+13	; 0x0d
    2794:	8c 84       	ldd	r8, Y+12	; 0x0c
    2796:	9b 84       	ldd	r9, Y+11	; 0x0b
    2798:	aa 84       	ldd	r10, Y+10	; 0x0a
    279a:	b9 84       	ldd	r11, Y+9	; 0x09
    279c:	c8 84       	ldd	r12, Y+8	; 0x08
    279e:	df 80       	ldd	r13, Y+7	; 0x07
    27a0:	ee 80       	ldd	r14, Y+6	; 0x06
    27a2:	fd 80       	ldd	r15, Y+5	; 0x05
    27a4:	0c 81       	ldd	r16, Y+4	; 0x04
    27a6:	1b 81       	ldd	r17, Y+3	; 0x03
    27a8:	aa 81       	ldd	r26, Y+2	; 0x02
    27aa:	b9 81       	ldd	r27, Y+1	; 0x01
    27ac:	ce 0f       	add	r28, r30
    27ae:	d1 1d       	adc	r29, r1
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	de bf       	out	0x3e, r29	; 62
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	cd bf       	out	0x3d, r28	; 61
    27ba:	ed 01       	movw	r28, r26
    27bc:	08 95       	ret

000027be <do_rand>:
    27be:	a0 e0       	ldi	r26, 0x00	; 0
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e5 ee       	ldi	r30, 0xE5	; 229
    27c4:	f3 e1       	ldi	r31, 0x13	; 19
    27c6:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__prologue_saves__+0x10>
    27ca:	ec 01       	movw	r28, r24
    27cc:	a8 80       	ld	r10, Y
    27ce:	b9 80       	ldd	r11, Y+1	; 0x01
    27d0:	ca 80       	ldd	r12, Y+2	; 0x02
    27d2:	db 80       	ldd	r13, Y+3	; 0x03
    27d4:	a1 14       	cp	r10, r1
    27d6:	b1 04       	cpc	r11, r1
    27d8:	c1 04       	cpc	r12, r1
    27da:	d1 04       	cpc	r13, r1
    27dc:	41 f4       	brne	.+16     	; 0x27ee <do_rand+0x30>
    27de:	84 e2       	ldi	r24, 0x24	; 36
    27e0:	a8 2e       	mov	r10, r24
    27e2:	89 ed       	ldi	r24, 0xD9	; 217
    27e4:	b8 2e       	mov	r11, r24
    27e6:	8b e5       	ldi	r24, 0x5B	; 91
    27e8:	c8 2e       	mov	r12, r24
    27ea:	87 e0       	ldi	r24, 0x07	; 7
    27ec:	d8 2e       	mov	r13, r24
    27ee:	c6 01       	movw	r24, r12
    27f0:	b5 01       	movw	r22, r10
    27f2:	2d e1       	ldi	r18, 0x1D	; 29
    27f4:	33 ef       	ldi	r19, 0xF3	; 243
    27f6:	41 e0       	ldi	r20, 0x01	; 1
    27f8:	50 e0       	ldi	r21, 0x00	; 0
    27fa:	0e 94 98 14 	call	0x2930	; 0x2930 <__divmodsi4>
    27fe:	27 ea       	ldi	r18, 0xA7	; 167
    2800:	31 e4       	ldi	r19, 0x41	; 65
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__mulsi3>
    280a:	7b 01       	movw	r14, r22
    280c:	8c 01       	movw	r16, r24
    280e:	c6 01       	movw	r24, r12
    2810:	b5 01       	movw	r22, r10
    2812:	2d e1       	ldi	r18, 0x1D	; 29
    2814:	33 ef       	ldi	r19, 0xF3	; 243
    2816:	41 e0       	ldi	r20, 0x01	; 1
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	0e 94 98 14 	call	0x2930	; 0x2930 <__divmodsi4>
    281e:	ca 01       	movw	r24, r20
    2820:	b9 01       	movw	r22, r18
    2822:	2c ee       	ldi	r18, 0xEC	; 236
    2824:	34 ef       	ldi	r19, 0xF4	; 244
    2826:	4f ef       	ldi	r20, 0xFF	; 255
    2828:	5f ef       	ldi	r21, 0xFF	; 255
    282a:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__mulsi3>
    282e:	6e 0d       	add	r22, r14
    2830:	7f 1d       	adc	r23, r15
    2832:	80 1f       	adc	r24, r16
    2834:	91 1f       	adc	r25, r17
    2836:	97 ff       	sbrs	r25, 7
    2838:	04 c0       	rjmp	.+8      	; 0x2842 <do_rand+0x84>
    283a:	61 50       	subi	r22, 0x01	; 1
    283c:	70 40       	sbci	r23, 0x00	; 0
    283e:	80 40       	sbci	r24, 0x00	; 0
    2840:	90 48       	sbci	r25, 0x80	; 128
    2842:	68 83       	st	Y, r22
    2844:	79 83       	std	Y+1, r23	; 0x01
    2846:	8a 83       	std	Y+2, r24	; 0x02
    2848:	9b 83       	std	Y+3, r25	; 0x03
    284a:	9b 01       	movw	r18, r22
    284c:	3f 77       	andi	r19, 0x7F	; 127
    284e:	c9 01       	movw	r24, r18
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	ea e0       	ldi	r30, 0x0A	; 10
    2856:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__epilogue_restores__+0x10>

0000285a <rand_r>:
    285a:	0e 94 df 13 	call	0x27be	; 0x27be <do_rand>
    285e:	08 95       	ret

00002860 <rand>:
    2860:	89 ed       	ldi	r24, 0xD9	; 217
    2862:	92 e0       	ldi	r25, 0x02	; 2
    2864:	0e 94 df 13 	call	0x27be	; 0x27be <do_rand>
    2868:	08 95       	ret

0000286a <srand>:
    286a:	a0 e0       	ldi	r26, 0x00	; 0
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	80 93 d9 02 	sts	0x02D9, r24
    2872:	90 93 da 02 	sts	0x02DA, r25
    2876:	a0 93 db 02 	sts	0x02DB, r26
    287a:	b0 93 dc 02 	sts	0x02DC, r27
    287e:	08 95       	ret

00002880 <itoa>:
    2880:	fb 01       	movw	r30, r22
    2882:	9f 01       	movw	r18, r30
    2884:	e8 94       	clt
    2886:	42 30       	cpi	r20, 0x02	; 2
    2888:	c4 f0       	brlt	.+48     	; 0x28ba <itoa+0x3a>
    288a:	45 32       	cpi	r20, 0x25	; 37
    288c:	b4 f4       	brge	.+44     	; 0x28ba <itoa+0x3a>
    288e:	4a 30       	cpi	r20, 0x0A	; 10
    2890:	29 f4       	brne	.+10     	; 0x289c <itoa+0x1c>
    2892:	97 fb       	bst	r25, 7
    2894:	1e f4       	brtc	.+6      	; 0x289c <itoa+0x1c>
    2896:	90 95       	com	r25
    2898:	81 95       	neg	r24
    289a:	9f 4f       	sbci	r25, 0xFF	; 255
    289c:	64 2f       	mov	r22, r20
    289e:	77 27       	eor	r23, r23
    28a0:	0e 94 94 13 	call	0x2728	; 0x2728 <__udivmodhi4>
    28a4:	80 5d       	subi	r24, 0xD0	; 208
    28a6:	8a 33       	cpi	r24, 0x3A	; 58
    28a8:	0c f0       	brlt	.+2      	; 0x28ac <itoa+0x2c>
    28aa:	89 5d       	subi	r24, 0xD9	; 217
    28ac:	81 93       	st	Z+, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	a1 f7       	brne	.-24     	; 0x289c <itoa+0x1c>
    28b4:	16 f4       	brtc	.+4      	; 0x28ba <itoa+0x3a>
    28b6:	5d e2       	ldi	r21, 0x2D	; 45
    28b8:	51 93       	st	Z+, r21
    28ba:	10 82       	st	Z, r1
    28bc:	c9 01       	movw	r24, r18
    28be:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <strrev>

000028c2 <__eerd_byte_m328p>:
    28c2:	f9 99       	sbic	0x1f, 1	; 31
    28c4:	fe cf       	rjmp	.-4      	; 0x28c2 <__eerd_byte_m328p>
    28c6:	92 bd       	out	0x22, r25	; 34
    28c8:	81 bd       	out	0x21, r24	; 33
    28ca:	f8 9a       	sbi	0x1f, 0	; 31
    28cc:	99 27       	eor	r25, r25
    28ce:	80 b5       	in	r24, 0x20	; 32
    28d0:	08 95       	ret

000028d2 <strrev>:
    28d2:	dc 01       	movw	r26, r24
    28d4:	fc 01       	movw	r30, r24
    28d6:	67 2f       	mov	r22, r23
    28d8:	71 91       	ld	r23, Z+
    28da:	77 23       	and	r23, r23
    28dc:	e1 f7       	brne	.-8      	; 0x28d6 <strrev+0x4>
    28de:	32 97       	sbiw	r30, 0x02	; 2
    28e0:	04 c0       	rjmp	.+8      	; 0x28ea <strrev+0x18>
    28e2:	7c 91       	ld	r23, X
    28e4:	6d 93       	st	X+, r22
    28e6:	70 83       	st	Z, r23
    28e8:	62 91       	ld	r22, -Z
    28ea:	ae 17       	cp	r26, r30
    28ec:	bf 07       	cpc	r27, r31
    28ee:	c8 f3       	brcs	.-14     	; 0x28e2 <strrev+0x10>
    28f0:	08 95       	ret

000028f2 <__mulsi3>:
    28f2:	62 9f       	mul	r22, r18
    28f4:	d0 01       	movw	r26, r0
    28f6:	73 9f       	mul	r23, r19
    28f8:	f0 01       	movw	r30, r0
    28fa:	82 9f       	mul	r24, r18
    28fc:	e0 0d       	add	r30, r0
    28fe:	f1 1d       	adc	r31, r1
    2900:	64 9f       	mul	r22, r20
    2902:	e0 0d       	add	r30, r0
    2904:	f1 1d       	adc	r31, r1
    2906:	92 9f       	mul	r25, r18
    2908:	f0 0d       	add	r31, r0
    290a:	83 9f       	mul	r24, r19
    290c:	f0 0d       	add	r31, r0
    290e:	74 9f       	mul	r23, r20
    2910:	f0 0d       	add	r31, r0
    2912:	65 9f       	mul	r22, r21
    2914:	f0 0d       	add	r31, r0
    2916:	99 27       	eor	r25, r25
    2918:	72 9f       	mul	r23, r18
    291a:	b0 0d       	add	r27, r0
    291c:	e1 1d       	adc	r30, r1
    291e:	f9 1f       	adc	r31, r25
    2920:	63 9f       	mul	r22, r19
    2922:	b0 0d       	add	r27, r0
    2924:	e1 1d       	adc	r30, r1
    2926:	f9 1f       	adc	r31, r25
    2928:	bd 01       	movw	r22, r26
    292a:	cf 01       	movw	r24, r30
    292c:	11 24       	eor	r1, r1
    292e:	08 95       	ret

00002930 <__divmodsi4>:
    2930:	97 fb       	bst	r25, 7
    2932:	09 2e       	mov	r0, r25
    2934:	05 26       	eor	r0, r21
    2936:	0e d0       	rcall	.+28     	; 0x2954 <__divmodsi4_neg1>
    2938:	57 fd       	sbrc	r21, 7
    293a:	04 d0       	rcall	.+8      	; 0x2944 <__divmodsi4_neg2>
    293c:	14 d0       	rcall	.+40     	; 0x2966 <__udivmodsi4>
    293e:	0a d0       	rcall	.+20     	; 0x2954 <__divmodsi4_neg1>
    2940:	00 1c       	adc	r0, r0
    2942:	38 f4       	brcc	.+14     	; 0x2952 <__divmodsi4_exit>

00002944 <__divmodsi4_neg2>:
    2944:	50 95       	com	r21
    2946:	40 95       	com	r20
    2948:	30 95       	com	r19
    294a:	21 95       	neg	r18
    294c:	3f 4f       	sbci	r19, 0xFF	; 255
    294e:	4f 4f       	sbci	r20, 0xFF	; 255
    2950:	5f 4f       	sbci	r21, 0xFF	; 255

00002952 <__divmodsi4_exit>:
    2952:	08 95       	ret

00002954 <__divmodsi4_neg1>:
    2954:	f6 f7       	brtc	.-4      	; 0x2952 <__divmodsi4_exit>
    2956:	90 95       	com	r25
    2958:	80 95       	com	r24
    295a:	70 95       	com	r23
    295c:	61 95       	neg	r22
    295e:	7f 4f       	sbci	r23, 0xFF	; 255
    2960:	8f 4f       	sbci	r24, 0xFF	; 255
    2962:	9f 4f       	sbci	r25, 0xFF	; 255
    2964:	08 95       	ret

00002966 <__udivmodsi4>:
    2966:	a1 e2       	ldi	r26, 0x21	; 33
    2968:	1a 2e       	mov	r1, r26
    296a:	aa 1b       	sub	r26, r26
    296c:	bb 1b       	sub	r27, r27
    296e:	fd 01       	movw	r30, r26
    2970:	0d c0       	rjmp	.+26     	; 0x298c <__udivmodsi4_ep>

00002972 <__udivmodsi4_loop>:
    2972:	aa 1f       	adc	r26, r26
    2974:	bb 1f       	adc	r27, r27
    2976:	ee 1f       	adc	r30, r30
    2978:	ff 1f       	adc	r31, r31
    297a:	a2 17       	cp	r26, r18
    297c:	b3 07       	cpc	r27, r19
    297e:	e4 07       	cpc	r30, r20
    2980:	f5 07       	cpc	r31, r21
    2982:	20 f0       	brcs	.+8      	; 0x298c <__udivmodsi4_ep>
    2984:	a2 1b       	sub	r26, r18
    2986:	b3 0b       	sbc	r27, r19
    2988:	e4 0b       	sbc	r30, r20
    298a:	f5 0b       	sbc	r31, r21

0000298c <__udivmodsi4_ep>:
    298c:	66 1f       	adc	r22, r22
    298e:	77 1f       	adc	r23, r23
    2990:	88 1f       	adc	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	1a 94       	dec	r1
    2996:	69 f7       	brne	.-38     	; 0x2972 <__udivmodsi4_loop>
    2998:	60 95       	com	r22
    299a:	70 95       	com	r23
    299c:	80 95       	com	r24
    299e:	90 95       	com	r25
    29a0:	9b 01       	movw	r18, r22
    29a2:	ac 01       	movw	r20, r24
    29a4:	bd 01       	movw	r22, r26
    29a6:	cf 01       	movw	r24, r30
    29a8:	08 95       	ret

000029aa <_exit>:
    29aa:	f8 94       	cli

000029ac <__stop_program>:
    29ac:	ff cf       	rjmp	.-2      	; 0x29ac <__stop_program>
